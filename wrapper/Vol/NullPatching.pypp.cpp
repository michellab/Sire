// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NullPatching.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "SireVol/periodicbox.h"

#include "patching.h"

#include "patching.h"

SireVol::NullPatching __copy__(const SireVol::NullPatching &other){ return SireVol::NullPatching(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NullPatching_class(){

    { //::SireVol::NullPatching
        typedef bp::class_< SireVol::NullPatching, bp::bases< SireVol::Patching, SireBase::Property > > NullPatching_exposer_t;
        NullPatching_exposer_t NullPatching_exposer = NullPatching_exposer_t( "NullPatching", "", bp::init< >("Constructor") );
        bp::scope NullPatching_scope( NullPatching_exposer );
        NullPatching_exposer.def( bp::init< SireVol::Space const & >(( bp::arg("space") ), "Construct with the passed space") );
        NullPatching_exposer.def( bp::init< SireVol::NullPatching const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireVol::NullPatching::nPatches
        
            typedef int ( ::SireVol::NullPatching::*nPatches_function_type)(  ) const;
            nPatches_function_type nPatches_function_value( &::SireVol::NullPatching::nPatches );
            
            NullPatching_exposer.def( 
                "nPatches"
                , nPatches_function_value
                , "Return the number of patches" );
        
        }
        NullPatching_exposer.def( bp::self != bp::self );
        { //::SireVol::NullPatching::operator=
        
            typedef ::SireVol::NullPatching & ( ::SireVol::NullPatching::*assign_function_type)( ::SireVol::NullPatching const & ) ;
            assign_function_type assign_function_value( &::SireVol::NullPatching::operator= );
            
            NullPatching_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        NullPatching_exposer.def( bp::self == bp::self );
        { //::SireVol::NullPatching::patchIndex
        
            typedef int ( ::SireVol::NullPatching::*patchIndex_function_type)( ::SireMaths::Vector const & ) const;
            patchIndex_function_type patchIndex_function_value( &::SireVol::NullPatching::patchIndex );
            
            NullPatching_exposer.def( 
                "patchIndex"
                , patchIndex_function_value
                , ( bp::arg("point") )
                , "Return the patch index of the passed point" );
        
        }
        { //::SireVol::NullPatching::patchIndexAndCenter
        
            typedef ::QPair< int, SireMaths::Vector > ( ::SireVol::NullPatching::*patchIndexAndCenter_function_type)( ::SireMaths::Vector const & ) const;
            patchIndexAndCenter_function_type patchIndexAndCenter_function_value( &::SireVol::NullPatching::patchIndexAndCenter );
            
            NullPatching_exposer.def( 
                "patchIndexAndCenter"
                , patchIndexAndCenter_function_value
                , ( bp::arg("point") )
                , "Return the patch index and the center of the patch" );
        
        }
        { //::SireVol::NullPatching::repatch
        
            typedef ::SireVol::PatchingPtr ( ::SireVol::NullPatching::*repatch_function_type)( ::SireVol::Space const & ) const;
            repatch_function_type repatch_function_value( &::SireVol::NullPatching::repatch );
            
            NullPatching_exposer.def( 
                "repatch"
                , repatch_function_value
                , ( bp::arg("new_space") )
                , "Repatch this patching for the passed space" );
        
        }
        { //::SireVol::NullPatching::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::NullPatching::typeName );
            
            NullPatching_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        NullPatching_exposer.staticmethod( "typeName" );
        NullPatching_exposer.def( "__copy__", &__copy__);
        NullPatching_exposer.def( "__deepcopy__", &__copy__);
        NullPatching_exposer.def( "clone", &__copy__);
        NullPatching_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::NullPatching >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullPatching_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::NullPatching >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullPatching_exposer.def( "__str__", &__str__< ::SireVol::NullPatching > );
        NullPatching_exposer.def( "__repr__", &__str__< ::SireVol::NullPatching > );
    }

}
