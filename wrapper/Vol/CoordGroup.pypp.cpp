// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoordGroup.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/quickcopy.hpp"

#include "SireError/errors.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "coordgroup.h"

#include <QDebug>

#include "coordgroup.h"

SireVol::CoordGroup __copy__(const SireVol::CoordGroup &other){ return SireVol::CoordGroup(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_CoordGroup_class(){

    { //::SireVol::CoordGroup
        typedef bp::class_< SireVol::CoordGroup, bp::bases< SireVol::CoordGroupBase > > CoordGroup_exposer_t;
        CoordGroup_exposer_t CoordGroup_exposer = CoordGroup_exposer_t( "CoordGroup", "", bp::init< >("Null constructor") );
        bp::scope CoordGroup_scope( CoordGroup_exposer );
        CoordGroup_exposer.def( bp::init< quint32 >(( bp::arg("size") ), "Construct a CoordGroup that holds size coordinates") );
        CoordGroup_exposer.def( bp::init< quint32, SireMaths::Vector const & >(( bp::arg("size"), bp::arg("value") ), "Construct a CoordGroup that holds size coordinates,\nall of which have the value value") );
        CoordGroup_exposer.def( bp::init< quint32, SireMaths::Vector const * >(( bp::arg("size"), bp::arg("values") ), "Construct a CoordGroup that holds the size points\ncopied from the array values") );
        CoordGroup_exposer.def( bp::init< SireVol::CoordGroupArray const & >(( bp::arg("cgarray") ), "Construct a CoordGroup from all of the coordinates contained\nin the passed CoordGroup array") );
        CoordGroup_exposer.def( bp::init< SireVol::CoordGroupArrayArray const & >(( bp::arg("cgarrays") ), "Construct a CoordGroup from all of the coordinates in the\npassed collection of CoordGroup arrays") );
        CoordGroup_exposer.def( bp::init< QVector< SireMaths::Vector > const & >(( bp::arg("points") ), "Construct a CoordGroup from the array of passed coordinates") );
        CoordGroup_exposer.def( bp::init< SireVol::CoordGroup const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireVol::CoordGroup::edit
        
            typedef ::SireVol::CoordGroupEditor ( ::SireVol::CoordGroup::*edit_function_type)(  ) const;
            edit_function_type edit_function_value( &::SireVol::CoordGroup::edit );
            
            CoordGroup_exposer.def( 
                "edit"
                , edit_function_value
                , "Return an editor that can be used to edit the\ncoordinates in this group" );
        
        }
        { //::SireVol::CoordGroup::operator=
        
            typedef ::SireVol::CoordGroup & ( ::SireVol::CoordGroup::*assign_function_type)( ::SireVol::CoordGroup const & ) ;
            assign_function_type assign_function_value( &::SireVol::CoordGroup::operator= );
            
            CoordGroup_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireVol::CoordGroup::operator=
        
            typedef ::SireVol::CoordGroup & ( ::SireVol::CoordGroup::*assign_function_type)( ::SireVol::CoordGroupEditor & ) ;
            assign_function_type assign_function_value( &::SireVol::CoordGroup::operator= );
            
            CoordGroup_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireVol::CoordGroup::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::CoordGroup::typeName );
            
            CoordGroup_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireVol::CoordGroup::what
        
            typedef char const * ( ::SireVol::CoordGroup::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireVol::CoordGroup::what );
            
            CoordGroup_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        CoordGroup_exposer.staticmethod( "typeName" );
        CoordGroup_exposer.def( "__copy__", &__copy__);
        CoordGroup_exposer.def( "__deepcopy__", &__copy__);
        CoordGroup_exposer.def( "clone", &__copy__);
        CoordGroup_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::CoordGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoordGroup_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::CoordGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoordGroup_exposer.def( "__str__", &__str__< ::SireVol::CoordGroup > );
        CoordGroup_exposer.def( "__repr__", &__str__< ::SireVol::CoordGroup > );
        CoordGroup_exposer.def( "__len__", &__len_size< ::SireVol::CoordGroup > );
    }

}
