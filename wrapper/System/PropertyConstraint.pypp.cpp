// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PropertyConstraint.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/numberproperty.h"

#include "SireBase/propertylist.h"

#include "SireError/errors.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireStream/streamdata.hpp"

#include "SireSystem/errors.h"

#include "constraint.h"

#include "delta.h"

#include "system.h"

#include <QDebug>

#include "constraint.h"

SireSystem::PropertyConstraint __copy__(const SireSystem::PropertyConstraint &other){ return SireSystem::PropertyConstraint(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_PropertyConstraint_class(){

    { //::SireSystem::PropertyConstraint
        typedef bp::class_< SireSystem::PropertyConstraint, bp::bases< SireSystem::Constraint, SireBase::Property > > PropertyConstraint_exposer_t;
        PropertyConstraint_exposer_t PropertyConstraint_exposer = PropertyConstraint_exposer_t( "PropertyConstraint", "This constraint is used to constrain the value of a\nnumerical property of the system (or part of the system)\nto a specific value, or to the result of an expression.\n\nYou can use this constraint, for example, to constrain\nthe value of alpha for soft-core forcefields to map\nto the value of lambda\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope PropertyConstraint_scope( PropertyConstraint_exposer );
        PropertyConstraint_exposer.def( bp::init< QString const &, SireCAS::Expression const & >(( bp::arg("name"), bp::arg("expression") ), "Construct to constrain the property with name name in all forcefields\nto have the value resulting from the expression expression") );
        PropertyConstraint_exposer.def( bp::init< QString const &, SireFF::FFID const &, SireCAS::Expression const & >(( bp::arg("name"), bp::arg("ffid"), bp::arg("expression") ), "Construct to constrain the property with name name in the forcefield(s)\nthat match the ID ffid to have the value resulting the expression\nexpression") );
        PropertyConstraint_exposer.def( bp::init< SireSystem::PropertyConstraint const & >(( bp::arg("other") ), "Copy constructor") );
        PropertyConstraint_exposer.def( bp::self != bp::self );
        { //::SireSystem::PropertyConstraint::operator=
        
            typedef ::SireSystem::PropertyConstraint & ( ::SireSystem::PropertyConstraint::*assign_function_type)( ::SireSystem::PropertyConstraint const & ) ;
            assign_function_type assign_function_value( &::SireSystem::PropertyConstraint::operator= );
            
            PropertyConstraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        PropertyConstraint_exposer.def( bp::self == bp::self );
        { //::SireSystem::PropertyConstraint::toString
        
            typedef ::QString ( ::SireSystem::PropertyConstraint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireSystem::PropertyConstraint::toString );
            
            PropertyConstraint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of the constraint" );
        
        }
        { //::SireSystem::PropertyConstraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::PropertyConstraint::typeName );
            
            PropertyConstraint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PropertyConstraint_exposer.staticmethod( "typeName" );
        PropertyConstraint_exposer.def( "__copy__", &__copy__);
        PropertyConstraint_exposer.def( "__deepcopy__", &__copy__);
        PropertyConstraint_exposer.def( "clone", &__copy__);
        PropertyConstraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::PropertyConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PropertyConstraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::PropertyConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PropertyConstraint_exposer.def_pickle(sire_pickle_suite< ::SireSystem::PropertyConstraint >());
        PropertyConstraint_exposer.def( "__str__", &__str__< ::SireSystem::PropertyConstraint > );
        PropertyConstraint_exposer.def( "__repr__", &__str__< ::SireSystem::PropertyConstraint > );
    }

}
