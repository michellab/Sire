// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "AssignerGroup.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMM/atomljs.h"

#include "SireMM/cljatoms.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/ljpair.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/mgname.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/freeenergymonitor.h"

#include "SireSystem/system.h"

#include "SireUnits/units.h"

#include "freeenergymonitor.h"

#include <QTime>

#include "freeenergymonitor.h"

SireSystem::AssignerGroup __copy__(const SireSystem::AssignerGroup &other){ return SireSystem::AssignerGroup(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::AssignerGroup&){ return "SireSystem::AssignerGroup";}

#include "Helpers/release_gil_policy.hpp"

void register_AssignerGroup_class(){

    { //::SireSystem::AssignerGroup
        typedef bp::class_< SireSystem::AssignerGroup > AssignerGroup_exposer_t;
        AssignerGroup_exposer_t AssignerGroup_exposer = AssignerGroup_exposer_t( "AssignerGroup", "This is a simple class that holds either a MoleculeGroup or an IDAssigner\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope AssignerGroup_scope( AssignerGroup_exposer );
        AssignerGroup_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") ), "Construct as a holder for a MoleculeGroup") );
        AssignerGroup_exposer.def( bp::init< SireSystem::IDAssigner const & >(( bp::arg("assigner") ), "Construct as a holder for an IDAssigner") );
        AssignerGroup_exposer.def( bp::init< SireSystem::AssignerGroup const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireSystem::AssignerGroup::assigner
        
            typedef ::SireSystem::IDAssigner const & ( ::SireSystem::AssignerGroup::*assigner_function_type)(  ) const;
            assigner_function_type assigner_function_value( &::SireSystem::AssignerGroup::assigner );
            
            AssignerGroup_exposer.def( 
                "assigner"
                , assigner_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the IDAssigner" );
        
        }
        { //::SireSystem::AssignerGroup::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::AssignerGroup::*group_function_type)(  ) const;
            group_function_type group_function_value( &::SireSystem::AssignerGroup::group );
            
            AssignerGroup_exposer.def( 
                "group"
                , group_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group" );
        
        }
        { //::SireSystem::AssignerGroup::isAssigner
        
            typedef bool ( ::SireSystem::AssignerGroup::*isAssigner_function_type)(  ) const;
            isAssigner_function_type isAssigner_function_value( &::SireSystem::AssignerGroup::isAssigner );
            
            AssignerGroup_exposer.def( 
                "isAssigner"
                , isAssigner_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is holding an IDAssigner" );
        
        }
        { //::SireSystem::AssignerGroup::isCompatible
        
            typedef bool ( ::SireSystem::AssignerGroup::*isCompatible_function_type)( ::SireSystem::AssignerGroup const & ) const;
            isCompatible_function_type isCompatible_function_value( &::SireSystem::AssignerGroup::isCompatible );
            
            AssignerGroup_exposer.def( 
                "isCompatible"
                , isCompatible_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Return whether or not this group is compatible with other.\nCompatible means is the same type, refers to the same MoleculeGroup etc." );
        
        }
        { //::SireSystem::AssignerGroup::isEmpty
        
            typedef bool ( ::SireSystem::AssignerGroup::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireSystem::AssignerGroup::isEmpty );
            
            AssignerGroup_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is empty" );
        
        }
        { //::SireSystem::AssignerGroup::isMoleculeGroup
        
            typedef bool ( ::SireSystem::AssignerGroup::*isMoleculeGroup_function_type)(  ) const;
            isMoleculeGroup_function_type isMoleculeGroup_function_value( &::SireSystem::AssignerGroup::isMoleculeGroup );
            
            AssignerGroup_exposer.def( 
                "isMoleculeGroup"
                , isMoleculeGroup_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is a holding a MoleculeGroup" );
        
        }
        AssignerGroup_exposer.def( bp::self != bp::self );
        { //::SireSystem::AssignerGroup::operator=
        
            typedef ::SireSystem::AssignerGroup & ( ::SireSystem::AssignerGroup::*assign_function_type)( ::SireSystem::AssignerGroup const & ) ;
            assign_function_type assign_function_value( &::SireSystem::AssignerGroup::operator= );
            
            AssignerGroup_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AssignerGroup_exposer.def( bp::self == bp::self );
        { //::SireSystem::AssignerGroup::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::AssignerGroup::typeName );
            
            AssignerGroup_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireSystem::AssignerGroup::update
        
            typedef void ( ::SireSystem::AssignerGroup::*update_function_type)( ::SireSystem::System const & ) ;
            update_function_type update_function_value( &::SireSystem::AssignerGroup::update );
            
            AssignerGroup_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system") )
                , bp::release_gil_policy()
                , "Update the contained group or assigner to match the version\nin the passed system" );
        
        }
        { //::SireSystem::AssignerGroup::views
        
            typedef ::QVector< SireMol::PartialMolecule > ( ::SireSystem::AssignerGroup::*views_function_type)(  ) const;
            views_function_type views_function_value( &::SireSystem::AssignerGroup::views );
            
            AssignerGroup_exposer.def( 
                "views"
                , views_function_value
                , bp::release_gil_policy()
                , "Return the molecule views contained in this group" );
        
        }
        { //::SireSystem::AssignerGroup::what
        
            typedef char const * ( ::SireSystem::AssignerGroup::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireSystem::AssignerGroup::what );
            
            AssignerGroup_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AssignerGroup_exposer.staticmethod( "typeName" );
        AssignerGroup_exposer.def( "__copy__", &__copy__);
        AssignerGroup_exposer.def( "__deepcopy__", &__copy__);
        AssignerGroup_exposer.def( "clone", &__copy__);
        AssignerGroup_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::AssignerGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AssignerGroup_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::AssignerGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AssignerGroup_exposer.def_pickle(sire_pickle_suite< ::SireSystem::AssignerGroup >());
        AssignerGroup_exposer.def( "__str__", &pvt_get_name);
        AssignerGroup_exposer.def( "__repr__", &pvt_get_name);
    }

}
