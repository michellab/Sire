// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SpaceWrapper.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/molecule.h"

#include "SireMol/molecules.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/space.h"

#include "delta.h"

#include "spacewrapper.h"

#include "system.h"

#include "spacewrapper.h"

SireSystem::SpaceWrapper __copy__(const SireSystem::SpaceWrapper &other){ return SireSystem::SpaceWrapper(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_SpaceWrapper_class(){

    { //::SireSystem::SpaceWrapper
        typedef bp::class_< SireSystem::SpaceWrapper, bp::bases< SireSystem::MoleculeConstraint, SireSystem::Constraint, SireBase::Property > > SpaceWrapper_exposer_t;
        SpaceWrapper_exposer_t SpaceWrapper_exposer = SpaceWrapper_exposer_t( "SpaceWrapper", "This is a molecule constraint that constrains\na group of molecules to lie within the same\nperiodic box as a specified point - the molecules\nare wrapped into the box (i.e. they are moved into\nthe opposite side of the box that they leave)\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope SpaceWrapper_scope( SpaceWrapper_exposer );
        SpaceWrapper_exposer.def( bp::init< SireFF::PointRef const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() ), "Construct to wrap all of the molecules in the group molgroup\ninto the same periodic box as the point point using the\nsupplied property map to find the space and coordinate properties") );
        SpaceWrapper_exposer.def( bp::init< SireSystem::SpaceWrapper const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireSystem::SpaceWrapper::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::SpaceWrapper::*moleculeGroup_function_type)(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireSystem::SpaceWrapper::moleculeGroup );
            
            SpaceWrapper_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group containing the molecules being wrapped" );
        
        }
        SpaceWrapper_exposer.def( bp::self != bp::self );
        { //::SireSystem::SpaceWrapper::operator=
        
            typedef ::SireSystem::SpaceWrapper & ( ::SireSystem::SpaceWrapper::*assign_function_type)( ::SireSystem::SpaceWrapper const & ) ;
            assign_function_type assign_function_value( &::SireSystem::SpaceWrapper::operator= );
            
            SpaceWrapper_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SpaceWrapper_exposer.def( bp::self == bp::self );
        { //::SireSystem::SpaceWrapper::point
        
            typedef ::SireFF::Point const & ( ::SireSystem::SpaceWrapper::*point_function_type)(  ) const;
            point_function_type point_function_value( &::SireSystem::SpaceWrapper::point );
            
            SpaceWrapper_exposer.def( 
                "point"
                , point_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the point that defines the center of the periodic box\n(the molecules will be wrapped so that they are in the same\nbox as this point)" );
        
        }
        { //::SireSystem::SpaceWrapper::propertyMap
        
            typedef ::SireBase::PropertyMap const & ( ::SireSystem::SpaceWrapper::*propertyMap_function_type)(  ) const;
            propertyMap_function_type propertyMap_function_value( &::SireSystem::SpaceWrapper::propertyMap );
            
            SpaceWrapper_exposer.def( 
                "propertyMap"
                , propertyMap_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the property map used to find the coordinates and\nspace properties" );
        
        }
        { //::SireSystem::SpaceWrapper::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::SpaceWrapper::typeName );
            
            SpaceWrapper_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SpaceWrapper_exposer.staticmethod( "typeName" );
        SpaceWrapper_exposer.def( "__copy__", &__copy__);
        SpaceWrapper_exposer.def( "__deepcopy__", &__copy__);
        SpaceWrapper_exposer.def( "clone", &__copy__);
        SpaceWrapper_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::SpaceWrapper >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpaceWrapper_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::SpaceWrapper >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpaceWrapper_exposer.def_pickle(sire_pickle_suite< ::SireSystem::SpaceWrapper >());
        SpaceWrapper_exposer.def( "__str__", &__str__< ::SireSystem::SpaceWrapper > );
        SpaceWrapper_exposer.def( "__repr__", &__str__< ::SireSystem::SpaceWrapper > );
    }

}
