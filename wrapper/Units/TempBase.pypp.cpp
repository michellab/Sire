// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TempBase.pypp.hpp"

namespace bp = boost::python;

#include "temperature.h"

#include "temperature.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_TempBase_class(){

    { //::SireUnits::Dimension::TempBase
        typedef bp::class_< SireUnits::Dimension::TempBase, boost::noncopyable > TempBase_exposer_t;
        TempBase_exposer_t TempBase_exposer = TempBase_exposer_t( "TempBase", "", bp::no_init );
        bp::scope TempBase_scope( TempBase_exposer );
        { //::SireUnits::Dimension::TempBase::convertFromInternal
        
            typedef double ( ::SireUnits::Dimension::TempBase::*convertFromInternal_function_type)( double ) const;
            convertFromInternal_function_type convertFromInternal_function_value( &::SireUnits::Dimension::TempBase::convertFromInternal );
            
            TempBase_exposer.def( 
                "convertFromInternal"
                , convertFromInternal_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::convertFromInternal
        
            typedef double ( ::SireUnits::Dimension::TempBase::*convertFromInternal_function_type)(  ) const;
            convertFromInternal_function_type convertFromInternal_function_value( &::SireUnits::Dimension::TempBase::convertFromInternal );
            
            TempBase_exposer.def( 
                "convertFromInternal"
                , convertFromInternal_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::convertToInternal
        
            typedef double ( ::SireUnits::Dimension::TempBase::*convertToInternal_function_type)( double ) const;
            convertToInternal_function_type convertToInternal_function_value( &::SireUnits::Dimension::TempBase::convertToInternal );
            
            TempBase_exposer.def( 
                "convertToInternal"
                , convertToInternal_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::in
        
            typedef double ( ::SireUnits::Dimension::TempBase::*in_function_type)( ::SireUnits::Dimension::TempBase const & ) const;
            in_function_type in_function_value( &::SireUnits::Dimension::TempBase::in );
            
            TempBase_exposer.def( 
                "in"
                , in_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::in
        
            typedef double ( ::SireUnits::Dimension::TempBase::*in_function_type)( ::SireUnits::Dimension::Temperature const & ) const;
            in_function_type in_function_value( &::SireUnits::Dimension::TempBase::in );
            
            TempBase_exposer.def( 
                "in"
                , in_function_value
                , ( bp::arg("temp") )
                , bp::release_gil_policy()
                , "" );
        
        }
        TempBase_exposer.def( bp::self != bp::self );
        TempBase_exposer.def( bp::self != bp::other< SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 1, 0, 0 > >() );
        { //::SireUnits::Dimension::TempBase::operator=
        
            typedef ::SireUnits::Dimension::TempBase & ( ::SireUnits::Dimension::TempBase::*assign_function_type)( ::SireUnits::Dimension::TempBase const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::TempBase::operator= );
            
            TempBase_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::operator=
        
            typedef ::SireUnits::Dimension::TempBase & ( ::SireUnits::Dimension::TempBase::*assign_function_type)( ::SireUnits::Dimension::Temperature const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::TempBase::operator= );
            
            TempBase_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("temp") )
                , bp::return_self< >()
                , "" );
        
        }
        TempBase_exposer.def( bp::self == bp::self );
        TempBase_exposer.def( bp::self == bp::other< SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 1, 0, 0 > >() );
        { //::SireUnits::Dimension::TempBase::to
        
            typedef double ( ::SireUnits::Dimension::TempBase::*to_function_type)( ::SireUnits::Dimension::TempBase const & ) const;
            to_function_type to_function_value( &::SireUnits::Dimension::TempBase::to );
            
            TempBase_exposer.def( 
                "to"
                , to_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::toString
        
            typedef ::QString ( ::SireUnits::Dimension::TempBase::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireUnits::Dimension::TempBase::toString );
            
            TempBase_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::TempBase::value
        
            typedef double ( ::SireUnits::Dimension::TempBase::*value_function_type)(  ) const;
            value_function_type value_function_value( &::SireUnits::Dimension::TempBase::value );
            
            TempBase_exposer.def( 
                "value"
                , value_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        TempBase_exposer.def( "__str__", &__str__< ::SireUnits::Dimension::TempBase > );
        TempBase_exposer.def( "__repr__", &__str__< ::SireUnits::Dimension::TempBase > );
    }

}
