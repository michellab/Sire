// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "IOBase.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/cuttingfunction.h"

#include "SireMol/molecule.h"

#include "SireMol/molidx.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "iobase.h"

#include <QDebug>

#include <QFile>

#include "iobase.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_IOBase_class(){

    { //::SireIO::IOBase
        typedef bp::class_< SireIO::IOBase, bp::bases< SireBase::Property >, boost::noncopyable > IOBase_exposer_t;
        IOBase_exposer_t IOBase_exposer = IOBase_exposer_t( "IOBase", "This is the virtual base class of all molecule readers and writers.\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope IOBase_scope( IOBase_exposer );
        { //::SireIO::IOBase::null
        
            typedef ::SireIO::NullIO ( *null_function_type )(  );
            null_function_type null_function_value( &::SireIO::IOBase::null );
            
            IOBase_exposer.def( 
                "null"
                , null_function_value
                , bp::release_gil_policy()
                , "Return the global null IOBase object (a PDB writer)" );
        
        }
        { //::SireIO::IOBase::read
        
            typedef ::SireMol::MoleculeGroup ( ::SireIO::IOBase::*read_function_type)( ::QString const &,::SireBase::PropertyMap const & ) const;
            read_function_type read_function_value( &::SireIO::IOBase::read );
            
            IOBase_exposer.def( 
                "read"
                , read_function_value
                , ( bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read all of the molecules contained in the file filename, using\nthe (optional) passed properties in map, and returning a molecule\ngroup containing the molecules in the same order as they appear\nin the file, and with the molecule group name being filename" );
        
        }
        { //::SireIO::IOBase::read
        
            typedef ::SireMol::MoleculeGroup ( ::SireIO::IOBase::*read_function_type)( char const *,::SireBase::PropertyMap const & ) const;
            read_function_type read_function_value( &::SireIO::IOBase::read );
            
            IOBase_exposer.def( 
                "read"
                , read_function_value
                , ( bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Simple overload of IOBase::read(QString)" );
        
        }
        { //::SireIO::IOBase::read
        
            typedef ::SireMol::MoleculeGroup ( ::SireIO::IOBase::*read_function_type)( ::QIODevice &,::SireBase::PropertyMap const & ) const;
            read_function_type read_function_value( &::SireIO::IOBase::read );
            
            IOBase_exposer.def( 
                "read"
                , read_function_value
                , ( bp::arg("dev"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read all of the molecules contained in the IO device dev, using\nthe (optional) passed properties in map, and returning a molecule\ngroup containing the molecules in the same order as they appear\non the device, and with the molecule group name being taken\nfrom the device" );
        
        }
        { //::SireIO::IOBase::read
        
            typedef ::SireMol::MoleculeGroup ( ::SireIO::IOBase::*read_function_type)( ::QByteArray const &,::SireBase::PropertyMap const & ) const;
            read_function_type read_function_value( &::SireIO::IOBase::read );
            
            IOBase_exposer.def( 
                "read"
                , read_function_value
                , ( bp::arg("data"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read all of the molecules contained in the data data, using\nthe (optional) passed properties in map, and returning a\nmolecule group containing the molecules in the same order as\nthey appear in the file" );
        
        }
        { //::SireIO::IOBase::readMolecule
        
            typedef ::SireMol::Molecule ( ::SireIO::IOBase::*readMolecule_function_type)( ::QString const &,::SireBase::PropertyMap const & ) const;
            readMolecule_function_type readMolecule_function_value( &::SireIO::IOBase::readMolecule );
            
            IOBase_exposer.def( 
                "readMolecule"
                , readMolecule_function_value
                , ( bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read a single molecule from the passed file - this returns only\nthe first molecule from the file" );
        
        }
        { //::SireIO::IOBase::readMolecule
        
            typedef ::SireMol::Molecule ( ::SireIO::IOBase::*readMolecule_function_type)( char const *,::SireBase::PropertyMap const & ) const;
            readMolecule_function_type readMolecule_function_value( &::SireIO::IOBase::readMolecule );
            
            IOBase_exposer.def( 
                "readMolecule"
                , readMolecule_function_value
                , ( bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Simple overload designed to prevent confusion with QByteArray function" );
        
        }
        { //::SireIO::IOBase::readMolecule
        
            typedef ::SireMol::Molecule ( ::SireIO::IOBase::*readMolecule_function_type)( ::QIODevice &,::SireBase::PropertyMap const & ) const;
            readMolecule_function_type readMolecule_function_value( &::SireIO::IOBase::readMolecule );
            
            IOBase_exposer.def( 
                "readMolecule"
                , readMolecule_function_value
                , ( bp::arg("dev"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read a single molecule from the passed IO device - this returns\nonly the first molecule from the device" );
        
        }
        { //::SireIO::IOBase::readMolecule
        
            typedef ::SireMol::Molecule ( ::SireIO::IOBase::*readMolecule_function_type)( ::QByteArray const &,::SireBase::PropertyMap const & ) const;
            readMolecule_function_type readMolecule_function_value( &::SireIO::IOBase::readMolecule );
            
            IOBase_exposer.def( 
                "readMolecule"
                , readMolecule_function_value
                , ( bp::arg("data"), bp::arg("map")=SireBase::PropertyMap() )
                , "Read a single molecule from the passed data - this returns only\nthe first molecule from the data" );
        
        }
        { //::SireIO::IOBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::IOBase::typeName );
            
            IOBase_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeGroup const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules in the passed group to the file called filename." );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::Molecules const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules in the passed group to the file called filename." );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeView const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecule"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the passed molecule to the file called filename" );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeGroup const &,::QIODevice &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("dev"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules in the passed group to the IO device dev." );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::Molecules const &,::QIODevice &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("dev"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules in the passed group to the IO device dev." );
        
        }
        { //::SireIO::IOBase::write
        
            typedef void ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeView const &,::QIODevice &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecule"), bp::arg("dev"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the passed molecule to the IO device dev" );
        
        }
        { //::SireIO::IOBase::write
        
            typedef ::QByteArray ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules to memory, which is returned" );
        
        }
        { //::SireIO::IOBase::write
        
            typedef ::QByteArray ( ::SireIO::IOBase::*write_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules to memory, which is returned" );
        
        }
        { //::SireIO::IOBase::write
        
            typedef ::QByteArray ( ::SireIO::IOBase::*write_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::IOBase::write );
            
            IOBase_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the passed molecule to memory, which is returned" );
        
        }
        IOBase_exposer.staticmethod( "null" );
        IOBase_exposer.staticmethod( "typeName" );
        IOBase_exposer.def( "__str__", &__str__< ::SireIO::IOBase > );
        IOBase_exposer.def( "__repr__", &__str__< ::SireIO::IOBase > );
    }

}
