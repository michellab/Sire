// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Cube.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atomelements.h"

#include "SireMol/molecule.h"

#include "SireUnits/convert.h"

#include "SireUnits/units.h"

#include "SireVol/grid.h"

#include "cube.h"

#include <QFile>

#include <QTextStream>

#include "cube.h"

SireIO::Cube __copy__(const SireIO::Cube &other){ return SireIO::Cube(other); }

const char* pvt_get_name(const SireIO::Cube&){ return "SireIO::Cube";}

#include "Helpers/release_gil_policy.hpp"

void register_Cube_class(){

    { //::SireIO::Cube
        typedef bp::class_< SireIO::Cube > Cube_exposer_t;
        Cube_exposer_t Cube_exposer = Cube_exposer_t( "Cube", "This class is used to write a PotentialTable as a\nGaussian cube file\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope Cube_scope( Cube_exposer );
        Cube_exposer.def( bp::init< SireUnits::Dimension::MolarEnergy >(( bp::arg("cutoff") ), "") );
        Cube_exposer.def( bp::init< SireIO::Cube const & >(( bp::arg("other") ), "") );
        Cube_exposer.def( bp::self != bp::self );
        { //::SireIO::Cube::operator=
        
            typedef ::SireIO::Cube & ( ::SireIO::Cube::*assign_function_type)( ::SireIO::Cube const & ) ;
            assign_function_type assign_function_value( &::SireIO::Cube::operator= );
            
            Cube_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Cube_exposer.def( bp::self == bp::self );
        { //::SireIO::Cube::write
        
            typedef void ( ::SireIO::Cube::*write_function_type)( ::SireFF::PotentialTable const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::Cube::write );
            
            Cube_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("table"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "" );
        
        }
        { //::SireIO::Cube::write
        
            typedef void ( ::SireIO::Cube::*write_function_type)( ::SireFF::PotentialTable const &,::SireMol::MoleculeGroup const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::Cube::write );
            
            Cube_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("table"), bp::arg("molgroup"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "" );
        
        }
        { //::SireIO::Cube::write
        
            typedef void ( ::SireIO::Cube::*write_function_type)( ::SireFF::PotentialTable const &,::SireMol::MolGroupsBase const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::Cube::write );
            
            Cube_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("table"), bp::arg("molecules"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() )
                , "" );
        
        }
        Cube_exposer.def( "__copy__", &__copy__);
        Cube_exposer.def( "__deepcopy__", &__copy__);
        Cube_exposer.def( "clone", &__copy__);
        Cube_exposer.def( "__str__", &pvt_get_name);
        Cube_exposer.def( "__repr__", &pvt_get_name);
    }

}
