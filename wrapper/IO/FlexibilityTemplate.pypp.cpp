// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FlexibilityTemplate.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireMol/angleid.h"

#include "SireMol/atom.h"

#include "SireMol/atomeditor.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/selector.hpp"

#include "SireMove/flexibility.h"

#include "SireMove/internalmove.h"

#include "SireUnits/convert.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "flexibilitylibrary.h"

#include <QFile>

#include <QTextStream>

#include "flexibilitylibrary.h"

SireIO::FlexibilityTemplate __copy__(const SireIO::FlexibilityTemplate &other){ return SireIO::FlexibilityTemplate(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireIO::FlexibilityTemplate&){ return "SireIO::FlexibilityTemplate";}

#include "Helpers/release_gil_policy.hpp"

void register_FlexibilityTemplate_class(){

    { //::SireIO::FlexibilityTemplate
        typedef bp::class_< SireIO::FlexibilityTemplate > FlexibilityTemplate_exposer_t;
        FlexibilityTemplate_exposer_t FlexibilityTemplate_exposer = FlexibilityTemplate_exposer_t( "FlexibilityTemplate", "Internal class used to store the data describing a single flexibility template\n\nAuthor: Julien Michel\n", bp::init< >("Constructor") );
        bp::scope FlexibilityTemplate_scope( FlexibilityTemplate_exposer );
        FlexibilityTemplate_exposer.def( bp::init< QString const & >(( bp::arg("name") ), "Copy constructor") );
        FlexibilityTemplate_exposer.def( bp::init< SireIO::FlexibilityTemplate const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::FlexibilityTemplate::getAngleDeltas
        
            typedef ::QHash< SireMol::AngleID, SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 0, 0, 1 > > const & ( ::SireIO::FlexibilityTemplate::*getAngleDeltas_function_type)(  ) const;
            getAngleDeltas_function_type getAngleDeltas_function_value( &::SireIO::FlexibilityTemplate::getAngleDeltas );
            
            FlexibilityTemplate_exposer.def( 
                "getAngleDeltas"
                , getAngleDeltas_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getBondDeltas
        
            typedef ::QHash< SireMol::BondID, SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & ( ::SireIO::FlexibilityTemplate::*getBondDeltas_function_type)(  ) const;
            getBondDeltas_function_type getBondDeltas_function_value( &::SireIO::FlexibilityTemplate::getBondDeltas );
            
            FlexibilityTemplate_exposer.def( 
                "getBondDeltas"
                , getBondDeltas_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getDelta
        
            typedef ::SireUnits::Dimension::Length ( ::SireIO::FlexibilityTemplate::*getDelta_function_type)( ::SireMol::BondID const & ) const;
            getDelta_function_type getDelta_function_value( &::SireIO::FlexibilityTemplate::getDelta );
            
            FlexibilityTemplate_exposer.def( 
                "getDelta"
                , getDelta_function_value
                , ( bp::arg("bondid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireIO::FlexibilityTemplate::*getDelta_function_type)( ::SireMol::AngleID const & ) const;
            getDelta_function_type getDelta_function_value( &::SireIO::FlexibilityTemplate::getDelta );
            
            FlexibilityTemplate_exposer.def( 
                "getDelta"
                , getDelta_function_value
                , ( bp::arg("angleid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireIO::FlexibilityTemplate::*getDelta_function_type)( ::SireMol::DihedralID const & ) const;
            getDelta_function_type getDelta_function_value( &::SireIO::FlexibilityTemplate::getDelta );
            
            FlexibilityTemplate_exposer.def( 
                "getDelta"
                , getDelta_function_value
                , ( bp::arg("dihedralid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getDihedralDeltas
        
            typedef ::QHash< SireMol::DihedralID, SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 0, 0, 1 > > const & ( ::SireIO::FlexibilityTemplate::*getDihedralDeltas_function_type)(  ) const;
            getDihedralDeltas_function_type getDihedralDeltas_function_value( &::SireIO::FlexibilityTemplate::getDihedralDeltas );
            
            FlexibilityTemplate_exposer.def( 
                "getDihedralDeltas"
                , getDihedralDeltas_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getMaximumAngleVar
        
            typedef int ( ::SireIO::FlexibilityTemplate::*getMaximumAngleVar_function_type)(  ) const;
            getMaximumAngleVar_function_type getMaximumAngleVar_function_value( &::SireIO::FlexibilityTemplate::getMaximumAngleVar );
            
            FlexibilityTemplate_exposer.def( 
                "getMaximumAngleVar"
                , getMaximumAngleVar_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getMaximumBondVar
        
            typedef int ( ::SireIO::FlexibilityTemplate::*getMaximumBondVar_function_type)(  ) const;
            getMaximumBondVar_function_type getMaximumBondVar_function_value( &::SireIO::FlexibilityTemplate::getMaximumBondVar );
            
            FlexibilityTemplate_exposer.def( 
                "getMaximumBondVar"
                , getMaximumBondVar_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getMaximumDihedralVar
        
            typedef int ( ::SireIO::FlexibilityTemplate::*getMaximumDihedralVar_function_type)(  ) const;
            getMaximumDihedralVar_function_type getMaximumDihedralVar_function_value( &::SireIO::FlexibilityTemplate::getMaximumDihedralVar );
            
            FlexibilityTemplate_exposer.def( 
                "getMaximumDihedralVar"
                , getMaximumDihedralVar_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getName
        
            typedef ::QString const ( ::SireIO::FlexibilityTemplate::*getName_function_type)(  ) ;
            getName_function_type getName_function_value( &::SireIO::FlexibilityTemplate::getName );
            
            FlexibilityTemplate_exposer.def( 
                "getName"
                , getName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getRotation
        
            typedef ::SireUnits::Dimension::Angle ( ::SireIO::FlexibilityTemplate::*getRotation_function_type)(  ) const;
            getRotation_function_type getRotation_function_value( &::SireIO::FlexibilityTemplate::getRotation );
            
            FlexibilityTemplate_exposer.def( 
                "getRotation"
                , getRotation_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::getTranslation
        
            typedef ::SireUnits::Dimension::Length ( ::SireIO::FlexibilityTemplate::*getTranslation_function_type)(  ) const;
            getTranslation_function_type getTranslation_function_value( &::SireIO::FlexibilityTemplate::getTranslation );
            
            FlexibilityTemplate_exposer.def( 
                "getTranslation"
                , getTranslation_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        FlexibilityTemplate_exposer.def( bp::self != bp::self );
        { //::SireIO::FlexibilityTemplate::operator=
        
            typedef ::SireIO::FlexibilityTemplate & ( ::SireIO::FlexibilityTemplate::*assign_function_type)( ::SireIO::FlexibilityTemplate const & ) ;
            assign_function_type assign_function_value( &::SireIO::FlexibilityTemplate::operator= );
            
            FlexibilityTemplate_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        FlexibilityTemplate_exposer.def( bp::self == bp::self );
        { //::SireIO::FlexibilityTemplate::setAngleDelta
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setAngleDelta_function_type)( ::SireMol::AngleID const &,::SireUnits::Dimension::Angle const & ) ;
            setAngleDelta_function_type setAngleDelta_function_value( &::SireIO::FlexibilityTemplate::setAngleDelta );
            
            FlexibilityTemplate_exposer.def( 
                "setAngleDelta"
                , setAngleDelta_function_value
                , ( bp::arg("angleid"), bp::arg("delta") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setBondDelta
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setBondDelta_function_type)( ::SireMol::BondID const &,::SireUnits::Dimension::Length const & ) ;
            setBondDelta_function_type setBondDelta_function_value( &::SireIO::FlexibilityTemplate::setBondDelta );
            
            FlexibilityTemplate_exposer.def( 
                "setBondDelta"
                , setBondDelta_function_value
                , ( bp::arg("bondid"), bp::arg("delta") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setDihedralDelta
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setDihedralDelta_function_type)( ::SireMol::DihedralID const &,::SireUnits::Dimension::Angle const & ) ;
            setDihedralDelta_function_type setDihedralDelta_function_value( &::SireIO::FlexibilityTemplate::setDihedralDelta );
            
            FlexibilityTemplate_exposer.def( 
                "setDihedralDelta"
                , setDihedralDelta_function_value
                , ( bp::arg("dihedralid"), bp::arg("delta") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setMaximumAngleVar
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setMaximumAngleVar_function_type)( int ) ;
            setMaximumAngleVar_function_type setMaximumAngleVar_function_value( &::SireIO::FlexibilityTemplate::setMaximumAngleVar );
            
            FlexibilityTemplate_exposer.def( 
                "setMaximumAngleVar"
                , setMaximumAngleVar_function_value
                , ( bp::arg("maxvar") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setMaximumBondVar
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setMaximumBondVar_function_type)( int ) ;
            setMaximumBondVar_function_type setMaximumBondVar_function_value( &::SireIO::FlexibilityTemplate::setMaximumBondVar );
            
            FlexibilityTemplate_exposer.def( 
                "setMaximumBondVar"
                , setMaximumBondVar_function_value
                , ( bp::arg("maxvar") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setMaximumDihedralVar
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setMaximumDihedralVar_function_type)( int ) ;
            setMaximumDihedralVar_function_type setMaximumDihedralVar_function_value( &::SireIO::FlexibilityTemplate::setMaximumDihedralVar );
            
            FlexibilityTemplate_exposer.def( 
                "setMaximumDihedralVar"
                , setMaximumDihedralVar_function_value
                , ( bp::arg("maxvar") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setRotation
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setRotation_function_type)( ::SireUnits::Dimension::Angle const & ) ;
            setRotation_function_type setRotation_function_value( &::SireIO::FlexibilityTemplate::setRotation );
            
            FlexibilityTemplate_exposer.def( 
                "setRotation"
                , setRotation_function_value
                , ( bp::arg("angle") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::setTranslation
        
            typedef void ( ::SireIO::FlexibilityTemplate::*setTranslation_function_type)( ::SireUnits::Dimension::Length const & ) ;
            setTranslation_function_type setTranslation_function_value( &::SireIO::FlexibilityTemplate::setTranslation );
            
            FlexibilityTemplate_exposer.def( 
                "setTranslation"
                , setTranslation_function_value
                , ( bp::arg("distance") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::FlexibilityTemplate::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::FlexibilityTemplate::typeName );
            
            FlexibilityTemplate_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        FlexibilityTemplate_exposer.staticmethod( "typeName" );
        FlexibilityTemplate_exposer.def( "__copy__", &__copy__);
        FlexibilityTemplate_exposer.def( "__deepcopy__", &__copy__);
        FlexibilityTemplate_exposer.def( "clone", &__copy__);
        FlexibilityTemplate_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::FlexibilityTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityTemplate_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::FlexibilityTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityTemplate_exposer.def_pickle(sire_pickle_suite< ::SireIO::FlexibilityTemplate >());
        FlexibilityTemplate_exposer.def( "__str__", &pvt_get_name);
        FlexibilityTemplate_exposer.def( "__repr__", &pvt_get_name);
    }

}
