// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PerturbationsTemplate.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/findexe.h"

#include "SireBase/tempdir.h"

#include "SireCAS/expression.h"

#include "SireCAS/trigfuncs.h"

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireMM/atomljs.h"

#include "SireMM/internalff.h"

#include "SireMM/internalperturbation.h"

#include "SireMM/ljparameter.h"

#include "SireMM/ljperturbation.h"

#include "SireMol/angleid.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomeditor.h"

#include "SireMol/bondid.h"

#include "SireMol/chargeperturbation.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/geometryperturbation.h"

#include "SireMol/improperid.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/perturbation.h"

#include "SireMol/selector.hpp"

#include "SireStream/streamdata.hpp"

#include "SireUnits/convert.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "perturbationslibrary.h"

#include "tostring.h"

#include <QFile>

#include <QTextStream>

#include "perturbationslibrary.h"

SireIO::PerturbationsTemplate __copy__(const SireIO::PerturbationsTemplate &other){ return SireIO::PerturbationsTemplate(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireIO::PerturbationsTemplate&){ return "SireIO::PerturbationsTemplate";}

#include "Helpers/release_gil_policy.hpp"

void register_PerturbationsTemplate_class(){

    { //::SireIO::PerturbationsTemplate
        typedef bp::class_< SireIO::PerturbationsTemplate > PerturbationsTemplate_exposer_t;
        PerturbationsTemplate_exposer_t PerturbationsTemplate_exposer = PerturbationsTemplate_exposer_t( "PerturbationsTemplate", "Internal class used to store the data describing a single perturbations template\n\nAuthor: Julien Michel\n", bp::init< >("Constructor") );
        bp::scope PerturbationsTemplate_scope( PerturbationsTemplate_exposer );
        PerturbationsTemplate_exposer.def( bp::init< QString const & >(( bp::arg("name") ), "Copy constructor") );
        PerturbationsTemplate_exposer.def( bp::init< SireIO::PerturbationsTemplate const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::PerturbationsTemplate::getAngles
        
            typedef ::QList< SireMol::AngleID > ( ::SireIO::PerturbationsTemplate::*getAngles_function_type)(  ) const;
            getAngles_function_type getAngles_function_value( &::SireIO::PerturbationsTemplate::getAngles );
            
            PerturbationsTemplate_exposer.def( 
                "getAngles"
                , getAngles_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getBonds
        
            typedef ::QList< SireMol::BondID > ( ::SireIO::PerturbationsTemplate::*getBonds_function_type)(  ) const;
            getBonds_function_type getBonds_function_value( &::SireIO::PerturbationsTemplate::getBonds );
            
            PerturbationsTemplate_exposer.def( 
                "getBonds"
                , getBonds_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getDihedrals
        
            typedef ::QList< SireMol::DihedralID > ( ::SireIO::PerturbationsTemplate::*getDihedrals_function_type)(  ) const;
            getDihedrals_function_type getDihedrals_function_value( &::SireIO::PerturbationsTemplate::getDihedrals );
            
            PerturbationsTemplate_exposer.def( 
                "getDihedrals"
                , getDihedrals_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalAngleK
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getFinalAngleK_function_type)( ::SireMol::AngleID const & ) const;
            getFinalAngleK_function_type getFinalAngleK_function_value( &::SireIO::PerturbationsTemplate::getFinalAngleK );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalAngleK"
                , getFinalAngleK_function_value
                , ( bp::arg("angle") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalAngleT
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getFinalAngleT_function_type)( ::SireMol::AngleID const & ) const;
            getFinalAngleT_function_type getFinalAngleT_function_value( &::SireIO::PerturbationsTemplate::getFinalAngleT );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalAngleT"
                , getFinalAngleT_function_value
                , ( bp::arg("angle") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalBondK
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getFinalBondK_function_type)( ::SireMol::BondID const & ) const;
            getFinalBondK_function_type getFinalBondK_function_value( &::SireIO::PerturbationsTemplate::getFinalBondK );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalBondK"
                , getFinalBondK_function_value
                , ( bp::arg("bond") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalBondR
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getFinalBondR_function_type)( ::SireMol::BondID const & ) const;
            getFinalBondR_function_type getFinalBondR_function_value( &::SireIO::PerturbationsTemplate::getFinalBondR );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalBondR"
                , getFinalBondR_function_value
                , ( bp::arg("bond") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalCharge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireIO::PerturbationsTemplate::*getFinalCharge_function_type)( ::QString const & ) const;
            getFinalCharge_function_type getFinalCharge_function_value( &::SireIO::PerturbationsTemplate::getFinalCharge );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalCharge"
                , getFinalCharge_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalDihParams
        
            typedef ::QList< double > ( ::SireIO::PerturbationsTemplate::*getFinalDihParams_function_type)( ::SireMol::DihedralID const & ) const;
            getFinalDihParams_function_type getFinalDihParams_function_value( &::SireIO::PerturbationsTemplate::getFinalDihParams );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalDihParams"
                , getFinalDihParams_function_value
                , ( bp::arg("dihedral") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalImpParams
        
            typedef ::QList< double > ( ::SireIO::PerturbationsTemplate::*getFinalImpParams_function_type)( ::SireMol::ImproperID const & ) const;
            getFinalImpParams_function_type getFinalImpParams_function_value( &::SireIO::PerturbationsTemplate::getFinalImpParams );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalImpParams"
                , getFinalImpParams_function_value
                , ( bp::arg("improper") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalLJ
        
            typedef ::SireMM::LJParameter ( ::SireIO::PerturbationsTemplate::*getFinalLJ_function_type)( ::QString const & ) const;
            getFinalLJ_function_type getFinalLJ_function_value( &::SireIO::PerturbationsTemplate::getFinalLJ );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalLJ"
                , getFinalLJ_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getFinalType
        
            typedef ::QString ( ::SireIO::PerturbationsTemplate::*getFinalType_function_type)( ::QString const & ) const;
            getFinalType_function_type getFinalType_function_value( &::SireIO::PerturbationsTemplate::getFinalType );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalType"
                , getFinalType_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getImpropers
        
            typedef ::QList< SireMol::ImproperID > ( ::SireIO::PerturbationsTemplate::*getImpropers_function_type)(  ) const;
            getImpropers_function_type getImpropers_function_value( &::SireIO::PerturbationsTemplate::getImpropers );
            
            PerturbationsTemplate_exposer.def( 
                "getImpropers"
                , getImpropers_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitAngleK
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getInitAngleK_function_type)( ::SireMol::AngleID const & ) const;
            getInitAngleK_function_type getInitAngleK_function_value( &::SireIO::PerturbationsTemplate::getInitAngleK );
            
            PerturbationsTemplate_exposer.def( 
                "getInitAngleK"
                , getInitAngleK_function_value
                , ( bp::arg("angle") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitAngleT
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getInitAngleT_function_type)( ::SireMol::AngleID const & ) const;
            getInitAngleT_function_type getInitAngleT_function_value( &::SireIO::PerturbationsTemplate::getInitAngleT );
            
            PerturbationsTemplate_exposer.def( 
                "getInitAngleT"
                , getInitAngleT_function_value
                , ( bp::arg("angle") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitBondK
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getInitBondK_function_type)( ::SireMol::BondID const & ) const;
            getInitBondK_function_type getInitBondK_function_value( &::SireIO::PerturbationsTemplate::getInitBondK );
            
            PerturbationsTemplate_exposer.def( 
                "getInitBondK"
                , getInitBondK_function_value
                , ( bp::arg("bond") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitBondR
        
            typedef double ( ::SireIO::PerturbationsTemplate::*getInitBondR_function_type)( ::SireMol::BondID const & ) const;
            getInitBondR_function_type getInitBondR_function_value( &::SireIO::PerturbationsTemplate::getInitBondR );
            
            PerturbationsTemplate_exposer.def( 
                "getInitBondR"
                , getInitBondR_function_value
                , ( bp::arg("bond") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitCharge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireIO::PerturbationsTemplate::*getInitCharge_function_type)( ::QString const & ) const;
            getInitCharge_function_type getInitCharge_function_value( &::SireIO::PerturbationsTemplate::getInitCharge );
            
            PerturbationsTemplate_exposer.def( 
                "getInitCharge"
                , getInitCharge_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitDihParams
        
            typedef ::QList< double > ( ::SireIO::PerturbationsTemplate::*getInitDihParams_function_type)( ::SireMol::DihedralID const & ) const;
            getInitDihParams_function_type getInitDihParams_function_value( &::SireIO::PerturbationsTemplate::getInitDihParams );
            
            PerturbationsTemplate_exposer.def( 
                "getInitDihParams"
                , getInitDihParams_function_value
                , ( bp::arg("dihedral") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitImpParams
        
            typedef ::QList< double > ( ::SireIO::PerturbationsTemplate::*getInitImpParams_function_type)( ::SireMol::ImproperID const & ) const;
            getInitImpParams_function_type getInitImpParams_function_value( &::SireIO::PerturbationsTemplate::getInitImpParams );
            
            PerturbationsTemplate_exposer.def( 
                "getInitImpParams"
                , getInitImpParams_function_value
                , ( bp::arg("improper") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitLJ
        
            typedef ::SireMM::LJParameter ( ::SireIO::PerturbationsTemplate::*getInitLJ_function_type)( ::QString const & ) const;
            getInitLJ_function_type getInitLJ_function_value( &::SireIO::PerturbationsTemplate::getInitLJ );
            
            PerturbationsTemplate_exposer.def( 
                "getInitLJ"
                , getInitLJ_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitType
        
            typedef ::QString ( ::SireIO::PerturbationsTemplate::*getInitType_function_type)( ::QString const & ) const;
            getInitType_function_type getInitType_function_value( &::SireIO::PerturbationsTemplate::getInitType );
            
            PerturbationsTemplate_exposer.def( 
                "getInitType"
                , getInitType_function_value
                , ( bp::arg("atomname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::getName
        
            typedef ::QString const ( ::SireIO::PerturbationsTemplate::*getName_function_type)(  ) ;
            getName_function_type getName_function_value( &::SireIO::PerturbationsTemplate::getName );
            
            PerturbationsTemplate_exposer.def( 
                "getName"
                , getName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PerturbationsTemplate_exposer.def( bp::self != bp::self );
        { //::SireIO::PerturbationsTemplate::operator=
        
            typedef ::SireIO::PerturbationsTemplate & ( ::SireIO::PerturbationsTemplate::*assign_function_type)( ::SireIO::PerturbationsTemplate const & ) ;
            assign_function_type assign_function_value( &::SireIO::PerturbationsTemplate::operator= );
            
            PerturbationsTemplate_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        PerturbationsTemplate_exposer.def( bp::self == bp::self );
        { //::SireIO::PerturbationsTemplate::setFinalAngleK
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalAngleK_function_type)( ::SireMol::AngleID const &,double const & ) ;
            setFinalAngleK_function_type setFinalAngleK_function_value( &::SireIO::PerturbationsTemplate::setFinalAngleK );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalAngleK"
                , setFinalAngleK_function_value
                , ( bp::arg("angle"), bp::arg("k") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalAngleT
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalAngleT_function_type)( ::SireMol::AngleID const &,double const & ) ;
            setFinalAngleT_function_type setFinalAngleT_function_value( &::SireIO::PerturbationsTemplate::setFinalAngleT );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalAngleT"
                , setFinalAngleT_function_value
                , ( bp::arg("angle"), bp::arg("r") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalBondK
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalBondK_function_type)( ::SireMol::BondID const &,double const & ) ;
            setFinalBondK_function_type setFinalBondK_function_value( &::SireIO::PerturbationsTemplate::setFinalBondK );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalBondK"
                , setFinalBondK_function_value
                , ( bp::arg("bond"), bp::arg("k") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalBondR
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalBondR_function_type)( ::SireMol::BondID const &,double const & ) ;
            setFinalBondR_function_type setFinalBondR_function_value( &::SireIO::PerturbationsTemplate::setFinalBondR );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalBondR"
                , setFinalBondR_function_value
                , ( bp::arg("bond"), bp::arg("r") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalCharge
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalCharge_function_type)( ::QString const &,::SireUnits::Dimension::Charge const & ) ;
            setFinalCharge_function_type setFinalCharge_function_value( &::SireIO::PerturbationsTemplate::setFinalCharge );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalCharge"
                , setFinalCharge_function_value
                , ( bp::arg("atomname"), bp::arg("atomcharge") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalDihParams
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalDihParams_function_type)( ::SireMol::DihedralID const &,::QList< double > const & ) ;
            setFinalDihParams_function_type setFinalDihParams_function_value( &::SireIO::PerturbationsTemplate::setFinalDihParams );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalDihParams"
                , setFinalDihParams_function_value
                , ( bp::arg("dihedral"), bp::arg("params") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalImpParams
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalImpParams_function_type)( ::SireMol::ImproperID const &,::QList< double > const & ) ;
            setFinalImpParams_function_type setFinalImpParams_function_value( &::SireIO::PerturbationsTemplate::setFinalImpParams );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalImpParams"
                , setFinalImpParams_function_value
                , ( bp::arg("improper"), bp::arg("params") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalLJ
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalLJ_function_type)( ::QString const &,::SireMM::LJParameter const & ) ;
            setFinalLJ_function_type setFinalLJ_function_value( &::SireIO::PerturbationsTemplate::setFinalLJ );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalLJ"
                , setFinalLJ_function_value
                , ( bp::arg("atomname"), bp::arg("atomlj") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setFinalType
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalType_function_type)( ::QString const &,::QString const & ) ;
            setFinalType_function_type setFinalType_function_value( &::SireIO::PerturbationsTemplate::setFinalType );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalType"
                , setFinalType_function_value
                , ( bp::arg("atomname"), bp::arg("atype") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitAngleK
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitAngleK_function_type)( ::SireMol::AngleID const &,double const & ) ;
            setInitAngleK_function_type setInitAngleK_function_value( &::SireIO::PerturbationsTemplate::setInitAngleK );
            
            PerturbationsTemplate_exposer.def( 
                "setInitAngleK"
                , setInitAngleK_function_value
                , ( bp::arg("angle"), bp::arg("k") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitAngleT
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitAngleT_function_type)( ::SireMol::AngleID const &,double const & ) ;
            setInitAngleT_function_type setInitAngleT_function_value( &::SireIO::PerturbationsTemplate::setInitAngleT );
            
            PerturbationsTemplate_exposer.def( 
                "setInitAngleT"
                , setInitAngleT_function_value
                , ( bp::arg("angle"), bp::arg("r") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitBondK
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitBondK_function_type)( ::SireMol::BondID const &,double const & ) ;
            setInitBondK_function_type setInitBondK_function_value( &::SireIO::PerturbationsTemplate::setInitBondK );
            
            PerturbationsTemplate_exposer.def( 
                "setInitBondK"
                , setInitBondK_function_value
                , ( bp::arg("bond"), bp::arg("k") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitBondR
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitBondR_function_type)( ::SireMol::BondID const &,double const & ) ;
            setInitBondR_function_type setInitBondR_function_value( &::SireIO::PerturbationsTemplate::setInitBondR );
            
            PerturbationsTemplate_exposer.def( 
                "setInitBondR"
                , setInitBondR_function_value
                , ( bp::arg("bond"), bp::arg("r") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitCharge
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitCharge_function_type)( ::QString const &,::SireUnits::Dimension::Charge const & ) ;
            setInitCharge_function_type setInitCharge_function_value( &::SireIO::PerturbationsTemplate::setInitCharge );
            
            PerturbationsTemplate_exposer.def( 
                "setInitCharge"
                , setInitCharge_function_value
                , ( bp::arg("atomname"), bp::arg("atomcharge") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitDihParams
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitDihParams_function_type)( ::SireMol::DihedralID const &,::QList< double > const & ) ;
            setInitDihParams_function_type setInitDihParams_function_value( &::SireIO::PerturbationsTemplate::setInitDihParams );
            
            PerturbationsTemplate_exposer.def( 
                "setInitDihParams"
                , setInitDihParams_function_value
                , ( bp::arg("dihedral"), bp::arg("params") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitImpParams
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitImpParams_function_type)( ::SireMol::ImproperID const &,::QList< double > const & ) ;
            setInitImpParams_function_type setInitImpParams_function_value( &::SireIO::PerturbationsTemplate::setInitImpParams );
            
            PerturbationsTemplate_exposer.def( 
                "setInitImpParams"
                , setInitImpParams_function_value
                , ( bp::arg("improper"), bp::arg("params") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitLJ
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitLJ_function_type)( ::QString const &,::SireMM::LJParameter const & ) ;
            setInitLJ_function_type setInitLJ_function_value( &::SireIO::PerturbationsTemplate::setInitLJ );
            
            PerturbationsTemplate_exposer.def( 
                "setInitLJ"
                , setInitLJ_function_value
                , ( bp::arg("atomname"), bp::arg("atomlj") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitType
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitType_function_type)( ::QString const &,::QString const & ) ;
            setInitType_function_type setInitType_function_value( &::SireIO::PerturbationsTemplate::setInitType );
            
            PerturbationsTemplate_exposer.def( 
                "setInitType"
                , setInitType_function_value
                , ( bp::arg("atomname"), bp::arg("atype") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::PerturbationsTemplate::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::PerturbationsTemplate::typeName );
            
            PerturbationsTemplate_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PerturbationsTemplate_exposer.staticmethod( "typeName" );
        PerturbationsTemplate_exposer.def( "__copy__", &__copy__);
        PerturbationsTemplate_exposer.def( "__deepcopy__", &__copy__);
        PerturbationsTemplate_exposer.def( "clone", &__copy__);
        PerturbationsTemplate_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::PerturbationsTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationsTemplate_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::PerturbationsTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationsTemplate_exposer.def_pickle(sire_pickle_suite< ::SireIO::PerturbationsTemplate >());
        PerturbationsTemplate_exposer.def( "__str__", &pvt_get_name);
        PerturbationsTemplate_exposer.def( "__repr__", &pvt_get_name);
    }

}
