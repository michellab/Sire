// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FlexibilityLibrary.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireMol/angleid.h"

#include "SireMol/atom.h"

#include "SireMol/atomeditor.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/selector.hpp"

#include "SireMove/flexibility.h"

#include "SireMove/internalmove.h"

#include "SireUnits/convert.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "flexibilitylibrary.h"

#include <QFile>

#include <QTextStream>

#include "flexibilitylibrary.h"

SireIO::FlexibilityLibrary __copy__(const SireIO::FlexibilityLibrary &other){ return SireIO::FlexibilityLibrary(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_FlexibilityLibrary_class(){

    { //::SireIO::FlexibilityLibrary
        typedef bp::class_< SireIO::FlexibilityLibrary, bp::bases< SireBase::Property > > FlexibilityLibrary_exposer_t;
        FlexibilityLibrary_exposer_t FlexibilityLibrary_exposer = FlexibilityLibrary_exposer_t( "FlexibilityLibrary", "", bp::init< >("Default constructor") );
        bp::scope FlexibilityLibrary_scope( FlexibilityLibrary_exposer );
        FlexibilityLibrary_exposer.def( bp::init< QString const & >(( bp::arg("file") ), "Construct, loading the library from the passed file") );
        FlexibilityLibrary_exposer.def( bp::init< SireIO::FlexibilityLibrary const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::FlexibilityLibrary::add
        
            typedef void ( ::SireIO::FlexibilityLibrary::*add_function_type)( ::SireIO::FlexibilityLibrary const & ) ;
            add_function_type add_function_value( &::SireIO::FlexibilityLibrary::add );
            
            FlexibilityLibrary_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Add the templates in other into this library" );
        
        }
        { //::SireIO::FlexibilityLibrary::getFlexibility
        
            typedef ::SireMove::Flexibility ( ::SireIO::FlexibilityLibrary::*getFlexibility_function_type)( ::SireMol::MoleculeView const & ) const;
            getFlexibility_function_type getFlexibility_function_value( &::SireIO::FlexibilityLibrary::getFlexibility );
            
            FlexibilityLibrary_exposer.def( 
                "getFlexibility"
                , getFlexibility_function_value
                , ( bp::arg("molecule") )
                , bp::release_gil_policy()
                , "Generate the Flexibility property for the atoms in the passed molecule view" );
        
        }
        { //::SireIO::FlexibilityLibrary::getTemplate
        
            typedef ::SireIO::FlexibilityTemplate const & ( ::SireIO::FlexibilityLibrary::*getTemplate_function_type)( ::QString const & ) ;
            getTemplate_function_type getTemplate_function_value( &::SireIO::FlexibilityLibrary::getTemplate );
            
            FlexibilityLibrary_exposer.def( 
                "getTemplate"
                , getTemplate_function_value
                , ( bp::arg("key") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the template for the specified key\nThrow: SireError::invalid_key\n" );
        
        }
        { //::SireIO::FlexibilityLibrary::loadTemplates
        
            typedef void ( ::SireIO::FlexibilityLibrary::*loadTemplates_function_type)( ::QString const & ) ;
            loadTemplates_function_type loadTemplates_function_value( &::SireIO::FlexibilityLibrary::loadTemplates );
            
            FlexibilityLibrary_exposer.def( 
                "loadTemplates"
                , loadTemplates_function_value
                , ( bp::arg("file") )
                , bp::release_gil_policy()
                , "" );
        
        }
        FlexibilityLibrary_exposer.def( bp::self != bp::self );
        FlexibilityLibrary_exposer.def( bp::self + bp::self );
        { //::SireIO::FlexibilityLibrary::operator=
        
            typedef ::SireIO::FlexibilityLibrary & ( ::SireIO::FlexibilityLibrary::*assign_function_type)( ::SireIO::FlexibilityLibrary const & ) ;
            assign_function_type assign_function_value( &::SireIO::FlexibilityLibrary::operator= );
            
            FlexibilityLibrary_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        FlexibilityLibrary_exposer.def( bp::self == bp::self );
        { //::SireIO::FlexibilityLibrary::setTemplate
        
            typedef void ( ::SireIO::FlexibilityLibrary::*setTemplate_function_type)( ::QString const &,::SireIO::FlexibilityTemplate const & ) ;
            setTemplate_function_type setTemplate_function_value( &::SireIO::FlexibilityLibrary::setTemplate );
            
            FlexibilityLibrary_exposer.def( 
                "setTemplate"
                , setTemplate_function_value
                , ( bp::arg("key"), bp::arg("tmplate") )
                , bp::release_gil_policy()
                , "Set the template associated with the passed key" );
        
        }
        { //::SireIO::FlexibilityLibrary::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::FlexibilityLibrary::typeName );
            
            FlexibilityLibrary_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        FlexibilityLibrary_exposer.staticmethod( "typeName" );
        FlexibilityLibrary_exposer.def( "__copy__", &__copy__);
        FlexibilityLibrary_exposer.def( "__deepcopy__", &__copy__);
        FlexibilityLibrary_exposer.def( "clone", &__copy__);
        FlexibilityLibrary_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::FlexibilityLibrary >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityLibrary_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::FlexibilityLibrary >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityLibrary_exposer.def_pickle(sire_pickle_suite< ::SireIO::FlexibilityLibrary >());
        FlexibilityLibrary_exposer.def( "__str__", &__str__< ::SireIO::FlexibilityLibrary > );
        FlexibilityLibrary_exposer.def( "__repr__", &__str__< ::SireIO::FlexibilityLibrary > );
    }

}
