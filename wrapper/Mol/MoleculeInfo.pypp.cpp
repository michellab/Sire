// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MoleculeInfo.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "moleculeinfo.h"

#include "moleculeview.h"

#include "moleculeinfo.h"

#include "moleculeinfodata.h"

#include "atomselection.h"

SireMol::MoleculeInfo __copy__(const SireMol::MoleculeInfo &other){ return SireMol::MoleculeInfo(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_MoleculeInfo_class(){

    { //::SireMol::MoleculeInfo
        typedef bp::class_< SireMol::MoleculeInfo, bp::bases< SireBase::Property > > MoleculeInfo_exposer_t;
        MoleculeInfo_exposer_t MoleculeInfo_exposer = MoleculeInfo_exposer_t( "MoleculeInfo", "This is the class that is used to provide information\nabout the arrangement of atoms in a molecule, specifically\nhow one method of indexing the atoms can be mapped to another method.\nIn so doing, a MoleculeInfo object contains all of the information\nabout which atoms are in a molecule, what they are called, how they\nare arranged into residues, chains and segments, and how all\nof the different parts of the molecule are identified. However,\nimportantly, this object does not contain any information about\nhow the atoms in the molecule are connected together, where\nthe atoms are in space, or any additional properties that are\nassociated with the molecule (or indeed the name or number of the molecule)\n\nEach layout is given a unique ID (UID) number, which is unique within a\nsingle invocation of Sire, and uniquely identifies a MoleculeInfo\nlayout within the program (thus allowing for a quick and simple\ntest to ensure that molecules have the same layout of data).\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope MoleculeInfo_scope( MoleculeInfo_exposer );
        MoleculeInfo_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") ), "Construct to get the MoleculeInfo for the passed molecule") );
        MoleculeInfo_exposer.def( bp::init< SireBase::SharedDataPointer< SireMol::MoleculeInfoData > const & >(( bp::arg("ptr") ), "Construct from the passed shared pointer") );
        MoleculeInfo_exposer.def( bp::init< SireMol::MoleculeInfo const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::MoleculeInfo::UID
        
            typedef ::QUuid const & ( ::SireMol::MoleculeInfo::*UID_function_type)(  ) const;
            UID_function_type UID_function_value( &::SireMol::MoleculeInfo::UID );
            
            MoleculeInfo_exposer.def( 
                "UID"
                , UID_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the unique ID of this layout. Each unique layout has its\nown unique ID. You can use this to quickly check if two molecules\nhave the same layout" );
        
        }
        { //::SireMol::MoleculeInfo::assertCompatibleWith
        
            typedef void ( ::SireMol::MoleculeInfo::*assertCompatibleWith_function_type)( ::SireMol::AtomSelection const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::MoleculeInfo::assertCompatibleWith );
            
            MoleculeInfo_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("selected_atoms") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo is compatible with the passed atom selection" );
        
        }
        { //::SireMol::MoleculeInfo::assertCompatibleWith
        
            typedef void ( ::SireMol::MoleculeInfo::*assertCompatibleWith_function_type)( ::SireMol::MoleculeView const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::MoleculeInfo::assertCompatibleWith );
            
            MoleculeInfo_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("molecule") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo is compatible with the passed molecule" );
        
        }
        { //::SireMol::MoleculeInfo::assertContains
        
            typedef void ( ::SireMol::MoleculeInfo::*assertContains_function_type)( ::SireMol::AtomIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeInfo::assertContains );
            
            MoleculeInfo_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo contains an atom at the passed index" );
        
        }
        { //::SireMol::MoleculeInfo::assertContains
        
            typedef void ( ::SireMol::MoleculeInfo::*assertContains_function_type)( ::SireMol::CGIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeInfo::assertContains );
            
            MoleculeInfo_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("cgidx") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo contains an atom at the passed index" );
        
        }
        { //::SireMol::MoleculeInfo::assertContains
        
            typedef void ( ::SireMol::MoleculeInfo::*assertContains_function_type)( ::SireMol::ResIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeInfo::assertContains );
            
            MoleculeInfo_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo contains an atom at the passed index" );
        
        }
        { //::SireMol::MoleculeInfo::assertContains
        
            typedef void ( ::SireMol::MoleculeInfo::*assertContains_function_type)( ::SireMol::ChainIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeInfo::assertContains );
            
            MoleculeInfo_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("chainidx") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo contains an atom at the passed index" );
        
        }
        { //::SireMol::MoleculeInfo::assertContains
        
            typedef void ( ::SireMol::MoleculeInfo::*assertContains_function_type)( ::SireMol::SegIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeInfo::assertContains );
            
            MoleculeInfo_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("segidx") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo contains an atom at the passed index" );
        
        }
        { //::SireMol::MoleculeInfo::assertEqualTo
        
            typedef void ( ::SireMol::MoleculeInfo::*assertEqualTo_function_type)( ::SireMol::MoleculeInfo const & ) const;
            assertEqualTo_function_type assertEqualTo_function_value( &::SireMol::MoleculeInfo::assertEqualTo );
            
            MoleculeInfo_exposer.def( 
                "assertEqualTo"
                , assertEqualTo_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo is equal to other" );
        
        }
        { //::SireMol::MoleculeInfo::assertEqualTo
        
            typedef void ( ::SireMol::MoleculeInfo::*assertEqualTo_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            assertEqualTo_function_type assertEqualTo_function_value( &::SireMol::MoleculeInfo::assertEqualTo );
            
            MoleculeInfo_exposer.def( 
                "assertEqualTo"
                , assertEqualTo_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Assert that this MoleculeInfo is equal to other" );
        
        }
        { //::SireMol::MoleculeInfo::atomIdx
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*atomIdx_function_type)( ::SireMol::AtomID const & ) const;
            atomIdx_function_type atomIdx_function_value( &::SireMol::MoleculeInfo::atomIdx );
            
            MoleculeInfo_exposer.def( 
                "atomIdx"
                , atomIdx_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the index of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::atomIdx
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*atomIdx_function_type)( ::SireMol::CGAtomIdx const & ) const;
            atomIdx_function_type atomIdx_function_value( &::SireMol::MoleculeInfo::atomIdx );
            
            MoleculeInfo_exposer.def( 
                "atomIdx"
                , atomIdx_function_value
                , ( bp::arg("cgatomidx") )
                , bp::release_gil_policy()
                , "Return the index of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdx
        
            typedef ::SireMol::CGAtomIdx const & ( ::SireMol::MoleculeInfo::*cgAtomIdx_function_type)( ::SireMol::AtomIdx ) const;
            cgAtomIdx_function_type cgAtomIdx_function_value( &::SireMol::MoleculeInfo::cgAtomIdx );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdx"
                , cgAtomIdx_function_value
                , ( bp::arg("atomidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the combined CutGroup  AtomIndex of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdx
        
            typedef ::SireMol::CGAtomIdx const & ( ::SireMol::MoleculeInfo::*cgAtomIdx_function_type)( ::SireMol::AtomID const & ) const;
            cgAtomIdx_function_type cgAtomIdx_function_value( &::SireMol::MoleculeInfo::cgAtomIdx );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdx"
                , cgAtomIdx_function_value
                , ( bp::arg("atomid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the combined CutGroup  AtomIndex of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::AtomIdx ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of all of the identified atoms" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::CGIdx ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("cgidx") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified CutGroups" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::ResIdx ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified residues" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::ChainIdx ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("chainidx") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified chains" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::SegIdx ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("segidx") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified segments" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::AtomID const & ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of all of the identified atoms" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::CGID const & ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified CutGroups" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::ResID const & ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified residues" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::ChainID const & ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified chains" );
        
        }
        { //::SireMol::MoleculeInfo::cgAtomIdxs
        
            typedef ::QVector< SireMol::CGAtomIdx > ( ::SireMol::MoleculeInfo::*cgAtomIdxs_function_type)( ::SireMol::SegID const & ) const;
            cgAtomIdxs_function_type cgAtomIdxs_function_value( &::SireMol::MoleculeInfo::cgAtomIdxs );
            
            MoleculeInfo_exposer.def( 
                "cgAtomIdxs"
                , cgAtomIdxs_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the CGAtomIdxs of the atoms in all of the identified segments" );
        
        }
        { //::SireMol::MoleculeInfo::cgIdx
        
            typedef ::SireMol::CGIdx ( ::SireMol::MoleculeInfo::*cgIdx_function_type)( ::SireMol::CGID const & ) const;
            cgIdx_function_type cgIdx_function_value( &::SireMol::MoleculeInfo::cgIdx );
            
            MoleculeInfo_exposer.def( 
                "cgIdx"
                , cgIdx_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the index of the identified CutGroup" );
        
        }
        { //::SireMol::MoleculeInfo::cgIdx
        
            typedef ::SireMol::CGIdx ( ::SireMol::MoleculeInfo::*cgIdx_function_type)( ::SireMol::ResIdx const & ) const;
            cgIdx_function_type cgIdx_function_value( &::SireMol::MoleculeInfo::cgIdx );
            
            MoleculeInfo_exposer.def( 
                "cgIdx"
                , cgIdx_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return the index of the CutGroup that contains the atoms for residue\nwith ID id, if this molecule uses residue cutting. If not, an\nexception is thrown" );
        
        }
        { //::SireMol::MoleculeInfo::cgIdx
        
            typedef ::SireMol::CGIdx ( ::SireMol::MoleculeInfo::*cgIdx_function_type)( ::SireMol::ResID const & ) const;
            cgIdx_function_type cgIdx_function_value( &::SireMol::MoleculeInfo::cgIdx );
            
            MoleculeInfo_exposer.def( 
                "cgIdx"
                , cgIdx_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the index of the CutGroup that contains the atoms for residue\nwith ID id, if this molecule uses residue cutting. If not, an\nexception is thrown" );
        
        }
        { //::SireMol::MoleculeInfo::chainIdx
        
            typedef ::SireMol::ChainIdx ( ::SireMol::MoleculeInfo::*chainIdx_function_type)( ::SireMol::ChainID const & ) const;
            chainIdx_function_type chainIdx_function_value( &::SireMol::MoleculeInfo::chainIdx );
            
            MoleculeInfo_exposer.def( 
                "chainIdx"
                , chainIdx_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the index of the identified chain" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ResIdx,::SireMol::AtomIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("residx"), bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the specified residue contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ChainIdx,::SireMol::AtomIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainidx"), bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::SegIdx,::SireMol::AtomIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("segidx"), bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the specified segment contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::CGIdx,::SireMol::AtomIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("cgidx"), bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the specified CutGroup contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ChainIdx,::SireMol::ResIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainidx"), bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified residue" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ResIdx,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("residx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified residue contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ChainIdx,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::SegIdx,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("segidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified segment contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::CGIdx,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("cgidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified CutGroup contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::contains
        
            typedef bool ( ::SireMol::MoleculeInfo::*contains_function_type)( ::SireMol::ChainIdx,::SireMol::ResID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeInfo::contains );
            
            MoleculeInfo_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainidx"), bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified residue" );
        
        }
        { //::SireMol::MoleculeInfo::data
        
            typedef ::SireMol::MoleculeInfoData const & ( ::SireMol::MoleculeInfo::*data_function_type)(  ) const;
            data_function_type data_function_value( &::SireMol::MoleculeInfo::data );
            
            MoleculeInfo_exposer.def( 
                "data"
                , data_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::getAtom
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*getAtom_function_type)( ::SireMol::CGIdx,int ) const;
            getAtom_function_type getAtom_function_value( &::SireMol::MoleculeInfo::getAtom );
            
            MoleculeInfo_exposer.def( 
                "getAtom"
                , getAtom_function_value
                , ( bp::arg("cgidx"), bp::arg("i") )
                , bp::release_gil_policy()
                , "Return the index of the ith atom in the specified CutGroup" );
        
        }
        { //::SireMol::MoleculeInfo::getAtom
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*getAtom_function_type)( ::SireMol::ResIdx,int ) const;
            getAtom_function_type getAtom_function_value( &::SireMol::MoleculeInfo::getAtom );
            
            MoleculeInfo_exposer.def( 
                "getAtom"
                , getAtom_function_value
                , ( bp::arg("residx"), bp::arg("i") )
                , bp::release_gil_policy()
                , "Return the index of the ith atom in the specified residue" );
        
        }
        { //::SireMol::MoleculeInfo::getAtom
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*getAtom_function_type)( ::SireMol::ChainIdx,int ) const;
            getAtom_function_type getAtom_function_value( &::SireMol::MoleculeInfo::getAtom );
            
            MoleculeInfo_exposer.def( 
                "getAtom"
                , getAtom_function_value
                , ( bp::arg("chainidx"), bp::arg("i") )
                , bp::release_gil_policy()
                , "Return the index of the ith atom in the specified chain" );
        
        }
        { //::SireMol::MoleculeInfo::getAtom
        
            typedef ::SireMol::AtomIdx ( ::SireMol::MoleculeInfo::*getAtom_function_type)( ::SireMol::SegIdx,int ) const;
            getAtom_function_type getAtom_function_value( &::SireMol::MoleculeInfo::getAtom );
            
            MoleculeInfo_exposer.def( 
                "getAtom"
                , getAtom_function_value
                , ( bp::arg("segidx"), bp::arg("i") )
                , bp::release_gil_policy()
                , "Return the index of the ith atom in the specified segment" );
        
        }
        { //::SireMol::MoleculeInfo::getAtoms
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtoms_function_type)(  ) const;
            getAtoms_function_type getAtoms_function_value( &::SireMol::MoleculeInfo::getAtoms );
            
            MoleculeInfo_exposer.def( 
                "getAtoms"
                , getAtoms_function_value
                , bp::release_gil_policy()
                , "Return the indicies of atoms" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > const & ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ResIdx ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("residx") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the indicies of all atoms in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ResID const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ResIdx,::SireMol::AtomName const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("residx"), bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms called name in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ResID const &,::SireMol::AtomName const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("resid"), bp::arg("atomname") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms called name in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ChainIdx ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("chainidx") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms in the specified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ChainID const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms in the specified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ChainIdx,::SireMol::AtomName const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("chainidx"), bp::arg("atomname") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms called name in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::ChainID const &,::SireMol::AtomName const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("chainid"), bp::arg("atomname") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms called name in the specified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > const & ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::CGIdx ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("cgidx") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the indicies of all atoms in the specified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::CGID const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms in the specified CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > const & ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::SegIdx ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("segidx") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the indicies of all atoms in the specified segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getAtomsIn
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*getAtomsIn_function_type)( ::SireMol::SegID const & ) const;
            getAtomsIn_function_type getAtomsIn_function_value( &::SireMol::MoleculeInfo::getAtomsIn );
            
            MoleculeInfo_exposer.def( 
                "getAtomsIn"
                , getAtomsIn_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the indicies of all atoms in the specified segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getChains
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*getChains_function_type)(  ) const;
            getChains_function_type getChains_function_value( &::SireMol::MoleculeInfo::getChains );
            
            MoleculeInfo_exposer.def( 
                "getChains"
                , getChains_function_value
                , bp::release_gil_policy()
                , "Return a list of the indicies of all chains" );
        
        }
        { //::SireMol::MoleculeInfo::getCutGroups
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*getCutGroups_function_type)(  ) const;
            getCutGroups_function_type getCutGroups_function_value( &::SireMol::MoleculeInfo::getCutGroups );
            
            MoleculeInfo_exposer.def( 
                "getCutGroups"
                , getCutGroups_function_value
                , bp::release_gil_policy()
                , "Return a list of the indicies of all CutGroups" );
        
        }
        { //::SireMol::MoleculeInfo::getResidue
        
            typedef ::SireMol::ResIdx ( ::SireMol::MoleculeInfo::*getResidue_function_type)( ::SireMol::ChainIdx,int ) const;
            getResidue_function_type getResidue_function_value( &::SireMol::MoleculeInfo::getResidue );
            
            MoleculeInfo_exposer.def( 
                "getResidue"
                , getResidue_function_value
                , ( bp::arg("chainidx"), bp::arg("i") )
                , bp::release_gil_policy()
                , "Return the index of the ith residue in the specified chain" );
        
        }
        { //::SireMol::MoleculeInfo::getResidues
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*getResidues_function_type)(  ) const;
            getResidues_function_type getResidues_function_value( &::SireMol::MoleculeInfo::getResidues );
            
            MoleculeInfo_exposer.def( 
                "getResidues"
                , getResidues_function_value
                , bp::release_gil_policy()
                , "Return a list of the indicies of all residues" );
        
        }
        { //::SireMol::MoleculeInfo::getResiduesIn
        
            typedef ::QList< SireMol::ResIdx > const & ( ::SireMol::MoleculeInfo::*getResiduesIn_function_type)( ::SireMol::ChainIdx ) const;
            getResiduesIn_function_type getResiduesIn_function_value( &::SireMol::MoleculeInfo::getResiduesIn );
            
            MoleculeInfo_exposer.def( 
                "getResiduesIn"
                , getResiduesIn_function_value
                , ( bp::arg("chainidx") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the indicies of residues in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getResiduesIn
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*getResiduesIn_function_type)( ::SireMol::ChainID const & ) const;
            getResiduesIn_function_type getResiduesIn_function_value( &::SireMol::MoleculeInfo::getResiduesIn );
            
            MoleculeInfo_exposer.def( 
                "getResiduesIn"
                , getResiduesIn_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the indicies of residues in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::getSegments
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*getSegments_function_type)(  ) const;
            getSegments_function_type getSegments_function_value( &::SireMol::MoleculeInfo::getSegments );
            
            MoleculeInfo_exposer.def( 
                "getSegments"
                , getSegments_function_value
                , bp::release_gil_policy()
                , "Return a list of the indicies of all segments" );
        
        }
        { //::SireMol::MoleculeInfo::intersects
        
            typedef bool ( ::SireMol::MoleculeInfo::*intersects_function_type)( ::SireMol::ResIdx,::SireMol::AtomID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeInfo::intersects );
            
            MoleculeInfo_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("residx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified residue contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::intersects
        
            typedef bool ( ::SireMol::MoleculeInfo::*intersects_function_type)( ::SireMol::ChainIdx,::SireMol::AtomID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeInfo::intersects );
            
            MoleculeInfo_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("chainidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::intersects
        
            typedef bool ( ::SireMol::MoleculeInfo::*intersects_function_type)( ::SireMol::SegIdx,::SireMol::AtomID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeInfo::intersects );
            
            MoleculeInfo_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("segidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified segment contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::intersects
        
            typedef bool ( ::SireMol::MoleculeInfo::*intersects_function_type)( ::SireMol::CGIdx,::SireMol::AtomID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeInfo::intersects );
            
            MoleculeInfo_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("cgidx"), bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified CutGroup contains the specified atom" );
        
        }
        { //::SireMol::MoleculeInfo::intersects
        
            typedef bool ( ::SireMol::MoleculeInfo::*intersects_function_type)( ::SireMol::ChainIdx,::SireMol::ResID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeInfo::intersects );
            
            MoleculeInfo_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("chainidx"), bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return whether or not the specified chain contains the specified residue" );
        
        }
        { //::SireMol::MoleculeInfo::isAtomCutting
        
            typedef bool ( ::SireMol::MoleculeInfo::*isAtomCutting_function_type)(  ) const;
            isAtomCutting_function_type isAtomCutting_function_value( &::SireMol::MoleculeInfo::isAtomCutting );
            
            MoleculeInfo_exposer.def( 
                "isAtomCutting"
                , isAtomCutting_function_value
                , bp::release_gil_policy()
                , "Return whether or not atom-based cutting is used for the entire\nmolecule (meaning that there is exactly one cutgroup per atom). This\nis highly unusual, except for single-atom molecules" );
        
        }
        { //::SireMol::MoleculeInfo::isEmpty
        
            typedef bool ( ::SireMol::MoleculeInfo::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::MoleculeInfo::isEmpty );
            
            MoleculeInfo_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is empty (contains no atoms)" );
        
        }
        { //::SireMol::MoleculeInfo::isMoleculeCutting
        
            typedef bool ( ::SireMol::MoleculeInfo::*isMoleculeCutting_function_type)(  ) const;
            isMoleculeCutting_function_type isMoleculeCutting_function_value( &::SireMol::MoleculeInfo::isMoleculeCutting );
            
            MoleculeInfo_exposer.def( 
                "isMoleculeCutting"
                , isMoleculeCutting_function_value
                , bp::release_gil_policy()
                , "Return whether or not molecule-based cutting is used for the entire\nmolecule (meaning that there is exactly one cutgroup for the whole molecule). This\nis unusual, except for single-residue molecules" );
        
        }
        { //::SireMol::MoleculeInfo::isResidueCutting
        
            typedef bool ( ::SireMol::MoleculeInfo::*isResidueCutting_function_type)(  ) const;
            isResidueCutting_function_type isResidueCutting_function_value( &::SireMol::MoleculeInfo::isResidueCutting );
            
            MoleculeInfo_exposer.def( 
                "isResidueCutting"
                , isResidueCutting_function_value
                , bp::release_gil_policy()
                , "Return whether or not residue-based cutting is used for the entire\nmolecule (meaning that there is exactly one cutgroup per residue, and\natoms in a cutgroup are in the same order as atoms in the residue). This\nis the default. Note that a single atom molecule is simultaneously\natom cutting, residue cutting and molecule cutting." );
        
        }
        { //::SireMol::MoleculeInfo::isResidueCutting
        
            typedef bool ( ::SireMol::MoleculeInfo::*isResidueCutting_function_type)( ::SireMol::ResIdx const & ) const;
            isResidueCutting_function_type isResidueCutting_function_value( &::SireMol::MoleculeInfo::isResidueCutting );
            
            MoleculeInfo_exposer.def( 
                "isResidueCutting"
                , isResidueCutting_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return whether or not residue-based cutting is used for the specifed\nresidue" );
        
        }
        { //::SireMol::MoleculeInfo::isResidueCutting
        
            typedef bool ( ::SireMol::MoleculeInfo::*isResidueCutting_function_type)( ::SireMol::ResID const & ) const;
            isResidueCutting_function_type isResidueCutting_function_value( &::SireMol::MoleculeInfo::isResidueCutting );
            
            MoleculeInfo_exposer.def( 
                "isResidueCutting"
                , isResidueCutting_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return whether or not residue-based cutting is used for the specifed\nresidue" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinChain
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinChain_function_type)( ::SireMol::AtomIdx ) const;
            isWithinChain_function_type isWithinChain_function_value( &::SireMol::MoleculeInfo::isWithinChain );
            
            MoleculeInfo_exposer.def( 
                "isWithinChain"
                , isWithinChain_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a chain" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinChain
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinChain_function_type)( ::SireMol::AtomID const & ) const;
            isWithinChain_function_type isWithinChain_function_value( &::SireMol::MoleculeInfo::isWithinChain );
            
            MoleculeInfo_exposer.def( 
                "isWithinChain"
                , isWithinChain_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a chain" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinChain
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinChain_function_type)( ::SireMol::ResIdx ) const;
            isWithinChain_function_type isWithinChain_function_value( &::SireMol::MoleculeInfo::isWithinChain );
            
            MoleculeInfo_exposer.def( 
                "isWithinChain"
                , isWithinChain_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return whether or not the identified residue is held in a chain" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinChain
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinChain_function_type)( ::SireMol::ResID const & ) const;
            isWithinChain_function_type isWithinChain_function_value( &::SireMol::MoleculeInfo::isWithinChain );
            
            MoleculeInfo_exposer.def( 
                "isWithinChain"
                , isWithinChain_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return whether or not the identified residue is held in a chain" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinResidue
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinResidue_function_type)( ::SireMol::AtomIdx ) const;
            isWithinResidue_function_type isWithinResidue_function_value( &::SireMol::MoleculeInfo::isWithinResidue );
            
            MoleculeInfo_exposer.def( 
                "isWithinResidue"
                , isWithinResidue_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a residue" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinResidue
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinResidue_function_type)( ::SireMol::AtomID const & ) const;
            isWithinResidue_function_type isWithinResidue_function_value( &::SireMol::MoleculeInfo::isWithinResidue );
            
            MoleculeInfo_exposer.def( 
                "isWithinResidue"
                , isWithinResidue_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a residue" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinSegment
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinSegment_function_type)( ::SireMol::AtomIdx ) const;
            isWithinSegment_function_type isWithinSegment_function_value( &::SireMol::MoleculeInfo::isWithinSegment );
            
            MoleculeInfo_exposer.def( 
                "isWithinSegment"
                , isWithinSegment_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a segment" );
        
        }
        { //::SireMol::MoleculeInfo::isWithinSegment
        
            typedef bool ( ::SireMol::MoleculeInfo::*isWithinSegment_function_type)( ::SireMol::AtomID const & ) const;
            isWithinSegment_function_type isWithinSegment_function_value( &::SireMol::MoleculeInfo::isWithinSegment );
            
            MoleculeInfo_exposer.def( 
                "isWithinSegment"
                , isWithinSegment_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return whether or not the identified atom is held in a segment" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ResName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ResNum ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("num") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ResIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ResID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ChainName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ChainIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::ChainID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::SegName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::SegIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::SegID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::CGName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::CGIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::CGID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::AtomName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching atom(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::AtomNum ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("num") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching atom(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::AtomIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching atom(s)" );
        
        }
        { //::SireMol::MoleculeInfo::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*map_function_type)( ::SireMol::AtomID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeInfo::map );
            
            MoleculeInfo_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the indicies of the matching atom(s)" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::AtomName const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::AtomNum const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("num") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::AtomIdx const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::AtomID const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ResName const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ResNum const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("num") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ResIdx const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ResID const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ChainName const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ChainIdx const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::ChainID const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::SegName const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::SegIdx const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::SegID const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::CGName const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::CGIdx const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("idx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::mapNoThrow
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::MoleculeInfo::*mapNoThrow_function_type)( ::SireMol::CGID const & ) const;
            mapNoThrow_function_type mapNoThrow_function_value( &::SireMol::MoleculeInfo::mapNoThrow );
            
            MoleculeInfo_exposer.def( 
                "mapNoThrow"
                , mapNoThrow_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , bp::release_gil_policy()
                , "Return the number of atoms in the molecule" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::ChainID const & ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::ChainIdx ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("chainidx") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::ResID const & ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::ResIdx ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified residue(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::SegID const & ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::SegIdx ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("segidx") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified segment(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::CGID const & ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nAtoms
        
            typedef int ( ::SireMol::MoleculeInfo::*nAtoms_function_type)( ::SireMol::CGIdx ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MoleculeInfo::nAtoms );
            
            MoleculeInfo_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , ( bp::arg("cgidx") )
                , bp::release_gil_policy()
                , "Return the number of atoms in the identified CutGroup(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nChains
        
            typedef int ( ::SireMol::MoleculeInfo::*nChains_function_type)(  ) const;
            nChains_function_type nChains_function_value( &::SireMol::MoleculeInfo::nChains );
            
            MoleculeInfo_exposer.def( 
                "nChains"
                , nChains_function_value
                , bp::release_gil_policy()
                , "Return the number of chains in the molecule" );
        
        }
        { //::SireMol::MoleculeInfo::nCutGroups
        
            typedef int ( ::SireMol::MoleculeInfo::*nCutGroups_function_type)(  ) const;
            nCutGroups_function_type nCutGroups_function_value( &::SireMol::MoleculeInfo::nCutGroups );
            
            MoleculeInfo_exposer.def( 
                "nCutGroups"
                , nCutGroups_function_value
                , bp::release_gil_policy()
                , "Return the number of CutGroups in the molecule" );
        
        }
        { //::SireMol::MoleculeInfo::nResidues
        
            typedef int ( ::SireMol::MoleculeInfo::*nResidues_function_type)(  ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::MoleculeInfo::nResidues );
            
            MoleculeInfo_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , bp::release_gil_policy()
                , "Return the number of residues in the molecule" );
        
        }
        { //::SireMol::MoleculeInfo::nResidues
        
            typedef int ( ::SireMol::MoleculeInfo::*nResidues_function_type)( ::SireMol::ChainID const & ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::MoleculeInfo::nResidues );
            
            MoleculeInfo_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the number of residues in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nResidues
        
            typedef int ( ::SireMol::MoleculeInfo::*nResidues_function_type)( ::SireMol::ChainIdx ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::MoleculeInfo::nResidues );
            
            MoleculeInfo_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , ( bp::arg("chainidx") )
                , bp::release_gil_policy()
                , "Return the number of residues in the identified chain(s)" );
        
        }
        { //::SireMol::MoleculeInfo::nSegments
        
            typedef int ( ::SireMol::MoleculeInfo::*nSegments_function_type)(  ) const;
            nSegments_function_type nSegments_function_value( &::SireMol::MoleculeInfo::nSegments );
            
            MoleculeInfo_exposer.def( 
                "nSegments"
                , nSegments_function_value
                , bp::release_gil_policy()
                , "Return the number of segments in the molecule" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::ChainName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::ChainID const & ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("chainid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified chain" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::ChainName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::ChainIdx ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("chainidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified chain" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::SegName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::SegID const & ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("segid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified segment" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::SegName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::SegIdx ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("segidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified segment" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::ResName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::ResID const & ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("resid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::ResName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::ResIdx ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("residx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::CGName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::CGID const & ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("cgid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified CutGroup" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::CGName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::CGIdx ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("cgidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified CutGroup" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::AtomName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::AtomID const & ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("atomid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::name
        
            typedef ::SireMol::AtomName const & ( ::SireMol::MoleculeInfo::*name_function_type)( ::SireMol::AtomIdx ) const;
            name_function_type name_function_value( &::SireMol::MoleculeInfo::name );
            
            MoleculeInfo_exposer.def( 
                "name"
                , name_function_value
                , ( bp::arg("atomidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::number
        
            typedef ::SireMol::ResNum ( ::SireMol::MoleculeInfo::*number_function_type)( ::SireMol::ResID const & ) const;
            number_function_type number_function_value( &::SireMol::MoleculeInfo::number );
            
            MoleculeInfo_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the number of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::number
        
            typedef ::SireMol::ResNum ( ::SireMol::MoleculeInfo::*number_function_type)( ::SireMol::ResIdx ) const;
            number_function_type number_function_value( &::SireMol::MoleculeInfo::number );
            
            MoleculeInfo_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return the number of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::number
        
            typedef ::SireMol::AtomNum ( ::SireMol::MoleculeInfo::*number_function_type)( ::SireMol::AtomID const & ) const;
            number_function_type number_function_value( &::SireMol::MoleculeInfo::number );
            
            MoleculeInfo_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the number of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::number
        
            typedef ::SireMol::AtomNum ( ::SireMol::MoleculeInfo::*number_function_type)( ::SireMol::AtomIdx ) const;
            number_function_type number_function_value( &::SireMol::MoleculeInfo::number );
            
            MoleculeInfo_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the number of the identified atom" );
        
        }
        MoleculeInfo_exposer.def( bp::self != bp::self );
        { //::SireMol::MoleculeInfo::operator=
        
            typedef ::SireMol::MoleculeInfo & ( ::SireMol::MoleculeInfo::*assign_function_type)( ::SireMol::MoleculeInfo const & ) ;
            assign_function_type assign_function_value( &::SireMol::MoleculeInfo::operator= );
            
            MoleculeInfo_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        MoleculeInfo_exposer.def( bp::self == bp::self );
        { //::SireMol::MoleculeInfo::parentChain
        
            typedef ::SireMol::ChainIdx ( ::SireMol::MoleculeInfo::*parentChain_function_type)( ::SireMol::ResIdx ) const;
            parentChain_function_type parentChain_function_value( &::SireMol::MoleculeInfo::parentChain );
            
            MoleculeInfo_exposer.def( 
                "parentChain"
                , parentChain_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "Return the index of the parent chain of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::parentChain
        
            typedef ::SireMol::ChainIdx ( ::SireMol::MoleculeInfo::*parentChain_function_type)( ::SireMol::ResID const & ) const;
            parentChain_function_type parentChain_function_value( &::SireMol::MoleculeInfo::parentChain );
            
            MoleculeInfo_exposer.def( 
                "parentChain"
                , parentChain_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the index of the parent chain of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::parentChain
        
            typedef ::SireMol::ChainIdx ( ::SireMol::MoleculeInfo::*parentChain_function_type)( ::SireMol::AtomIdx ) const;
            parentChain_function_type parentChain_function_value( &::SireMol::MoleculeInfo::parentChain );
            
            MoleculeInfo_exposer.def( 
                "parentChain"
                , parentChain_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the index of the parent chain of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentChain
        
            typedef ::SireMol::ChainIdx ( ::SireMol::MoleculeInfo::*parentChain_function_type)( ::SireMol::AtomID const & ) const;
            parentChain_function_type parentChain_function_value( &::SireMol::MoleculeInfo::parentChain );
            
            MoleculeInfo_exposer.def( 
                "parentChain"
                , parentChain_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the index of the parent chain of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentCutGroup
        
            typedef ::SireMol::CGIdx ( ::SireMol::MoleculeInfo::*parentCutGroup_function_type)( ::SireMol::AtomIdx ) const;
            parentCutGroup_function_type parentCutGroup_function_value( &::SireMol::MoleculeInfo::parentCutGroup );
            
            MoleculeInfo_exposer.def( 
                "parentCutGroup"
                , parentCutGroup_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the index of the parent CutGroup of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentCutGroup
        
            typedef ::SireMol::CGIdx ( ::SireMol::MoleculeInfo::*parentCutGroup_function_type)( ::SireMol::AtomID const & ) const;
            parentCutGroup_function_type parentCutGroup_function_value( &::SireMol::MoleculeInfo::parentCutGroup );
            
            MoleculeInfo_exposer.def( 
                "parentCutGroup"
                , parentCutGroup_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the index of the parent CutGroup of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentResidue
        
            typedef ::SireMol::ResIdx ( ::SireMol::MoleculeInfo::*parentResidue_function_type)( ::SireMol::AtomIdx ) const;
            parentResidue_function_type parentResidue_function_value( &::SireMol::MoleculeInfo::parentResidue );
            
            MoleculeInfo_exposer.def( 
                "parentResidue"
                , parentResidue_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the index of the parent residue of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentResidue
        
            typedef ::SireMol::ResIdx ( ::SireMol::MoleculeInfo::*parentResidue_function_type)( ::SireMol::AtomID const & ) const;
            parentResidue_function_type parentResidue_function_value( &::SireMol::MoleculeInfo::parentResidue );
            
            MoleculeInfo_exposer.def( 
                "parentResidue"
                , parentResidue_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the index of the parent residue of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentSegment
        
            typedef ::SireMol::SegIdx ( ::SireMol::MoleculeInfo::*parentSegment_function_type)( ::SireMol::AtomIdx ) const;
            parentSegment_function_type parentSegment_function_value( &::SireMol::MoleculeInfo::parentSegment );
            
            MoleculeInfo_exposer.def( 
                "parentSegment"
                , parentSegment_function_value
                , ( bp::arg("atomidx") )
                , bp::release_gil_policy()
                , "Return the index of the parent segment of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::parentSegment
        
            typedef ::SireMol::SegIdx ( ::SireMol::MoleculeInfo::*parentSegment_function_type)( ::SireMol::AtomID const & ) const;
            parentSegment_function_type parentSegment_function_value( &::SireMol::MoleculeInfo::parentSegment );
            
            MoleculeInfo_exposer.def( 
                "parentSegment"
                , parentSegment_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the index of the parent segment of the identified atom" );
        
        }
        { //::SireMol::MoleculeInfo::rename
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*rename_function_type)( ::SireMol::AtomIdx,::SireMol::AtomName const & ) const;
            rename_function_type rename_function_value( &::SireMol::MoleculeInfo::rename );
            
            MoleculeInfo_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("atomidx"), bp::arg("newname") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified atom has been\nrenamed to newname" );
        
        }
        { //::SireMol::MoleculeInfo::rename
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*rename_function_type)( ::SireMol::ResIdx,::SireMol::ResName const & ) const;
            rename_function_type rename_function_value( &::SireMol::MoleculeInfo::rename );
            
            MoleculeInfo_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("residx"), bp::arg("newname") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified residue has been\nrenamed to newname" );
        
        }
        { //::SireMol::MoleculeInfo::rename
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*rename_function_type)( ::SireMol::CGIdx,::SireMol::CGName const & ) const;
            rename_function_type rename_function_value( &::SireMol::MoleculeInfo::rename );
            
            MoleculeInfo_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("cgidx"), bp::arg("newname") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified CutGroup has been\nrenamed to newname" );
        
        }
        { //::SireMol::MoleculeInfo::rename
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*rename_function_type)( ::SireMol::ChainIdx,::SireMol::ChainName const & ) const;
            rename_function_type rename_function_value( &::SireMol::MoleculeInfo::rename );
            
            MoleculeInfo_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("chainidx"), bp::arg("newname") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified chain has been\nrenamed to newname" );
        
        }
        { //::SireMol::MoleculeInfo::rename
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*rename_function_type)( ::SireMol::SegIdx,::SireMol::SegName const & ) const;
            rename_function_type rename_function_value( &::SireMol::MoleculeInfo::rename );
            
            MoleculeInfo_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("segidx"), bp::arg("newname") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified segment has been\nrenamed to newname" );
        
        }
        { //::SireMol::MoleculeInfo::renumber
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*renumber_function_type)( ::SireMol::AtomIdx,::SireMol::AtomNum const & ) const;
            renumber_function_type renumber_function_value( &::SireMol::MoleculeInfo::renumber );
            
            MoleculeInfo_exposer.def( 
                "renumber"
                , renumber_function_value
                , ( bp::arg("atomidx"), bp::arg("newnum") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified atom has been\nrenumbered to newnum" );
        
        }
        { //::SireMol::MoleculeInfo::renumber
        
            typedef ::SireMol::MoleculeInfo ( ::SireMol::MoleculeInfo::*renumber_function_type)( ::SireMol::ResIdx,::SireMol::ResNum const & ) const;
            renumber_function_type renumber_function_value( &::SireMol::MoleculeInfo::renumber );
            
            MoleculeInfo_exposer.def( 
                "renumber"
                , renumber_function_value
                , ( bp::arg("residx"), bp::arg("newnum") )
                , bp::release_gil_policy()
                , "Return a copy of this MoleculeInfo where the identified residue has been\nrenumbered to newnum" );
        
        }
        { //::SireMol::MoleculeInfo::resIdx
        
            typedef ::SireMol::ResIdx ( ::SireMol::MoleculeInfo::*resIdx_function_type)( ::SireMol::ResID const & ) const;
            resIdx_function_type resIdx_function_value( &::SireMol::MoleculeInfo::resIdx );
            
            MoleculeInfo_exposer.def( 
                "resIdx"
                , resIdx_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the index of the identified residue" );
        
        }
        { //::SireMol::MoleculeInfo::segIdx
        
            typedef ::SireMol::SegIdx ( ::SireMol::MoleculeInfo::*segIdx_function_type)( ::SireMol::SegID const & ) const;
            segIdx_function_type segIdx_function_value( &::SireMol::MoleculeInfo::segIdx );
            
            MoleculeInfo_exposer.def( 
                "segIdx"
                , segIdx_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the index of the identified segment" );
        
        }
        { //::SireMol::MoleculeInfo::squeeze
        
            typedef void ( ::SireMol::MoleculeInfo::*squeeze_function_type)( ::SireMol::MoleculeInfo const & ) const;
            squeeze_function_type squeeze_function_value( &::SireMol::MoleculeInfo::squeeze );
            
            MoleculeInfo_exposer.def( 
                "squeeze"
                , squeeze_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Use this function to minimise memory usage - this function\ncompares the shared data in this info with other, and where\nthey are equal it copies the data from other, thereby reducing\nwastage caused by duplicated storage\n" );
        
        }
        { //::SireMol::MoleculeInfo::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MoleculeInfo::typeName );
            
            MoleculeInfo_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MoleculeInfo::what
        
            typedef char const * ( ::SireMol::MoleculeInfo::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::MoleculeInfo::what );
            
            MoleculeInfo_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        MoleculeInfo_exposer.staticmethod( "typeName" );
        MoleculeInfo_exposer.def( "__copy__", &__copy__);
        MoleculeInfo_exposer.def( "__deepcopy__", &__copy__);
        MoleculeInfo_exposer.def( "clone", &__copy__);
        MoleculeInfo_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MoleculeInfo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeInfo_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MoleculeInfo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeInfo_exposer.def_pickle(sire_pickle_suite< ::SireMol::MoleculeInfo >());
        MoleculeInfo_exposer.def( "__str__", &__str__< ::SireMol::MoleculeInfo > );
        MoleculeInfo_exposer.def( "__repr__", &__str__< ::SireMol::MoleculeInfo > );
    }

}
