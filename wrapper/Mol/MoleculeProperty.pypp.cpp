// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "MoleculeProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "moleculeinfodata.h"

#include "molviewproperty.h"

#include "mover.hpp"

#include "molviewproperty.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_MoleculeProperty_class(){

    { //::SireMol::MoleculeProperty
        typedef bp::class_< SireMol::MoleculeProperty, bp::bases< SireMol::MolViewProperty, SireBase::Property >, boost::noncopyable > MoleculeProperty_exposer_t;
        MoleculeProperty_exposer_t MoleculeProperty_exposer = MoleculeProperty_exposer_t( "MoleculeProperty", "This specifically is a property that pertains to an entire\nmolecule (e.g. a selection of atoms from that molecule)\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope MoleculeProperty_scope( MoleculeProperty_exposer );
        { //::SireMol::MoleculeProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MoleculeProperty::typeName );
            
            MoleculeProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        MoleculeProperty_exposer.staticmethod( "typeName" );
        MoleculeProperty_exposer.def( "__str__", &__str__< ::SireMol::MoleculeProperty > );
        MoleculeProperty_exposer.def( "__repr__", &__str__< ::SireMol::MoleculeProperty > );
    }

}
