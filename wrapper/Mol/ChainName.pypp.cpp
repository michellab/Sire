// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ChainName.pypp.hpp"

namespace bp = boost::python;

#include "chainname.h"

#include "chainname.h"

#include "SireMol/errors.h"

#include "atom.h"

#include "chain.h"

#include "chainid.h"

#include "chainidentifier.h"

#include "chainresid.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "groupatomids.h"

#include "groupgroupids.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molinfo.h"

#include "mover.hpp"

#include "partialmolecule.h"

#include "residue.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include "chainid.h"

SireMol::ChainName __copy__(const SireMol::ChainName &other){ return SireMol::ChainName(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ChainName_class(){

    { //::SireMol::ChainName
        typedef bp::class_< SireMol::ChainName, bp::bases< SireMol::ChainID, SireID::ID, SireID::Name > > ChainName_exposer_t;
        ChainName_exposer_t ChainName_exposer = ChainName_exposer_t( "ChainName", "This class holds the name of an atom. This can be used\nto identify an atom within a residue.\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope ChainName_scope( ChainName_exposer );
        ChainName_exposer.def( bp::init< QString const & >(( bp::arg("name") ), "") );
        ChainName_exposer.def( bp::init< QString const &, SireID::CaseSensitivity >(( bp::arg("name"), bp::arg("case_sensitivity") ), "") );
        ChainName_exposer.def( bp::init< SireMol::ChainName const & >(( bp::arg("other") ), "") );
        { //::SireMol::ChainName::hash
        
            typedef ::uint ( ::SireMol::ChainName::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMol::ChainName::hash );
            
            ChainName_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ChainName::isNull
        
            typedef bool ( ::SireMol::ChainName::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMol::ChainName::isNull );
            
            ChainName_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ChainName::map
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::ChainName::*map_function_type)( ::SireMol::MolInfo const & ) const;
            map_function_type map_function_value( &::SireMol::ChainName::map );
            
            ChainName_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molinfo") )
                , bp::release_gil_policy()
                , "" );
        
        }
        ChainName_exposer.def( bp::self != bp::self );
        { //::SireMol::ChainName::operator=
        
            typedef ::SireMol::ChainName & ( ::SireMol::ChainName::*assign_function_type)( ::SireMol::ChainName const & ) ;
            assign_function_type assign_function_value( &::SireMol::ChainName::operator= );
            
            ChainName_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        ChainName_exposer.def( bp::self == bp::other< SireID::ID >() );
        ChainName_exposer.def( bp::self == bp::self );
        { //::SireMol::ChainName::toString
        
            typedef ::QString ( ::SireMol::ChainName::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::ChainName::toString );
            
            ChainName_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ChainName::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::ChainName::typeName );
            
            ChainName_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ChainName::what
        
            typedef char const * ( ::SireMol::ChainName::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::ChainName::what );
            
            ChainName_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ChainName_exposer.staticmethod( "typeName" );
        ChainName_exposer.def( "__copy__", &__copy__);
        ChainName_exposer.def( "__deepcopy__", &__copy__);
        ChainName_exposer.def( "clone", &__copy__);
        ChainName_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::ChainName >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ChainName_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::ChainName >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ChainName_exposer.def_pickle(sire_pickle_suite< ::SireMol::ChainName >());
        ChainName_exposer.def( "__str__", &__str__< ::SireMol::ChainName > );
        ChainName_exposer.def( "__repr__", &__str__< ::SireMol::ChainName > );
        ChainName_exposer.def( "__hash__", &::SireMol::ChainName::hash );
    }

}
