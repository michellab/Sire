// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ChainEditor.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "atom.h"

#include "atomeditor.h"

#include "chain.h"

#include "chaineditor.h"

#include "chainresid.h"

#include "groupatomids.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "reseditor.h"

#include "residue.h"

#include "segeditor.h"

#include "segment.h"

#include "selector.hpp"

#include "chaineditor.h"

SireMol::ChainEditor __copy__(const SireMol::ChainEditor &other){ return SireMol::ChainEditor(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_ChainEditor_class(){

    { //::SireMol::ChainEditor
        typedef bp::class_< SireMol::ChainEditor, bp::bases< SireMol::Editor<SireMol::ChainEditor, SireMol::Chain>, SireMol::Chain, SireMol::MoleculeView, SireBase::Property > > ChainEditor_exposer_t;
        ChainEditor_exposer_t ChainEditor_exposer = ChainEditor_exposer_t( "ChainEditor", "This class is used to edit the non-structural parts of a chain\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope ChainEditor_scope( ChainEditor_exposer );
        ChainEditor_exposer.def( bp::init< SireMol::Chain const & >(( bp::arg("chain") ), "Construct to edit a copy of the Chain chain") );
        ChainEditor_exposer.def( bp::init< SireMol::ChainEditor const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::ChainEditor::add
        
            typedef ::SireMol::ResStructureEditor ( ::SireMol::ChainEditor::*add_function_type)( ::SireMol::ResName const & ) const;
            add_function_type add_function_value( &::SireMol::ChainEditor::add );
            
            ChainEditor_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("resname") )
                , bp::release_gil_policy()
                , "Add a residue called resname to this Chain and return\nan editor for that residue" );
        
        }
        { //::SireMol::ChainEditor::add
        
            typedef ::SireMol::ResStructureEditor ( ::SireMol::ChainEditor::*add_function_type)( ::SireMol::ResNum ) const;
            add_function_type add_function_value( &::SireMol::ChainEditor::add );
            
            ChainEditor_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atomnum") )
                , bp::release_gil_policy()
                , "Add a residue with number resnum to this Chain and return\nan editor for that residue" );
        
        }
        { //::SireMol::ChainEditor::commit
        
            typedef ::SireMol::Chain ( ::SireMol::ChainEditor::*commit_function_type)(  ) const;
            commit_function_type commit_function_value( &::SireMol::ChainEditor::commit );
            
            ChainEditor_exposer.def( 
                "commit"
                , commit_function_value
                , bp::release_gil_policy()
                , "Commit the changes made by this editor and return the\nupdated Chain" );
        
        }
        { //::SireMol::ChainEditor::operator=
        
            typedef ::SireMol::ChainEditor & ( ::SireMol::ChainEditor::*assign_function_type)( ::SireMol::Chain const & ) ;
            assign_function_type assign_function_value( &::SireMol::ChainEditor::operator= );
            
            ChainEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("chain") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMol::ChainEditor::operator=
        
            typedef ::SireMol::ChainEditor & ( ::SireMol::ChainEditor::*assign_function_type)( ::SireMol::ChainEditor const & ) ;
            assign_function_type assign_function_value( &::SireMol::ChainEditor::operator= );
            
            ChainEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMol::ChainEditor::reindex
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*reindex_function_type)( ::SireMol::ChainIdx ) const;
            reindex_function_type reindex_function_value( &::SireMol::ChainEditor::reindex );
            
            ChainEditor_exposer.def( 
                "reindex"
                , reindex_function_value
                , ( bp::arg("index") )
                , bp::release_gil_policy()
                , "Move this Chain to index newidx - this will move it\nto the start or end if this index is out of range" );
        
        }
        { //::SireMol::ChainEditor::remove
        
            typedef ::SireMol::MolStructureEditor ( ::SireMol::ChainEditor::*remove_function_type)(  ) const;
            remove_function_type remove_function_value( &::SireMol::ChainEditor::remove );
            
            ChainEditor_exposer.def( 
                "remove"
                , remove_function_value
                , bp::release_gil_policy()
                , "Complete remove this Chain, and return an editor\nfor the molecule that contained it" );
        
        }
        { //::SireMol::ChainEditor::remove
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*remove_function_type)( ::SireMol::AtomID const & ) const;
            remove_function_type remove_function_value( &::SireMol::ChainEditor::remove );
            
            ChainEditor_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Remove the atom that matches the ID atomid from this chain\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::remove
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*remove_function_type)( ::SireMol::ResID const & ) const;
            remove_function_type remove_function_value( &::SireMol::ChainEditor::remove );
            
            ChainEditor_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Completely remove all residues that match the ID resid from\nthis Chain\nThrow: SireMol::missing_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::remove
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*remove_function_type)( int ) const;
            remove_function_type remove_function_value( &::SireMol::ChainEditor::remove );
            
            ChainEditor_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "Remove the ith residue from this Chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::rename
        
            typedef ::SireMol::ChainEditor & ( ::SireMol::ChainEditor::*rename_function_type)( ::SireMol::ChainName const & ) ;
            rename_function_type rename_function_value( &::SireMol::ChainEditor::rename );
            
            ChainEditor_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("name") )
                , bp::return_self< >()
                , "Rename this Chain to newname" );
        
        }
        { //::SireMol::ChainEditor::toString
        
            typedef ::QString ( ::SireMol::ChainEditor::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::ChainEditor::toString );
            
            ChainEditor_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this chain" );
        
        }
        { //::SireMol::ChainEditor::transfer
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*transfer_function_type)( ::SireMol::ResID const &,::SireMol::ChainID const & ) const;
            transfer_function_type transfer_function_value( &::SireMol::ChainEditor::transfer );
            
            ChainEditor_exposer.def( 
                "transfer"
                , transfer_function_value
                , ( bp::arg("resid"), bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Transfer all residues that match the ID resid in this Chain\nto the Chain that matches the ID cgid\nThrow: SireMol::missing_residue\nThrow: SireMol::missing_chain\nThrow: SireMol::duplicate_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::transfer
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*transfer_function_type)( int,::SireMol::ChainID const & ) const;
            transfer_function_type transfer_function_value( &::SireMol::ChainEditor::transfer );
            
            ChainEditor_exposer.def( 
                "transfer"
                , transfer_function_value
                , ( bp::arg("i"), bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Transfer the ith residue of this Chain into the Chain identified\nby the ID cgid\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::transferAll
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::ChainEditor::*transferAll_function_type)( ::SireMol::ChainID const & ) const;
            transferAll_function_type transferAll_function_value( &::SireMol::ChainEditor::transferAll );
            
            ChainEditor_exposer.def( 
                "transferAll"
                , transferAll_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Completely transfer all of the residues in this Chain to\nthe Chain that matches the ID cgid\nThrow: SireMol::missing_chain\nThrow: SireMol::duplicate_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::ChainEditor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::ChainEditor::typeName );
            
            ChainEditor_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ChainEditor_exposer.staticmethod( "typeName" );
        ChainEditor_exposer.def( "__copy__", &__copy__);
        ChainEditor_exposer.def( "__deepcopy__", &__copy__);
        ChainEditor_exposer.def( "clone", &__copy__);
        ChainEditor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::ChainEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ChainEditor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::ChainEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ChainEditor_exposer.def_pickle(sire_pickle_suite< ::SireMol::ChainEditor >());
        ChainEditor_exposer.def( "__str__", &__str__< ::SireMol::ChainEditor > );
        ChainEditor_exposer.def( "__repr__", &__str__< ::SireMol::ChainEditor > );
        ChainEditor_exposer.def( "__len__", &__len_size< ::SireMol::ChainEditor > );
    }

}
