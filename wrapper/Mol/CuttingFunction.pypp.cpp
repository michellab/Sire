// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CuttingFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cuttingfunction.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "residuecutting.h"

#include "selector.hpp"

#include <QMutex>

#include "cuttingfunction.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_CuttingFunction_class(){

    { //::SireMol::CuttingFunction
        typedef bp::class_< SireMol::CuttingFunction, bp::bases< SireBase::Property >, boost::noncopyable > CuttingFunction_exposer_t;
        CuttingFunction_exposer_t CuttingFunction_exposer = CuttingFunction_exposer_t( "CuttingFunction", "This is the base class of all cutting functions. These are\nfunctions that divide a molecule up into CutGroups.\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope CuttingFunction_scope( CuttingFunction_exposer );
        { //::SireMol::CuttingFunction::null
        
            typedef ::SireMol::ResidueCutting const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::CuttingFunction::null );
            
            CuttingFunction_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireMol::CuttingFunction::operator()
        
            typedef ::SireMol::Molecule ( ::SireMol::CuttingFunction::*__call___function_type)( ::SireMol::Molecule const & ) const;
            __call___function_type __call___function_value( &::SireMol::CuttingFunction::operator() );
            
            CuttingFunction_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("molecule") )
                , "" );
        
        }
        { //::SireMol::CuttingFunction::operator()
        
            typedef ::SireMol::MolStructureEditor ( ::SireMol::CuttingFunction::*__call___function_type)( ::SireMol::MolStructureEditor & ) const;
            __call___function_type __call___function_value( &::SireMol::CuttingFunction::operator() );
            
            CuttingFunction_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("moleditor") )
                , "" );
        
        }
        { //::SireMol::CuttingFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::CuttingFunction::typeName );
            
            CuttingFunction_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CuttingFunction_exposer.staticmethod( "null" );
        CuttingFunction_exposer.staticmethod( "typeName" );
        CuttingFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::CuttingFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CuttingFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::CuttingFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CuttingFunction_exposer.def_pickle(sire_pickle_suite< ::SireMol::CuttingFunction >());
        CuttingFunction_exposer.def( "__str__", &__str__< ::SireMol::CuttingFunction > );
        CuttingFunction_exposer.def( "__repr__", &__str__< ::SireMol::CuttingFunction > );
    }

}
