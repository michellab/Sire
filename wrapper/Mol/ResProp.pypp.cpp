// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ResProp.pypp.hpp"

namespace bp = boost::python;

#include "resproperty.hpp"

#include "resproperty.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ResProp_class(){

    { //::SireMol::ResProp
        typedef bp::class_< SireMol::ResProp, bp::bases< SireMol::MolViewProperty, SireBase::Property >, boost::noncopyable > ResProp_exposer_t;
        ResProp_exposer_t ResProp_exposer = ResProp_exposer_t( "ResProp", "Small class used to provide a common base for all ResProperty types", bp::no_init );
        bp::scope ResProp_scope( ResProp_exposer );
        { //::SireMol::ResProp::assertCanConvert
        
            typedef void ( ::SireMol::ResProp::*assertCanConvert_function_type)( ::QVariant const & ) const;
            assertCanConvert_function_type assertCanConvert_function_value( &::SireMol::ResProp::assertCanConvert );
            
            ResProp_exposer.def( 
                "assertCanConvert"
                , assertCanConvert_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ResProp::assignFrom
        
            typedef void ( ::SireMol::ResProp::*assignFrom_function_type)( ::SireMol::ResProperty< QVariant > const & ) ;
            assignFrom_function_type assignFrom_function_value( &::SireMol::ResProp::assignFrom );
            
            ResProp_exposer.def( 
                "assignFrom"
                , assignFrom_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ResProp::canConvert
        
            typedef bool ( ::SireMol::ResProp::*canConvert_function_type)( ::QVariant const & ) const;
            canConvert_function_type canConvert_function_value( &::SireMol::ResProp::canConvert );
            
            ResProp_exposer.def( 
                "canConvert"
                , canConvert_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ResProp::getAsProperty
        
            typedef ::SireBase::PropertyPtr ( ::SireMol::ResProp::*getAsProperty_function_type)( ::SireMol::ResIdx const & ) const;
            getAsProperty_function_type getAsProperty_function_value( &::SireMol::ResProp::getAsProperty );
            
            ResProp_exposer.def( 
                "getAsProperty"
                , getAsProperty_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ResProp::getAsVariant
        
            typedef ::QVariant ( ::SireMol::ResProp::*getAsVariant_function_type)( ::SireMol::ResIdx const & ) const;
            getAsVariant_function_type getAsVariant_function_value( &::SireMol::ResProp::getAsVariant );
            
            ResProp_exposer.def( 
                "getAsVariant"
                , getAsVariant_function_value
                , ( bp::arg("residx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::ResProp::toVariant
        
            typedef ::SireMol::ResProperty< QVariant > ( ::SireMol::ResProp::*toVariant_function_type)(  ) const;
            toVariant_function_type toVariant_function_value( &::SireMol::ResProp::toVariant );
            
            ResProp_exposer.def( 
                "toVariant"
                , toVariant_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ResProp_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::ResProp >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ResProp_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::ResProp >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ResProp_exposer.def_pickle(sire_pickle_suite< ::SireMol::ResProp >());
        ResProp_exposer.def( "__str__", &__str__< ::SireMol::ResProp > );
        ResProp_exposer.def( "__repr__", &__str__< ::SireMol::ResProp > );
    }

}
