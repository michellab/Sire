// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SpecifyMol.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "specifymol.h"

#include "specifymol.h"

SireMol::SpecifyMol __copy__(const SireMol::SpecifyMol &other){ return SireMol::SpecifyMol(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_SpecifyMol_class(){

    { //::SireMol::SpecifyMol
        typedef bp::class_< SireMol::SpecifyMol, bp::bases< SireMol::MolID, SireID::ID > > SpecifyMol_exposer_t;
        SpecifyMol_exposer_t SpecifyMol_exposer = SpecifyMol_exposer_t( "SpecifyMol", "This class allow for the specification of specific\nmatching molecules\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope SpecifyMol_scope( SpecifyMol_exposer );
        SpecifyMol_exposer.def( bp::init< SireMol::MolID const & >(( bp::arg("molid") ), "Construct to match all of the molecules that match the\nID molid") );
        SpecifyMol_exposer.def( bp::init< SireMol::MolID const &, int >(( bp::arg("molid"), bp::arg("i") ), "Construct to match the ith molecule that matches the ID molid") );
        SpecifyMol_exposer.def( bp::init< SireMol::MolID const &, int, int >(( bp::arg("molid"), bp::arg("i"), bp::arg("j") ), "Construct to math the range of molecules from i to j that\nmatch the ID molid") );
        SpecifyMol_exposer.def( bp::init< SireMol::SpecifyMol const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::SpecifyMol::hash
        
            typedef ::uint ( ::SireMol::SpecifyMol::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMol::SpecifyMol::hash );
            
            SpecifyMol_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "Hash this ID" );
        
        }
        { //::SireMol::SpecifyMol::isNull
        
            typedef bool ( ::SireMol::SpecifyMol::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMol::SpecifyMol::isNull );
            
            SpecifyMol_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "Return whether or not this ID is null" );
        
        }
        { //::SireMol::SpecifyMol::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::SpecifyMol::*map_function_type)( ::SireMol::Molecules const & ) const;
            map_function_type map_function_value( &::SireMol::SpecifyMol::map );
            
            SpecifyMol_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Map this ID to the list of molecule numbers that match" );
        
        }
        { //::SireMol::SpecifyMol::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::SpecifyMol::*map_function_type)( ::SireMol::MoleculeGroup const & ) const;
            map_function_type map_function_value( &::SireMol::SpecifyMol::map );
            
            SpecifyMol_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Map this ID to the list of molecule numbers that match" );
        
        }
        { //::SireMol::SpecifyMol::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::SpecifyMol::*map_function_type)( ::SireMol::MolGroupsBase const & ) const;
            map_function_type map_function_value( &::SireMol::SpecifyMol::map );
            
            SpecifyMol_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molgroups") )
                , bp::release_gil_policy()
                , "Map this ID to the list of molecule numbers that match" );
        
        }
        SpecifyMol_exposer.def( bp::self != bp::self );
        SpecifyMol_exposer.def( bp::self != bp::other< SireID::ID >() );
        { //::SireMol::SpecifyMol::operator=
        
            typedef ::SireMol::SpecifyMol & ( ::SireMol::SpecifyMol::*assign_function_type)( ::SireMol::SpecifyMol const & ) ;
            assign_function_type assign_function_value( &::SireMol::SpecifyMol::operator= );
            
            SpecifyMol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SpecifyMol_exposer.def( bp::self == bp::self );
        SpecifyMol_exposer.def( bp::self == bp::other< SireID::ID >() );
        { //::SireMol::SpecifyMol::toString
        
            typedef ::QString ( ::SireMol::SpecifyMol::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::SpecifyMol::toString );
            
            SpecifyMol_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this ID" );
        
        }
        { //::SireMol::SpecifyMol::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::SpecifyMol::typeName );
            
            SpecifyMol_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SpecifyMol::what
        
            typedef char const * ( ::SireMol::SpecifyMol::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::SpecifyMol::what );
            
            SpecifyMol_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SpecifyMol_exposer.staticmethod( "typeName" );
        SpecifyMol_exposer.def( "__copy__", &__copy__);
        SpecifyMol_exposer.def( "__deepcopy__", &__copy__);
        SpecifyMol_exposer.def( "clone", &__copy__);
        SpecifyMol_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::SpecifyMol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpecifyMol_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::SpecifyMol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpecifyMol_exposer.def_pickle(sire_pickle_suite< ::SireMol::SpecifyMol >());
        SpecifyMol_exposer.def( "__str__", &__str__< ::SireMol::SpecifyMol > );
        SpecifyMol_exposer.def( "__repr__", &__str__< ::SireMol::SpecifyMol > );
        SpecifyMol_exposer.def( "__hash__", &::SireMol::SpecifyMol::hash );
    }

}
