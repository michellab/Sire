// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GeometryPerturbations.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/identities.h"

#include "SireCAS/values.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "core.h"

#include "geometryperturbation.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "geometryperturbation.h"

SireMol::GeometryPerturbations __copy__(const SireMol::GeometryPerturbations &other){ return SireMol::GeometryPerturbations(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_GeometryPerturbations_class(){

    { //::SireMol::GeometryPerturbations
        typedef bp::class_< SireMol::GeometryPerturbations, bp::bases< SireMol::GeometryPerturbation, SireMol::Perturbation, SireBase::Property > > GeometryPerturbations_exposer_t;
        GeometryPerturbations_exposer_t GeometryPerturbations_exposer = GeometryPerturbations_exposer_t( "GeometryPerturbations", "This class holds a collection of geometry perturbations", bp::init< >("Constructor") );
        bp::scope GeometryPerturbations_scope( GeometryPerturbations_exposer );
        GeometryPerturbations_exposer.def( bp::init< SireMol::GeometryPerturbation const & >(( bp::arg("perturbation") ), "Construct to hold just a single perturbation") );
        GeometryPerturbations_exposer.def( bp::init< QList< SireBase::PropPtr< SireMol::GeometryPerturbation > > const & >(( bp::arg("perturbations") ), "Construct to hold just a single perturbation") );
        GeometryPerturbations_exposer.def( bp::init< SireMol::GeometryPerturbations const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::GeometryPerturbations::children
        
            typedef ::QList< SireBase::PropPtr< SireMol::Perturbation > > ( ::SireMol::GeometryPerturbations::*children_function_type)(  ) const;
            children_function_type children_function_value( &::SireMol::GeometryPerturbations::children );
            
            GeometryPerturbations_exposer.def( 
                "children"
                , children_function_value
                , bp::release_gil_policy()
                , "Return the list of all child perturbations (and children of children)" );
        
        }
        GeometryPerturbations_exposer.def( bp::self != bp::self );
        { //::SireMol::GeometryPerturbations::operator=
        
            typedef ::SireMol::GeometryPerturbations & ( ::SireMol::GeometryPerturbations::*assign_function_type)( ::SireMol::GeometryPerturbations const & ) ;
            assign_function_type assign_function_value( &::SireMol::GeometryPerturbations::operator= );
            
            GeometryPerturbations_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        GeometryPerturbations_exposer.def( bp::self == bp::self );
        { //::SireMol::GeometryPerturbations::perturbations
        
            typedef ::QList< SireBase::PropPtr< SireMol::GeometryPerturbation > > ( ::SireMol::GeometryPerturbations::*perturbations_function_type)(  ) const;
            perturbations_function_type perturbations_function_value( &::SireMol::GeometryPerturbations::perturbations );
            
            GeometryPerturbations_exposer.def( 
                "perturbations"
                , perturbations_function_value
                , bp::release_gil_policy()
                , "Return the geometry perturbations in this collection" );
        
        }
        { //::SireMol::GeometryPerturbations::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::GeometryPerturbations::*recreate_function_type)( ::SireCAS::Expression const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::GeometryPerturbations::recreate );
            
            GeometryPerturbations_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("mapping_function") )
                , bp::release_gil_policy()
                , "Return a re-created version of this set of perturbations where all child\nperturbations are changed to use the passed mapping function" );
        
        }
        { //::SireMol::GeometryPerturbations::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::GeometryPerturbations::*recreate_function_type)( ::SireBase::PropertyMap const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::GeometryPerturbations::recreate );
            
            GeometryPerturbations_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("map") )
                , bp::release_gil_policy()
                , "Return a re-created version of this set of perturbations where all child\nperturbations are changed to use the passed property map" );
        
        }
        { //::SireMol::GeometryPerturbations::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::GeometryPerturbations::*recreate_function_type)( ::SireCAS::Expression const &,::SireBase::PropertyMap const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::GeometryPerturbations::recreate );
            
            GeometryPerturbations_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("mapping_function"), bp::arg("map") )
                , bp::release_gil_policy()
                , "Return a re-created version of this set of perturbations where all child\nperturbations are changed to use the passed mapping function and property map" );
        
        }
        { //::SireMol::GeometryPerturbations::requiredProperties
        
            typedef ::QSet< QString > ( ::SireMol::GeometryPerturbations::*requiredProperties_function_type)(  ) const;
            requiredProperties_function_type requiredProperties_function_value( &::SireMol::GeometryPerturbations::requiredProperties );
            
            GeometryPerturbations_exposer.def( 
                "requiredProperties"
                , requiredProperties_function_value
                , bp::release_gil_policy()
                , "Return all of the properties that are needed or affected by\nthese perturbations" );
        
        }
        { //::SireMol::GeometryPerturbations::requiredSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireMol::GeometryPerturbations::*requiredSymbols_function_type)(  ) const;
            requiredSymbols_function_type requiredSymbols_function_value( &::SireMol::GeometryPerturbations::requiredSymbols );
            
            GeometryPerturbations_exposer.def( 
                "requiredSymbols"
                , requiredSymbols_function_value
                , bp::release_gil_policy()
                , "Return all of the symbols that need to be input to these perturbations" );
        
        }
        { //::SireMol::GeometryPerturbations::substitute
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::GeometryPerturbations::*substitute_function_type)( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireMol::GeometryPerturbations::substitute );
            
            GeometryPerturbations_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") )
                , bp::release_gil_policy()
                , "Substitute the identities in identities in all of the mapping functions\nused by this perturbation. This is useful if, for example, you want to\nswitch from using lambda to control the perturbation to using alpha, e.g.\n" );
        
        }
        { //::SireMol::GeometryPerturbations::substitute
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::GeometryPerturbations::*substitute_function_type)( ::SireCAS::Symbol const &,::SireCAS::Symbol const & ) const;
            substitute_function_type substitute_function_value( &::SireMol::GeometryPerturbations::substitute );
            
            GeometryPerturbations_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("old_symbol"), bp::arg("new_symbol") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::GeometryPerturbations::toString
        
            typedef ::QString ( ::SireMol::GeometryPerturbations::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::GeometryPerturbations::toString );
            
            GeometryPerturbations_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::GeometryPerturbations::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::GeometryPerturbations::typeName );
            
            GeometryPerturbations_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::GeometryPerturbations::wouldChange
        
            typedef bool ( ::SireMol::GeometryPerturbations::*wouldChange_function_type)( ::SireMol::Molecule const &,::SireCAS::Values const & ) const;
            wouldChange_function_type wouldChange_function_value( &::SireMol::GeometryPerturbations::wouldChange );
            
            GeometryPerturbations_exposer.def( 
                "wouldChange"
                , wouldChange_function_value
                , ( bp::arg("molecule"), bp::arg("values") )
                , bp::release_gil_policy()
                , "Return whether or not these perturbations with the passed values would\nchange the molecule molecule" );
        
        }
        GeometryPerturbations_exposer.staticmethod( "typeName" );
        GeometryPerturbations_exposer.def( "__copy__", &__copy__);
        GeometryPerturbations_exposer.def( "__deepcopy__", &__copy__);
        GeometryPerturbations_exposer.def( "clone", &__copy__);
        GeometryPerturbations_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::GeometryPerturbations >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeometryPerturbations_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::GeometryPerturbations >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeometryPerturbations_exposer.def_pickle(sire_pickle_suite< ::SireMol::GeometryPerturbations >());
        GeometryPerturbations_exposer.def( "__str__", &__str__< ::SireMol::GeometryPerturbations > );
        GeometryPerturbations_exposer.def( "__repr__", &__str__< ::SireMol::GeometryPerturbations > );
    }

}
