// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SelectorMol.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atomid.h"

#include "cgid.h"

#include "chainid.h"

#include "evaluatorm.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molid.h"

#include "molidx.h"

#include "molname.h"

#include "molnum.h"

#include "resid.h"

#include "segid.h"

#include "selectorm.hpp"

#include "selectormol.h"

#include "selectormol.h"

SireMol::SelectorMol __copy__(const SireMol::SelectorMol &other){ return SireMol::SelectorMol(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_SelectorMol_class(){

    { //::SireMol::SelectorMol
        typedef bp::class_< SireMol::SelectorMol, bp::bases< SireBase::Property > > SelectorMol_exposer_t;
        SelectorMol_exposer_t SelectorMol_exposer = SelectorMol_exposer_t( "SelectorMol", "This class provides a Selector<T>-type interface to a\ncollection of molecules.\n", bp::init< >("") );
        bp::scope SelectorMol_scope( SelectorMol_exposer );
        SelectorMol_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("mol") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::Molecules const & >(( bp::arg("mols") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("mols") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::MolGroupsBase const & >(( bp::arg("mols") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectResult const & >(( bp::arg("mols") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorM< SireMol::Atom > const & >(( bp::arg("other") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorM< SireMol::Residue > const & >(( bp::arg("other") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorM< SireMol::Chain > const & >(( bp::arg("other") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorM< SireMol::Segment > const & >(( bp::arg("other") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorM< SireMol::CutGroup > const & >(( bp::arg("other") ), "") );
        SelectorMol_exposer.def( bp::init< SireMol::SelectorMol const & >(( bp::arg("other") ), "") );
        { //::SireMol::SelectorMol::IDs
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::SelectorMol::*IDs_function_type)(  ) const;
            IDs_function_type IDs_function_value( &::SireMol::SelectorMol::IDs );
            
            SelectorMol_exposer.def( 
                "IDs"
                , IDs_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atom
        
            typedef ::SireMol::Atom ( ::SireMol::SelectorMol::*atom_function_type)( int ) const;
            atom_function_type atom_function_value( &::SireMol::SelectorMol::atom );
            
            SelectorMol_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atom
        
            typedef ::SireMol::Atom ( ::SireMol::SelectorMol::*atom_function_type)( ::QString const & ) const;
            atom_function_type atom_function_value( &::SireMol::SelectorMol::atom );
            
            SelectorMol_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atom
        
            typedef ::SireMol::Atom ( ::SireMol::SelectorMol::*atom_function_type)( ::SireMol::AtomID const & ) const;
            atom_function_type atom_function_value( &::SireMol::SelectorMol::atom );
            
            SelectorMol_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)(  ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)( int ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)( ::SireBase::Slice const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)( ::QList< long long > const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)( ::QString const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMol::SelectorMol::*atoms_function_type)( ::SireMol::AtomID const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::SelectorMol::atoms );
            
            SelectorMol_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chain
        
            typedef ::SireMol::Chain ( ::SireMol::SelectorMol::*chain_function_type)( int ) const;
            chain_function_type chain_function_value( &::SireMol::SelectorMol::chain );
            
            SelectorMol_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chain
        
            typedef ::SireMol::Chain ( ::SireMol::SelectorMol::*chain_function_type)( ::QString const & ) const;
            chain_function_type chain_function_value( &::SireMol::SelectorMol::chain );
            
            SelectorMol_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chain
        
            typedef ::SireMol::Chain ( ::SireMol::SelectorMol::*chain_function_type)( ::SireMol::ChainID const & ) const;
            chain_function_type chain_function_value( &::SireMol::SelectorMol::chain );
            
            SelectorMol_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)(  ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)( int ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)( ::SireBase::Slice const & ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)( ::QList< long long > const & ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)( ::QString const & ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMol::SelectorMol::*chains_function_type)( ::SireMol::ChainID const & ) const;
            chains_function_type chains_function_value( &::SireMol::SelectorMol::chains );
            
            SelectorMol_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::contains
        
            typedef bool ( ::SireMol::SelectorMol::*contains_function_type)( ::SireMol::MolNum const & ) const;
            contains_function_type contains_function_value( &::SireMol::SelectorMol::contains );
            
            SelectorMol_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::count
        
            typedef int ( ::SireMol::SelectorMol::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMol::SelectorMol::count );
            
            SelectorMol_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::SelectorMol::*cutGroup_function_type)( int ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::SelectorMol::cutGroup );
            
            SelectorMol_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::SelectorMol::*cutGroup_function_type)( ::QString const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::SelectorMol::cutGroup );
            
            SelectorMol_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::SelectorMol::*cutGroup_function_type)( ::SireMol::CGID const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::SelectorMol::cutGroup );
            
            SelectorMol_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)(  ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)( int ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)( ::SireBase::Slice const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)( ::QList< long long > const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)( ::QString const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMol::SelectorMol::*cutGroups_function_type)( ::SireMol::CGID const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::SelectorMol::cutGroups );
            
            SelectorMol_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::evaluate
        
            typedef ::SireMol::EvaluatorM ( ::SireMol::SelectorMol::*evaluate_function_type)(  ) const;
            evaluate_function_type evaluate_function_value( &::SireMol::SelectorMol::evaluate );
            
            SelectorMol_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::indexes
        
            typedef ::QList< SireMol::MolIdx > ( ::SireMol::SelectorMol::*indexes_function_type)(  ) const;
            indexes_function_type indexes_function_value( &::SireMol::SelectorMol::indexes );
            
            SelectorMol_exposer.def( 
                "indexes"
                , indexes_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::isEmpty
        
            typedef bool ( ::SireMol::SelectorMol::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::SelectorMol::isEmpty );
            
            SelectorMol_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molNums
        
            typedef ::QVector< SireMol::MolNum > ( ::SireMol::SelectorMol::*molNums_function_type)(  ) const;
            molNums_function_type molNums_function_value( &::SireMol::SelectorMol::molNums );
            
            SelectorMol_exposer.def( 
                "molNums"
                , molNums_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( int ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( ::QString const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( ::SireMol::MolIdx const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molidx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( ::SireMol::MolName const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( ::SireMol::MolNum const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*molecule_function_type)( ::SireMol::MolID const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::SelectorMol::molecule );
            
            SelectorMol_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)(  ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( int ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::SireBase::Slice const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::QList< long long > const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::QString const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::SireMol::MolIdx const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molidx") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::SireMol::MolName const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molname") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::SireMol::MolNum const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*molecules_function_type)( ::SireMol::MolID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::SelectorMol::molecules );
            
            SelectorMol_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nAtoms
        
            typedef int ( ::SireMol::SelectorMol::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::SelectorMol::nAtoms );
            
            SelectorMol_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nChains
        
            typedef int ( ::SireMol::SelectorMol::*nChains_function_type)(  ) const;
            nChains_function_type nChains_function_value( &::SireMol::SelectorMol::nChains );
            
            SelectorMol_exposer.def( 
                "nChains"
                , nChains_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nCutGroups
        
            typedef int ( ::SireMol::SelectorMol::*nCutGroups_function_type)(  ) const;
            nCutGroups_function_type nCutGroups_function_value( &::SireMol::SelectorMol::nCutGroups );
            
            SelectorMol_exposer.def( 
                "nCutGroups"
                , nCutGroups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nMolecules
        
            typedef int ( ::SireMol::SelectorMol::*nMolecules_function_type)(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireMol::SelectorMol::nMolecules );
            
            SelectorMol_exposer.def( 
                "nMolecules"
                , nMolecules_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nResidues
        
            typedef int ( ::SireMol::SelectorMol::*nResidues_function_type)(  ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::SelectorMol::nResidues );
            
            SelectorMol_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::nSegments
        
            typedef int ( ::SireMol::SelectorMol::*nSegments_function_type)(  ) const;
            nSegments_function_type nSegments_function_value( &::SireMol::SelectorMol::nSegments );
            
            SelectorMol_exposer.def( 
                "nSegments"
                , nSegments_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::names
        
            typedef ::QList< SireMol::MolName > ( ::SireMol::SelectorMol::*names_function_type)(  ) const;
            names_function_type names_function_value( &::SireMol::SelectorMol::names );
            
            SelectorMol_exposer.def( 
                "names"
                , names_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::numbers
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::SelectorMol::*numbers_function_type)(  ) const;
            numbers_function_type numbers_function_value( &::SireMol::SelectorMol::numbers );
            
            SelectorMol_exposer.def( 
                "numbers"
                , numbers_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SelectorMol_exposer.def( bp::self != bp::self );
        { //::SireMol::SelectorMol::operator=
        
            typedef ::SireMol::SelectorMol & ( ::SireMol::SelectorMol::*assign_function_type)( ::SireMol::SelectorMol const & ) ;
            assign_function_type assign_function_value( &::SireMol::SelectorMol::operator= );
            
            SelectorMol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SelectorMol_exposer.def( bp::self == bp::self );
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*__getitem___function_type)( ::SireBase::Slice const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("slice") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::SelectorMol ( ::SireMol::SelectorMol::*__getitem___function_type)( ::QList< long long > const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("idxs") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( ::QString const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("name") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( ::SireMol::MolIdx const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molidx") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( ::SireMol::MolName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molname") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( ::SireMol::MolNum const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molnum") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::operator[]
        
            typedef ::SireMol::Molecule ( ::SireMol::SelectorMol::*__getitem___function_type)( ::SireMol::MolID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectorMol::operator[] );
            
            SelectorMol_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molid") )
                , "" );
        
        }
        { //::SireMol::SelectorMol::residue
        
            typedef ::SireMol::Residue ( ::SireMol::SelectorMol::*residue_function_type)( int ) const;
            residue_function_type residue_function_value( &::SireMol::SelectorMol::residue );
            
            SelectorMol_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residue
        
            typedef ::SireMol::Residue ( ::SireMol::SelectorMol::*residue_function_type)( ::QString const & ) const;
            residue_function_type residue_function_value( &::SireMol::SelectorMol::residue );
            
            SelectorMol_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residue
        
            typedef ::SireMol::Residue ( ::SireMol::SelectorMol::*residue_function_type)( ::SireMol::ResID const & ) const;
            residue_function_type residue_function_value( &::SireMol::SelectorMol::residue );
            
            SelectorMol_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)(  ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)( int ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)( ::SireBase::Slice const & ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)( ::QList< long long > const & ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)( ::QString const & ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMol::SelectorMol::*residues_function_type)( ::SireMol::ResID const & ) const;
            residues_function_type residues_function_value( &::SireMol::SelectorMol::residues );
            
            SelectorMol_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::search
        
            typedef ::SireMol::SelectResult ( ::SireMol::SelectorMol::*search_function_type)( ::QString const & ) const;
            search_function_type search_function_value( &::SireMol::SelectorMol::search );
            
            SelectorMol_exposer.def( 
                "search"
                , search_function_value
                , ( bp::arg("search_string") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segment
        
            typedef ::SireMol::Segment ( ::SireMol::SelectorMol::*segment_function_type)( int ) const;
            segment_function_type segment_function_value( &::SireMol::SelectorMol::segment );
            
            SelectorMol_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segment
        
            typedef ::SireMol::Segment ( ::SireMol::SelectorMol::*segment_function_type)( ::QString const & ) const;
            segment_function_type segment_function_value( &::SireMol::SelectorMol::segment );
            
            SelectorMol_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segment
        
            typedef ::SireMol::Segment ( ::SireMol::SelectorMol::*segment_function_type)( ::SireMol::SegID const & ) const;
            segment_function_type segment_function_value( &::SireMol::SelectorMol::segment );
            
            SelectorMol_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)(  ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)( int ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)( ::SireBase::Slice const & ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)( ::QList< long long > const & ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)( ::QString const & ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMol::SelectorMol::*segments_function_type)( ::SireMol::SegID const & ) const;
            segments_function_type segments_function_value( &::SireMol::SelectorMol::segments );
            
            SelectorMol_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::size
        
            typedef int ( ::SireMol::SelectorMol::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireMol::SelectorMol::size );
            
            SelectorMol_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::toList
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeView > > ( ::SireMol::SelectorMol::*toList_function_type)(  ) const;
            toList_function_type toList_function_value( &::SireMol::SelectorMol::toList );
            
            SelectorMol_exposer.def( 
                "toList"
                , toList_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::toMoleculeGroup
        
            typedef ::SireMol::MoleculeGroup ( ::SireMol::SelectorMol::*toMoleculeGroup_function_type)(  ) const;
            toMoleculeGroup_function_type toMoleculeGroup_function_value( &::SireMol::SelectorMol::toMoleculeGroup );
            
            SelectorMol_exposer.def( 
                "toMoleculeGroup"
                , toMoleculeGroup_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::toSelectResult
        
            typedef ::SireMol::SelectResult ( ::SireMol::SelectorMol::*toSelectResult_function_type)(  ) const;
            toSelectResult_function_type toSelectResult_function_value( &::SireMol::SelectorMol::toSelectResult );
            
            SelectorMol_exposer.def( 
                "toSelectResult"
                , toSelectResult_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::toString
        
            typedef ::QString ( ::SireMol::SelectorMol::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::SelectorMol::toString );
            
            SelectorMol_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::SelectorMol::typeName );
            
            SelectorMol_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::SelectorMol::what
        
            typedef char const * ( ::SireMol::SelectorMol::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::SelectorMol::what );
            
            SelectorMol_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SelectorMol_exposer.staticmethod( "typeName" );
        SelectorMol_exposer.def( "__copy__", &__copy__);
        SelectorMol_exposer.def( "__deepcopy__", &__copy__);
        SelectorMol_exposer.def( "clone", &__copy__);
        SelectorMol_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::SelectorMol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectorMol_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::SelectorMol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectorMol_exposer.def_pickle(sire_pickle_suite< ::SireMol::SelectorMol >());
        SelectorMol_exposer.def( "__str__", &__str__< ::SireMol::SelectorMol > );
        SelectorMol_exposer.def( "__repr__", &__str__< ::SireMol::SelectorMol > );
        SelectorMol_exposer.def( "__len__", &__len_size< ::SireMol::SelectorMol > );
    }

}
