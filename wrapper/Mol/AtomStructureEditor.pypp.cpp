// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "AtomStructureEditor.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomeditor.h"

#include "cgeditor.h"

#include "cgidx.h"

#include "chain.h"

#include "chaineditor.h"

#include "cutgroup.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "reseditor.h"

#include "residue.h"

#include "residx.h"

#include "segeditor.h"

#include "segidx.h"

#include "segment.h"

#include "selector.hpp"

#include "atomeditor.h"

SireMol::AtomStructureEditor __copy__(const SireMol::AtomStructureEditor &other){ return SireMol::AtomStructureEditor(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomStructureEditor_class(){

    { //::SireMol::AtomStructureEditor
        typedef bp::class_< SireMol::AtomStructureEditor > AtomStructureEditor_exposer_t;
        AtomStructureEditor_exposer_t AtomStructureEditor_exposer = AtomStructureEditor_exposer_t( "AtomStructureEditor", "This class is used to edit an atoms relationship to\nother parts of the molecule (e.g. which CutGroup it\nis in, or which Residue it is in)\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope AtomStructureEditor_scope( AtomStructureEditor_exposer );
        AtomStructureEditor_exposer.def( bp::init< SireMol::Atom const & >(( bp::arg("atom") ), "Construct from an Atom") );
        AtomStructureEditor_exposer.def( bp::init< SireMol::StructureEditor const &, SireMol::AtomIdx >(( bp::arg("data"), bp::arg("atomidx") ), "Construct for the atom at index idx in the molecule whose data\nis being edited in moldata\nThrow: SireError::invalid_index\n") );
        AtomStructureEditor_exposer.def( bp::init< SireMol::AtomStructureEditor const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::AtomStructureEditor::chain
        
            typedef ::SireMol::ChainStructureEditor ( ::SireMol::AtomStructureEditor::*chain_function_type)(  ) ;
            chain_function_type chain_function_value( &::SireMol::AtomStructureEditor::chain );
            
            AtomStructureEditor_exposer.def( 
                "chain"
                , chain_function_value
                , bp::release_gil_policy()
                , "Return the editor for the chain that contains this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::commit
        
            typedef ::SireMol::Atom ( ::SireMol::AtomStructureEditor::*commit_function_type)(  ) const;
            commit_function_type commit_function_value( &::SireMol::AtomStructureEditor::commit );
            
            AtomStructureEditor_exposer.def( 
                "commit"
                , commit_function_value
                , bp::release_gil_policy()
                , "Commit all of the changes, returning the uneditable Atom" );
        
        }
        { //::SireMol::AtomStructureEditor::cutGroup
        
            typedef ::SireMol::CGStructureEditor ( ::SireMol::AtomStructureEditor::*cutGroup_function_type)(  ) ;
            cutGroup_function_type cutGroup_function_value( &::SireMol::AtomStructureEditor::cutGroup );
            
            AtomStructureEditor_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , bp::release_gil_policy()
                , "Return the editor for the CutGrop that contains this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::index
        
            typedef ::SireMol::AtomIdx ( ::SireMol::AtomStructureEditor::*index_function_type)(  ) const;
            index_function_type index_function_value( &::SireMol::AtomStructureEditor::index );
            
            AtomStructureEditor_exposer.def( 
                "index"
                , index_function_value
                , bp::release_gil_policy()
                , "Return the index number of this atom in the molecule" );
        
        }
        { //::SireMol::AtomStructureEditor::molecule
        
            typedef ::SireMol::MolStructureEditor ( ::SireMol::AtomStructureEditor::*molecule_function_type)(  ) ;
            molecule_function_type molecule_function_value( &::SireMol::AtomStructureEditor::molecule );
            
            AtomStructureEditor_exposer.def( 
                "molecule"
                , molecule_function_value
                , bp::release_gil_policy()
                , "Return the editor for the molecule that contains this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::name
        
            typedef ::SireMol::AtomName const & ( ::SireMol::AtomStructureEditor::*name_function_type)(  ) const;
            name_function_type name_function_value( &::SireMol::AtomStructureEditor::name );
            
            AtomStructureEditor_exposer.def( 
                "name"
                , name_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the name of this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::number
        
            typedef ::SireMol::AtomNum ( ::SireMol::AtomStructureEditor::*number_function_type)(  ) const;
            number_function_type number_function_value( &::SireMol::AtomStructureEditor::number );
            
            AtomStructureEditor_exposer.def( 
                "number"
                , number_function_value
                , bp::release_gil_policy()
                , "Return the number of this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::operator=
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*assign_function_type)( ::SireMol::Atom const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomStructureEditor::operator= );
            
            AtomStructureEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("atom") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMol::AtomStructureEditor::operator=
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*assign_function_type)( ::SireMol::AtomStructureEditor const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomStructureEditor::operator= );
            
            AtomStructureEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMol::AtomStructureEditor::reindex
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reindex_function_type)( ::SireMol::AtomIdx ) ;
            reindex_function_type reindex_function_value( &::SireMol::AtomStructureEditor::reindex );
            
            AtomStructureEditor_exposer.def( 
                "reindex"
                , reindex_function_value
                , ( bp::arg("idx") )
                , bp::return_self< >()
                , "Reindex this atom to newidx - this will move the atom to\nthe end if newidx is greater than the number of atoms\nin the molecule" );
        
        }
        { //::SireMol::AtomStructureEditor::remove
        
            typedef ::SireMol::MolStructureEditor ( ::SireMol::AtomStructureEditor::*remove_function_type)(  ) ;
            remove_function_type remove_function_value( &::SireMol::AtomStructureEditor::remove );
            
            AtomStructureEditor_exposer.def( 
                "remove"
                , remove_function_value
                , bp::release_gil_policy()
                , "Completely remove this atom from the molecule and return\na MolStructureEditor that can be used to continue editing\nthe molecule" );
        
        }
        { //::SireMol::AtomStructureEditor::rename
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*rename_function_type)( ::SireMol::AtomName const & ) ;
            rename_function_type rename_function_value( &::SireMol::AtomStructureEditor::rename );
            
            AtomStructureEditor_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("name") )
                , bp::return_self< >()
                , "Rename this atom to newname" );
        
        }
        { //::SireMol::AtomStructureEditor::renumber
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*renumber_function_type)( ::SireMol::AtomNum ) ;
            renumber_function_type renumber_function_value( &::SireMol::AtomStructureEditor::renumber );
            
            AtomStructureEditor_exposer.def( 
                "renumber"
                , renumber_function_value
                , ( bp::arg("number") )
                , bp::return_self< >()
                , "Renumber this atom to newnum" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::CGIdx ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the CutGroup at index cgidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::CGID const & ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the CutGroup identified\nby ID cgid\nThrow: SireMol::missing_cutgroup\nThrow: SireMol::duplicate_cutgroup\nThrow: SireMol::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::ResIdx ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the residue at index residx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::ResID const & ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the residue identified\nby ID resid\nThrow: SireMol::missing_residue\nThrow: SireMol::duplicate_residue\nThrow: SireMol::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::SegIdx ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the segment at index segidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::reparent
        
            typedef ::SireMol::AtomStructureEditor & ( ::SireMol::AtomStructureEditor::*reparent_function_type)( ::SireMol::SegID const & ) ;
            reparent_function_type reparent_function_value( &::SireMol::AtomStructureEditor::reparent );
            
            AtomStructureEditor_exposer.def( 
                "reparent"
                , reparent_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >()
                , "Reparent this atom so that it is now in the segment identified\nby ID segid\nThrow: SireMol::missing_segment\nThrow: SireMol::duplicate_segment\nThrow: SireMol::invalid_index\n" );
        
        }
        { //::SireMol::AtomStructureEditor::residue
        
            typedef ::SireMol::ResStructureEditor ( ::SireMol::AtomStructureEditor::*residue_function_type)(  ) ;
            residue_function_type residue_function_value( &::SireMol::AtomStructureEditor::residue );
            
            AtomStructureEditor_exposer.def( 
                "residue"
                , residue_function_value
                , bp::release_gil_policy()
                , "Return the editor for the residue that contains this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::segment
        
            typedef ::SireMol::SegStructureEditor ( ::SireMol::AtomStructureEditor::*segment_function_type)(  ) ;
            segment_function_type segment_function_value( &::SireMol::AtomStructureEditor::segment );
            
            AtomStructureEditor_exposer.def( 
                "segment"
                , segment_function_value
                , bp::release_gil_policy()
                , "Return the editor for the segment that contain this atom" );
        
        }
        { //::SireMol::AtomStructureEditor::selectedAll
        
            typedef bool ( ::SireMol::AtomStructureEditor::*selectedAll_function_type)(  ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomStructureEditor::selectedAll );
            
            AtomStructureEditor_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , bp::release_gil_policy()
                , "Return whether or not this contains the whole molecule" );
        
        }
        { //::SireMol::AtomStructureEditor::toString
        
            typedef ::QString ( ::SireMol::AtomStructureEditor::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::AtomStructureEditor::toString );
            
            AtomStructureEditor_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this editor" );
        
        }
        { //::SireMol::AtomStructureEditor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomStructureEditor::typeName );
            
            AtomStructureEditor_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomStructureEditor::what
        
            typedef char const * ( ::SireMol::AtomStructureEditor::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::AtomStructureEditor::what );
            
            AtomStructureEditor_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomStructureEditor_exposer.staticmethod( "typeName" );
        AtomStructureEditor_exposer.def( "__copy__", &__copy__);
        AtomStructureEditor_exposer.def( "__deepcopy__", &__copy__);
        AtomStructureEditor_exposer.def( "clone", &__copy__);
        AtomStructureEditor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomStructureEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomStructureEditor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomStructureEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomStructureEditor_exposer.def_pickle(sire_pickle_suite< ::SireMol::AtomStructureEditor >());
        AtomStructureEditor_exposer.def( "__str__", &__str__< ::SireMol::AtomStructureEditor > );
        AtomStructureEditor_exposer.def( "__repr__", &__str__< ::SireMol::AtomStructureEditor > );
    }

}
