// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Stereoscopy.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "stereoscopy.h"

#include <QDebug>

#include "stereoscopy.h"

SireMol::Stereoscopy __copy__(const SireMol::Stereoscopy &other){ return SireMol::Stereoscopy(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Stereoscopy_class(){

    { //::SireMol::Stereoscopy
        typedef bp::class_< SireMol::Stereoscopy, bp::bases< SireBase::Property > > Stereoscopy_exposer_t;
        Stereoscopy_exposer_t Stereoscopy_exposer = Stereoscopy_exposer_t( "Stereoscopy", "This class represents a bond type (e.g. single, double etc.)\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor (default is an undefined stereoscopy)") );
        bp::scope Stereoscopy_scope( Stereoscopy_exposer );
        Stereoscopy_exposer.def( bp::init< QString const & >(( bp::arg("s") ), "Construct from the passed string") );
        Stereoscopy_exposer.def( bp::init< int >(( bp::arg("sdf_value") ), "Construct from the the passed number") );
        Stereoscopy_exposer.def( bp::init< SireMol::Stereoscopy const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::Stereoscopy::down
        
            typedef ::SireMol::Stereoscopy ( *down_function_type )(  );
            down_function_type down_function_value( &::SireMol::Stereoscopy::down );
            
            Stereoscopy_exposer.def( 
                "down"
                , down_function_value
                , "Return a down Stereoscopy" );
        
        }
        { //::SireMol::Stereoscopy::isDefined
        
            typedef bool ( ::SireMol::Stereoscopy::*isDefined_function_type)(  ) const;
            isDefined_function_type isDefined_function_value( &::SireMol::Stereoscopy::isDefined );
            
            Stereoscopy_exposer.def( 
                "isDefined"
                , isDefined_function_value
                , "Return whether or not the stereoscopy is defined" );
        
        }
        { //::SireMol::Stereoscopy::isDown
        
            typedef bool ( ::SireMol::Stereoscopy::*isDown_function_type)(  ) const;
            isDown_function_type isDown_function_value( &::SireMol::Stereoscopy::isDown );
            
            Stereoscopy_exposer.def( 
                "isDown"
                , isDown_function_value
                , "Return whether or not this is a down bond" );
        
        }
        { //::SireMol::Stereoscopy::isNotStereo
        
            typedef bool ( ::SireMol::Stereoscopy::*isNotStereo_function_type)(  ) const;
            isNotStereo_function_type isNotStereo_function_value( &::SireMol::Stereoscopy::isNotStereo );
            
            Stereoscopy_exposer.def( 
                "isNotStereo"
                , isNotStereo_function_value
                , "Return whether or not this is a not stereo bond" );
        
        }
        { //::SireMol::Stereoscopy::isUp
        
            typedef bool ( ::SireMol::Stereoscopy::*isUp_function_type)(  ) const;
            isUp_function_type isUp_function_value( &::SireMol::Stereoscopy::isUp );
            
            Stereoscopy_exposer.def( 
                "isUp"
                , isUp_function_value
                , "Return whether or not this is an up bond" );
        
        }
        { //::SireMol::Stereoscopy::notStereo
        
            typedef ::SireMol::Stereoscopy ( *notStereo_function_type )(  );
            notStereo_function_type notStereo_function_value( &::SireMol::Stereoscopy::notStereo );
            
            Stereoscopy_exposer.def( 
                "notStereo"
                , notStereo_function_value
                , "Return a not stereo Stereoscopy" );
        
        }
        Stereoscopy_exposer.def( bp::self != bp::self );
        { //::SireMol::Stereoscopy::operator=
        
            typedef ::SireMol::Stereoscopy & ( ::SireMol::Stereoscopy::*assign_function_type)( ::SireMol::Stereoscopy const & ) ;
            assign_function_type assign_function_value( &::SireMol::Stereoscopy::operator= );
            
            Stereoscopy_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Stereoscopy_exposer.def( bp::self == bp::self );
        { //::SireMol::Stereoscopy::sdfValue
        
            typedef int ( ::SireMol::Stereoscopy::*sdfValue_function_type)(  ) const;
            sdfValue_function_type sdfValue_function_value( &::SireMol::Stereoscopy::sdfValue );
            
            Stereoscopy_exposer.def( 
                "sdfValue"
                , sdfValue_function_value
                , "Return the SDF-format value for this bond. This returns\n0 if the stereoscopy is undefined\n" );
        
        }
        { //::SireMol::Stereoscopy::toString
        
            typedef ::QString ( ::SireMol::Stereoscopy::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::Stereoscopy::toString );
            
            Stereoscopy_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireMol::Stereoscopy::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::Stereoscopy::typeName );
            
            Stereoscopy_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMol::Stereoscopy::undefined
        
            typedef ::SireMol::Stereoscopy ( *undefined_function_type )(  );
            undefined_function_type undefined_function_value( &::SireMol::Stereoscopy::undefined );
            
            Stereoscopy_exposer.def( 
                "undefined"
                , undefined_function_value
                , "Return an undefined Stereoscopy" );
        
        }
        { //::SireMol::Stereoscopy::up
        
            typedef ::SireMol::Stereoscopy ( *up_function_type )(  );
            up_function_type up_function_value( &::SireMol::Stereoscopy::up );
            
            Stereoscopy_exposer.def( 
                "up"
                , up_function_value
                , "Return an up Stereoscopy" );
        
        }
        { //::SireMol::Stereoscopy::value
        
            typedef int ( ::SireMol::Stereoscopy::*value_function_type)(  ) const;
            value_function_type value_function_value( &::SireMol::Stereoscopy::value );
            
            Stereoscopy_exposer.def( 
                "value"
                , value_function_value
                , "Return the stereo type (uses SDF values, e.g. 0 is not stereo,\n1 is up, 6 is down. We have added -1 to mean undefined)\n" );
        
        }
        Stereoscopy_exposer.staticmethod( "down" );
        Stereoscopy_exposer.staticmethod( "notStereo" );
        Stereoscopy_exposer.staticmethod( "typeName" );
        Stereoscopy_exposer.staticmethod( "undefined" );
        Stereoscopy_exposer.staticmethod( "up" );
        Stereoscopy_exposer.def( "__copy__", &__copy__);
        Stereoscopy_exposer.def( "__deepcopy__", &__copy__);
        Stereoscopy_exposer.def( "clone", &__copy__);
        Stereoscopy_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::Stereoscopy >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Stereoscopy_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::Stereoscopy >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Stereoscopy_exposer.def_pickle(sire_pickle_suite< ::SireMol::Stereoscopy >());
        Stereoscopy_exposer.def( "__str__", &__str__< ::SireMol::Stereoscopy > );
        Stereoscopy_exposer.def( "__repr__", &__str__< ::SireMol::Stereoscopy > );
    }

}
