// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomNum.pypp.hpp"

namespace bp = boost::python;

#include "atomnum.h"

#include "atomnum.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "atomidentifier.h"

#include "chain.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "groupatomids.h"

#include "molatomid.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molinfo.h"

#include "mover.hpp"

#include "residue.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include "withatoms.h"

#include <QDebug>

#include "atomid.h"

SireMol::AtomNum __copy__(const SireMol::AtomNum &other){ return SireMol::AtomNum(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomNum_class(){

    { //::SireMol::AtomNum
        typedef bp::class_< SireMol::AtomNum, bp::bases< SireMol::AtomID, SireID::ID, SireID::Number > > AtomNum_exposer_t;
        AtomNum_exposer_t AtomNum_exposer = AtomNum_exposer_t( "AtomNum", "This ID number is used to identify an atom by the user-supplied\natom number (this is typically the number assigned to the\natom from the PDB or other coordinate file)\n\nBe careful not to confuse this with AtomID, which is the\nindex of the atom in the residue or CutGroup (e.g. the\nfifth atom in the residue would have AtomID 4 but has\nwhatever AtomNum the user supplied.\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope AtomNum_scope( AtomNum_exposer );
        AtomNum_exposer.def( bp::init< quint32 >(( bp::arg("num") ), "") );
        AtomNum_exposer.def( bp::init< SireMol::AtomNum const & >(( bp::arg("other") ), "") );
        { //::SireMol::AtomNum::hash
        
            typedef ::uint ( ::SireMol::AtomNum::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMol::AtomNum::hash );
            
            AtomNum_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomNum::isNull
        
            typedef bool ( ::SireMol::AtomNum::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMol::AtomNum::isNull );
            
            AtomNum_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomNum::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::AtomNum::*map_function_type)( ::SireMol::MolInfo const & ) const;
            map_function_type map_function_value( &::SireMol::AtomNum::map );
            
            AtomNum_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molinfo") )
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomNum_exposer.def( bp::self != bp::self );
        AtomNum_exposer.def( bp::self < bp::self );
        AtomNum_exposer.def( bp::self <= bp::self );
        { //::SireMol::AtomNum::operator=
        
            typedef ::SireMol::AtomNum & ( ::SireMol::AtomNum::*assign_function_type)( ::SireMol::AtomNum const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomNum::operator= );
            
            AtomNum_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AtomNum_exposer.def( bp::self == bp::other< SireID::ID >() );
        AtomNum_exposer.def( bp::self == bp::self );
        AtomNum_exposer.def( bp::self > bp::self );
        AtomNum_exposer.def( bp::self >= bp::self );
        { //::SireMol::AtomNum::toString
        
            typedef ::QString ( ::SireMol::AtomNum::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::AtomNum::toString );
            
            AtomNum_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomNum::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomNum::typeName );
            
            AtomNum_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomNum::what
        
            typedef char const * ( ::SireMol::AtomNum::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::AtomNum::what );
            
            AtomNum_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomNum_exposer.staticmethod( "typeName" );
        AtomNum_exposer.def( "__copy__", &__copy__);
        AtomNum_exposer.def( "__deepcopy__", &__copy__);
        AtomNum_exposer.def( "clone", &__copy__);
        AtomNum_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomNum >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomNum_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomNum >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomNum_exposer.def_pickle(sire_pickle_suite< ::SireMol::AtomNum >());
        AtomNum_exposer.def( "__str__", &__str__< ::SireMol::AtomNum > );
        AtomNum_exposer.def( "__repr__", &__str__< ::SireMol::AtomNum > );
        AtomNum_exposer.def( "__hash__", &::SireMol::AtomNum::hash );
    }

}
