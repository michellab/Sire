// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MolGroupsBase.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/slice.h"

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "cgid.h"

#include "chain.h"

#include "chainid.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "mgidx.h"

#include "mgname.h"

#include "mgnum.h"

#include "molecule.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molidx.h"

#include "molname.h"

#include "molnum.h"

#include "mover.hpp"

#include "partialmolecule.h"

#include "resid.h"

#include "residue.h"

#include "segid.h"

#include "segment.h"

#include "select.h"

#include "selector.hpp"

#include "tostring.h"

#include "viewsofmol.h"

#include <QDebug>

#include <QMutex>

#include "moleculegroups.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_MolGroupsBase_class(){

    { //::SireMol::MolGroupsBase
        typedef bp::class_< SireMol::MolGroupsBase, bp::bases< SireBase::Property >, boost::noncopyable > MolGroupsBase_exposer_t;
        MolGroupsBase_exposer_t MolGroupsBase_exposer = MolGroupsBase_exposer_t( "MolGroupsBase", "This is the base class of all MoleculeGroups objects.\nThese are containers for MoleculeGroup objects, thereby\nallowing lots of MoleculeGroup objects to be collected\ntogether and indexed (e.g. so that you can find all\nCA atoms in the proteins group). This is the virtual\nbase class of the hierarchy - see MolGroups for a simple\nconcrete instantiation.\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope MolGroupsBase_scope( MolGroupsBase_exposer );
        { //::SireMol::MolGroupsBase::accept
        
            typedef void ( ::SireMol::MolGroupsBase::*accept_function_type)(  ) ;
            accept_function_type accept_function_value( &::SireMol::MolGroupsBase::accept );
            
            MolGroupsBase_exposer.def( 
                "accept"
                , accept_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type)( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type)( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type)( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type)( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type)( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type)( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type)( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type)( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type)( ::SireMol::MolNum ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Assert that this set contains at least one atom of the\nmolecule with number molnum\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type)( ::SireMol::MolID const & ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Assert that this set contains at least one atom of any\nmolecule that is identified by the ID molid\nThrow: SireMol::missing_molecule\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type)( ::SireMol::MGNum ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Assert that this contains the molecule group with number mgnum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type)( ::SireMol::MGID const & ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Assert that this contains at least one molecule group that\nis identified by the ID mgid\nThrow: SireMol:missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return all of the views of the molecule with number molnum\nthat are contained in this set of groups. Note that if the\nsame view appears in multiple groups, then it will be returned\nmultiple times in the returned set of views\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MGIdx ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return a const reference to the group at index mgidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MGName const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return a const reference to the group in this set\ncalled mgname\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MGID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return a const reference to the group in this set that\nis identified by mgid\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MolNum ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Return all of the views of the molecule with number molnum\nthat are contained in this set of groups. Note that if the\nsame view appears in multiple groups, then it will be returned\nmultiple times in the returned set of views\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::MolID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return all of the views of the molecule identified by molid\nthat are contained in this set of groups. Note that if the\nsame view appears in multiple groups, then it will be returned\nmultiple times in the returned set of views\nThrow: SireMol::missing_molecule\nThrow: SireMol::duplicate_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::SegID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the segment from this set that matches the ID segid.\nThis segment must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_segment\nThrow: SireMol::duplicate_segment\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::ChainID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the chain from this set that matches the ID chainid.\nThis chain must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_chain\nThrow: SireMol::duplicate_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::ResID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the residue from this set that matches the ID resid.\nThis residue must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_residue\nThrow: SireMol::duplicate_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::CGID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the CutGroup from this set that matches the ID cgid.\nThis CutGroup must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_cutgroup\nThrow: SireMol::duplicate_cutgroup\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*at_function_type)( ::SireMol::AtomID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the atom from this set that matches the ID atomid.\nThis atom must be contained in one of the groups in this set.\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::atom
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*atom_function_type)( ::SireMol::AtomID const & ) const;
            atom_function_type atom_function_value( &::SireMol::MolGroupsBase::atom );
            
            MolGroupsBase_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the atom that matches the ID atomid\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::atoms
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::MolGroupsBase::*atoms_function_type)( ::SireMol::AtomID const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::MolGroupsBase::atoms );
            
            MolGroupsBase_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return all of the atoms from this set that match the ID atomid.\nThe returned atoms are arranged by molecule, and only one copy\nof each atom is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::chain
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*chain_function_type)( ::SireMol::ChainID const & ) const;
            chain_function_type chain_function_value( &::SireMol::MolGroupsBase::chain );
            
            MolGroupsBase_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the chain that matches the ID chainid\nThrow: SireMol::missing_chain\nThrow: SireMol::duplicate_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::chains
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Chain > > ( ::SireMol::MolGroupsBase::*chains_function_type)( ::SireMol::ChainID const & ) const;
            chains_function_type chains_function_value( &::SireMol::MolGroupsBase::chains );
            
            MolGroupsBase_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return all of the chains from this set that match the ID chainid.\nThe returned chains are arranged by molecule, and only one copy\nof each chain is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::SireMol::MGNum ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Return whether or not this set contains the group with number mgnum" );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::SireMol::MolNum ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Return whether any of the groups contain any view of the molecule\nwith number molnum" );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::QList< SireMol::MolNum > const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnums") )
                , bp::release_gil_policy()
                , "Return whether any of the groups contains any of the molecules whose\nnumbers are in molnums" );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::SireMol::MoleculeView const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "Return whether or not any of the groups contains the view molview" );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::SireMol::ViewsOfMol const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "Return whether or not this set contains all of the views of\nthe molecule in molviews. The views can be contained in\nmultiple groups." );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type)( ::SireMol::Molecules const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Return whether or not this set of groups contains all of the views\nof all of the molecules in molecules. These views can be spread\nover lots of groups" );
        
        }
        { //::SireMol::MolGroupsBase::count
        
            typedef int ( ::SireMol::MolGroupsBase::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMol::MolGroupsBase::count );
            
            MolGroupsBase_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "Return the total number of groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*cutGroup_function_type)( ::SireMol::CGID const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::MolGroupsBase::cutGroup );
            
            MolGroupsBase_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the CutGroup that matches the ID cgid\nThrow: SireMol::missing_cutgroup\nThrow: SireMol::duplicate_cutgroup\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::cutGroups
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::CutGroup > > ( ::SireMol::MolGroupsBase::*cutGroups_function_type)( ::SireMol::CGID const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::MolGroupsBase::cutGroups );
            
            MolGroupsBase_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return all of the CutGroups from this set that match the ID cgid.\nThe returned CutGroups are arranged by molecule, and only one copy\nof each CutGroup is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_cutgroup\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type)( ::SireMol::MGNum ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Get the number of the molecule group whose number is mgnum.\nThis is an obvious function, only provided as a shortcut\nto prevent the MGID function being called if an MGNum is passed.\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type)( ::SireMol::MGIdx ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgidx") )
                , bp::release_gil_policy()
                , "Return the number of the group at index mgidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type)( ::SireMol::MGName const & ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgname") )
                , bp::release_gil_policy()
                , "Return the number of the molecule group that is called mgname.\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type)( ::SireMol::MGID const & ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Return the number of the groups that matches mgid\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type)( ::SireMol::MolNum ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Simple function that just checks if a molecule with number\nmolnum is in the set, and returns it. This shortcuts\nthe getMoleculeNumber(const MolID&) function in the case\nof MolNums\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type)( ::SireMol::MolIdx ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molidx") )
                , bp::release_gil_policy()
                , "Return the number of the molecule at index molidx in\nthis set\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type)( ::SireMol::MolName const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molname") )
                , bp::release_gil_policy()
                , "Return the number of the molecule called molname from this set.\nThrow: SireMol::missing_molecule\nThrow: SireMol::duplicate_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type)( ::SireMol::MolID const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return the number of the molecule that matches the ID molid\nThrow: SireMol::missing_molecule\nThrow: SireMol::duplicate_molecule\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumbers
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*getMoleculeNumbers_function_type)(  ) const;
            getMoleculeNumbers_function_type getMoleculeNumbers_function_value( &::SireMol::MolGroupsBase::getMoleculeNumbers );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumbers"
                , getMoleculeNumbers_function_value
                , bp::release_gil_policy()
                , "Return the list of molecule numbers in molidx order" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MolGroupsBase::*getMoleculeVersion_function_type)( ::SireMol::MolNum ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MolGroupsBase::getMoleculeVersion );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Return the version number of the molecule with number molnum\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MolGroupsBase::*getMoleculeVersion_function_type)( ::SireMol::MolID const & ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MolGroupsBase::getMoleculeVersion );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return the version number of the molecule with ID molid\nThrow: SireMol::missing_molecule\nThrow: SireMol::duplicate_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type)( ::SireMol::MGNum ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group that has number mgnum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type)( ::SireMol::MGName const & ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group that has name mgname\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type)( ::SireMol::MGIdx ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group at index mgidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type)( ::SireMol::MGID const & ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group that matches the ID mgid\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::groupNames
        
            typedef ::QList< SireMol::MGName > ( ::SireMol::MolGroupsBase::*groupNames_function_type)(  ) const;
            groupNames_function_type groupNames_function_value( &::SireMol::MolGroupsBase::groupNames );
            
            MolGroupsBase_exposer.def( 
                "groupNames"
                , groupNames_function_value
                , bp::release_gil_policy()
                , "Return a list of the names of all of the groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::groupNumbers
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*groupNumbers_function_type)(  ) const;
            groupNumbers_function_type groupNumbers_function_value( &::SireMol::MolGroupsBase::groupNumbers );
            
            MolGroupsBase_exposer.def( 
                "groupNumbers"
                , groupNumbers_function_value
                , bp::release_gil_policy()
                , "Return a list of the numbers of all of the groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type)(  ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , bp::release_gil_policy()
                , "Return a list of all of the molecule groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type)( ::SireMol::MGNum ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Obvious shortcut for groups(const MGID&)\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type)( ::SireMol::MGIdx ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgidx") )
                , bp::release_gil_policy()
                , "Obvious shortcut for groups(const MGID&)\nThrow: SireMol::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type)( ::SireMol::MGName const & ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgname") )
                , bp::release_gil_policy()
                , "Return all of the groups called mgname\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type)( ::SireMol::MGID const & ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Return all of the groups that match the ID mgid\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::groupsContaining
        
            typedef ::QList< SireMol::MGNum > const & ( ::SireMol::MolGroupsBase::*groupsContaining_function_type)( ::SireMol::MolNum ) const;
            groupsContaining_function_type groupsContaining_function_value( &::SireMol::MolGroupsBase::groupsContaining );
            
            MolGroupsBase_exposer.def( 
                "groupsContaining"
                , groupsContaining_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the list of molecule groups numbers of groups that\ncontain at least one atom of the molecule with number molnum\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::intersects
        
            typedef bool ( ::SireMol::MolGroupsBase::*intersects_function_type)( ::SireMol::MoleculeView const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MolGroupsBase::intersects );
            
            MolGroupsBase_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "Return whether or not any of the groups in this set contain any\nof the atoms of the view of the molecule in molview" );
        
        }
        { //::SireMol::MolGroupsBase::intersects
        
            typedef bool ( ::SireMol::MolGroupsBase::*intersects_function_type)( ::SireMol::Molecules const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MolGroupsBase::intersects );
            
            MolGroupsBase_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "Return whether any of the groups in this set contain any of the\natoms of any of the views of any of the molecules in molecules" );
        
        }
        { //::SireMol::MolGroupsBase::isEmpty
        
            typedef bool ( ::SireMol::MolGroupsBase::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::MolGroupsBase::isEmpty );
            
            MolGroupsBase_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "Return whether or not this set is empty (contains no groups)" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MGNum ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Return the list of numbers of groups that have the number mgnum.\nThis is a simple and obvious function that acts as a shortcut\npreventing map(const MGID&) being called for an MGNum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MGIdx ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgidx") )
                , bp::release_gil_policy()
                , "Return the list (of only one) molecule group that is at\nindex mgidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MGName const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgname") )
                , bp::release_gil_policy()
                , "Return the numbers of all groups in this set that are called\nmgname\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MGID const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Map the molecule group ID mgid to the list of molecule\ngroup numbers of the groups that match this ID in this set.\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MolNum ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Simple function that provides a shortcut for map(const MolID&)\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MolIdx ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molidx") )
                , bp::release_gil_policy()
                , "Return the number of the molecule at index molidx\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MolName const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molname") )
                , bp::release_gil_policy()
                , "Return the numbers of all of the molecules that have the\nname molname\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type)( ::SireMol::MolID const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return the numbers of all molecules that match the ID molid\nThrow: SireMol::missing_molecule\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::mgIdx
        
            typedef ::SireMol::MGIdx ( ::SireMol::MolGroupsBase::*mgIdx_function_type)( ::SireMol::MGNum ) const;
            mgIdx_function_type mgIdx_function_value( &::SireMol::MolGroupsBase::mgIdx );
            
            MolGroupsBase_exposer.def( 
                "mgIdx"
                , mgIdx_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Return the index of the group with number mgnum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::mgNames
        
            typedef ::QList< SireMol::MGName > ( ::SireMol::MolGroupsBase::*mgNames_function_type)(  ) const;
            mgNames_function_type mgNames_function_value( &::SireMol::MolGroupsBase::mgNames );
            
            MolGroupsBase_exposer.def( 
                "mgNames"
                , mgNames_function_value
                , bp::release_gil_policy()
                , "Return the names of all molecule groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::mgNums
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*mgNums_function_type)(  ) const;
            mgNums_function_type mgNums_function_value( &::SireMol::MolGroupsBase::mgNums );
            
            MolGroupsBase_exposer.def( 
                "mgNums"
                , mgNums_function_value
                , bp::release_gil_policy()
                , "Return the numbers of all molecule groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::molNums
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*molNums_function_type)(  ) const;
            molNums_function_type molNums_function_value( &::SireMol::MolGroupsBase::molNums );
            
            MolGroupsBase_exposer.def( 
                "molNums"
                , molNums_function_value
                , bp::release_gil_policy()
                , "Return the list of molecule numbers in molidx order" );
        
        }
        { //::SireMol::MolGroupsBase::molecule
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*molecule_function_type)( ::SireMol::MolNum ) const;
            molecule_function_type molecule_function_value( &::SireMol::MolGroupsBase::molecule );
            
            MolGroupsBase_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Return all of the views of the molecule that has number molnum\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::molecule
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*molecule_function_type)( ::SireMol::MolID const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::MolGroupsBase::molecule );
            
            MolGroupsBase_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return all of the views of the molecule that matches molid\nThrow: SireMol::missing_molecule\nThrow: SireMol::duplicate_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*molecules_function_type)( ::SireMol::MolNum ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Obvious shortcut for molecules(const MolID&)\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*molecules_function_type)( ::SireMol::MolID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return all of the molecules that match the ID molid\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::SireMol::Molecules ( ::SireMol::MolGroupsBase::*molecules_function_type)(  ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , bp::release_gil_policy()
                , "Return the complete set of all molecules in this group. If a view of a\nmolecule appears multiple times in this set then multiple copies of\nthat view will be placed into the returned Molecules object.\nNote that this is a potentially very slow operation" );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::SireMol::Molecules ( ::SireMol::MolGroupsBase::*molecules_function_type)( ::SireMol::MGID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Return the complete set of all molecules in the group(s) that\nmatch the ID mgid. If a view of a molecule appears multiple times\nin this set then multiple copies of that view will be placed into the\nreturned molecules object.\nNote that this is potentially a very slow function\n" );
        
        }
        { //::SireMol::MolGroupsBase::nAtoms
        
            typedef int ( ::SireMol::MolGroupsBase::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::MolGroupsBase::nAtoms );
            
            MolGroupsBase_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , bp::release_gil_policy()
                , "Return the total number of atoms in this groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nChains
        
            typedef int ( ::SireMol::MolGroupsBase::*nChains_function_type)(  ) const;
            nChains_function_type nChains_function_value( &::SireMol::MolGroupsBase::nChains );
            
            MolGroupsBase_exposer.def( 
                "nChains"
                , nChains_function_value
                , bp::release_gil_policy()
                , "Return the total number of chains in this groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nGroups
        
            typedef int ( ::SireMol::MolGroupsBase::*nGroups_function_type)(  ) const;
            nGroups_function_type nGroups_function_value( &::SireMol::MolGroupsBase::nGroups );
            
            MolGroupsBase_exposer.def( 
                "nGroups"
                , nGroups_function_value
                , bp::release_gil_policy()
                , "Return the total number of groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nMolecules
        
            typedef int ( ::SireMol::MolGroupsBase::*nMolecules_function_type)(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireMol::MolGroupsBase::nMolecules );
            
            MolGroupsBase_exposer.def( 
                "nMolecules"
                , nMolecules_function_value
                , bp::release_gil_policy()
                , "Return the total number of molecules in the groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nResidues
        
            typedef int ( ::SireMol::MolGroupsBase::*nResidues_function_type)(  ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::MolGroupsBase::nResidues );
            
            MolGroupsBase_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , bp::release_gil_policy()
                , "Return the total number of residues in this groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nSegments
        
            typedef int ( ::SireMol::MolGroupsBase::*nSegments_function_type)(  ) const;
            nSegments_function_type nSegments_function_value( &::SireMol::MolGroupsBase::nSegments );
            
            MolGroupsBase_exposer.def( 
                "nSegments"
                , nSegments_function_value
                , bp::release_gil_policy()
                , "Return the total number of segments in this groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::nViews
        
            typedef int ( ::SireMol::MolGroupsBase::*nViews_function_type)(  ) const;
            nViews_function_type nViews_function_value( &::SireMol::MolGroupsBase::nViews );
            
            MolGroupsBase_exposer.def( 
                "nViews"
                , nViews_function_value
                , bp::release_gil_policy()
                , "Return the total number of views of molecules in the groups in this set.\nNote that if a view appears multiple times, then it will be counted\nmultiple times" );
        
        }
        { //::SireMol::MolGroupsBase::nViews
        
            typedef int ( ::SireMol::MolGroupsBase::*nViews_function_type)( ::SireMol::MolNum ) const;
            nViews_function_type nViews_function_value( &::SireMol::MolGroupsBase::nViews );
            
            MolGroupsBase_exposer.def( 
                "nViews"
                , nViews_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Return the total number of views of the molecule with number\nmolnum in the groups in this set. If a view appears multiple\ntimes then it will be counted multiple times.\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::needsAccepting
        
            typedef bool ( ::SireMol::MolGroupsBase::*needsAccepting_function_type)(  ) const;
            needsAccepting_function_type needsAccepting_function_value( &::SireMol::MolGroupsBase::needsAccepting );
            
            MolGroupsBase_exposer.def( 
                "needsAccepting"
                , needsAccepting_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::null
        
            typedef ::SireMol::MoleculeGroups const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::MolGroupsBase::null );
            
            MolGroupsBase_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MGNum ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MGName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MGIdx ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MGID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::QString const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("name") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MolNum ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molnum") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::MolID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::SegID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("segid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::ChainID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("chainid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::ResID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("resid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::CGID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("cgid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireMol::AtomID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("atomid") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeView > > ( ::SireMol::MolGroupsBase::*__getitem___function_type)( ::SireBase::Slice const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("slice") )
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Remove all of the views of all of the molecules in molgroup\nfrom this set. Note that this does not remove the actual molecule\ngroup. If you want to remove the group, then use the\nMolGroupsBase::remove(MGNum) function. Note that this also\nonly removes the first copy of any duplicated views." );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MoleculeView const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "Remove the view of the molecule in molview from all of\nthe groups in this set. This does nothing if this exact\nview is not contained by any of the groups. If a group has\nmultiple copies of this view, then this removes only\nthe first copy." );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::ViewsOfMol const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "Remove the views of the molecule in molviews from all of\nthe groups in this set. This does nothing if none of these\nviews are contained by any of the groups. If a group contains\nmultiple copies of a view, then only the first copy is removed." );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::Molecules const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Remove all of the views of all of the molecules in molecules\nfrom all of the groups in this set. If a group contains multiple\ncopies of a view then only the first copy is removed" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MolNum ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Completely remove all views of the molecule with number\nmolnum from all of the groups from this set. This\ndoes nothing if there are no views of this molecule\nin any of the groups" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::QSet< SireMol::MolNum > const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums") )
                , bp::release_gil_policy()
                , "Completely remove all views of the molecules whose numbers\nare in molnums from all of the groups in this set. This\ndoes nothing if there are no views of these molecules in\nany of the groups" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MolID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Remove all molecules that match molid from all groups" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Remove all groups (and molecules) that match the ID mgid" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::SireMol::MolNum,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type)( ::QSet< SireMol::MolNum > const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::MoleculeView const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "Remove all copies of the view of the molecule in molview\nfrom all of the groups in this set. This removes all copies\nof a view (even duplicate copies)" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::ViewsOfMol const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "Remove all copies of the views of the molecule in molviews\nfrom all of the groups in this set. This removes all\ncopies of the views (even duplicate copies)" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::Molecules const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Remove all copies of all views of all molecules in molecules\nfrom all of the groups in this set. This removes all copies\nof the views (even duplicate copies)" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::MoleculeGroup const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Remove all copies of all views of all molecules in the\ngroup molgroup from this set. Note that this removes\nthe molecules, not the group. Note also that all copies\nof the views are removed (even duplicate copies)" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Remove all copies of the views of the molecule in molviews\nfrom all of the groups in this set. This removes all\ncopies of the views (even duplicate copies)" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)(  ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , bp::release_gil_policy()
                , "Completely clear all of the groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type)( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::residue
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*residue_function_type)( ::SireMol::ResID const & ) const;
            residue_function_type residue_function_value( &::SireMol::MolGroupsBase::residue );
            
            MolGroupsBase_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the residue that matches the ID resid\nThrow: SireMol::missing_residue\nThrow: SireMol::duplicate_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::residues
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Residue > > ( ::SireMol::MolGroupsBase::*residues_function_type)( ::SireMol::ResID const & ) const;
            residues_function_type residues_function_value( &::SireMol::MolGroupsBase::residues );
            
            MolGroupsBase_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return all of the residues from this set that match the ID resid.\nThe returned residues are arranged by molecule, and only one copy\nof each residue is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::search
        
            typedef ::SireMol::SelectResult ( ::SireMol::MolGroupsBase::*search_function_type)( ::QString const & ) const;
            search_function_type search_function_value( &::SireMol::MolGroupsBase::search );
            
            MolGroupsBase_exposer.def( 
                "search"
                , search_function_value
                , ( bp::arg("search_string") )
                , bp::release_gil_policy()
                , "Return the result of searching this object for search_string" );
        
        }
        { //::SireMol::MolGroupsBase::segment
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*segment_function_type)( ::SireMol::SegID const & ) const;
            segment_function_type segment_function_value( &::SireMol::MolGroupsBase::segment );
            
            MolGroupsBase_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the segment that matches the ID segid\nThrow: SireMol::missing_segment\nThrow: SireMol::duplicate_segment\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::segments
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Segment > > ( ::SireMol::MolGroupsBase::*segments_function_type)( ::SireMol::SegID const & ) const;
            segments_function_type segments_function_value( &::SireMol::MolGroupsBase::segments );
            
            MolGroupsBase_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return all of the segments from this set that match the ID segid.\nThe returned segments are arranged by molecule, and only one copy\nof each segment is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_segment\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::MGID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the MoleculeGroup that matches the ID mgid\nThrow: SireMol::missing_group\nThrow: SireMol::duplicate_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::MolID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return all of the views of the molecule with number molnum\nthat are contained in this set of groups. Note that if the\nsame view appears in multiple groups, then it will be returned\nmultiple times in the returned set of views\nThrow: SireMol::missing_molecule\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::SegID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return the segment from this set that matches the ID segid.\nThis segment must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_segment\nThrow: SireMol::duplicate_segment\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::ChainID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return the chain from this set that matches the ID chainid.\nThis chain must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_chain\nThrow: SireMol::duplicate_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::ResID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return the residue from this set that matches the ID resid.\nThis residue must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_residue\nThrow: SireMol::duplicate_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::CGID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return the CutGroup from this set that matches the ID cgid.\nThis CutGroup must be wholly contained by one of the groups\nin this set\nThrow: SireMol::missing_cutgroup\nThrow: SireMol::duplicate_cutgroup\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*select_function_type)( ::SireMol::AtomID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return the atom from this set that matches the ID atomid.\nThis atom must be contained in one of the groups in this set.\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)(  ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , bp::release_gil_policy()
                , "Return a list of all of the molecule groups in this set" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::MGNum ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Obvious shortcut for select(const MGID&)\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::MGIdx ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgidx") )
                , bp::release_gil_policy()
                , "Obvious shortcut for select(const MGID&)\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::MGName const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgname") )
                , bp::release_gil_policy()
                , "Return all of the molecule groups that are called mgname\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::MGID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Return all of the molecule groups that match the ID mgid\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::MolID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Return the views of the molecule(s) that match the molecule ID\nmolid. This returns all views of the molecule in the groups,\nand if a view is contained multiple times, then multiple copies\nof that view will be returned.\nThrow: SireMol::missing_molecule\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Segment > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::SegID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "Return all of the segments from this set that match the ID segid.\nThe returned segments are arranged by molecule, and only one copy\nof each segment is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_segment\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Chain > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::ChainID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "Return all of the chains from this set that match the ID chainid.\nThe returned chains are arranged by molecule, and only one copy\nof each chain is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_chain\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Residue > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::ResID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "Return all of the residues from this set that match the ID resid.\nThe returned residues are arranged by molecule, and only one copy\nof each residue is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_residue\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::CutGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::CGID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "Return all of the CutGroups from this set that match the ID cgid.\nThe returned CutGroups are arranged by molecule, and only one copy\nof each CutGroup is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_cutgroup\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::MolGroupsBase::*selectAll_function_type)( ::SireMol::AtomID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "Return all of the atoms from this set that match the ID atomid.\nThe returned atoms are arranged by molecule, and only one copy\nof each atom is returned, regardless of how many times it appears\nin this set.\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type)( ::SireMol::MGID const &,::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type)( ::SireMol::MGID const &,::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type)( ::SireMol::MGID const &,::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type)( ::SireMol::MGID const &,::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MolGroupsBase::typeName );
            
            MolGroupsBase_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type)( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molview"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Synonym for MolGroupsBase::addIfUnique\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type)( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Synonym for MolGroupsBase::addIfUnique\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type)( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Synonym for MolGroupsBase::addIfUnique\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type)( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Synonym for MolGroupsBase::addIfUnique\nThrow: SireMol::missing_group\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type)( ::SireMol::MoleculeData const &,bool ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata"), bp::arg("auto_commit")=(bool)(true) )
                , "Update the copies in this set of the molecule viewed in molview\nto use the same version as molview" );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type)( ::SireMol::MoleculeView const &,bool ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molview"), bp::arg("auto_commit")=(bool)(true) )
                , "Update the copies in this set of the molecule viewed in molview\nto use the same version as molview" );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type)( ::SireMol::Molecules const &,bool ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules"), bp::arg("auto_commit")=(bool)(true) )
                , "Update the copies in this set of the molecule viewed in molview\nto use the same version as molview" );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type)( ::SireMol::MoleculeGroup const &,bool ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup"), bp::arg("auto_commit")=(bool)(true) )
                , "Update the copies in this set of the molecule viewed in molview\nto use the same version as molview" );
        
        }
        MolGroupsBase_exposer.staticmethod( "null" );
        MolGroupsBase_exposer.staticmethod( "typeName" );
        MolGroupsBase_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MolGroupsBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolGroupsBase_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MolGroupsBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolGroupsBase_exposer.def_pickle(sire_pickle_suite< ::SireMol::MolGroupsBase >());
        MolGroupsBase_exposer.def( "__str__", &__str__< ::SireMol::MolGroupsBase > );
        MolGroupsBase_exposer.def( "__repr__", &__str__< ::SireMol::MolGroupsBase > );
        MolGroupsBase_exposer.def( "__len__", &__len_count< ::SireMol::MolGroupsBase > );
    }

}
