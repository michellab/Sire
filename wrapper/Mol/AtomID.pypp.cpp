// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomID.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "atomidentifier.h"

#include "chain.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "groupatomids.h"

#include "molatomid.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molinfo.h"

#include "mover.hpp"

#include "residue.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include "withatoms.h"

#include <QDebug>

#include "atomid.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomID_class(){

    { //::SireMol::AtomID
        typedef bp::class_< SireMol::AtomID, bp::bases< SireID::ID >, boost::noncopyable > AtomID_exposer_t;
        AtomID_exposer_t AtomID_exposer = AtomID_exposer_t( "AtomID", "This is the base class of all identifiers that are used\nto identify an atom\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope AtomID_scope( AtomID_exposer );
        { //::SireMol::AtomID::any
        
            typedef ::SireID::MatchAll< SireMol::AtomID > ( *any_function_type )(  );
            any_function_type any_function_value( &::SireMol::AtomID::any );
            
            AtomID_exposer.def( 
                "any"
                , any_function_value
                , bp::release_gil_policy()
                , "Return an AtomID that matches everything" );
        
        }
        { //::SireMol::AtomID::chains
        
            typedef ::SireMol::ChainsWithAtoms ( ::SireMol::AtomID::*chains_function_type)(  ) const;
            chains_function_type chains_function_value( &::SireMol::AtomID::chains );
            
            AtomID_exposer.def( 
                "chains"
                , chains_function_value
                , bp::release_gil_policy()
                , "Return a Chain ID that matches chains that contain atoms\nthat match this Atom ID" );
        
        }
        { //::SireMol::AtomID::cutGroups
        
            typedef ::SireMol::CGsWithAtoms ( ::SireMol::AtomID::*cutGroups_function_type)(  ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::AtomID::cutGroups );
            
            AtomID_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , bp::release_gil_policy()
                , "Return a CutGroup ID that matches CutGroups that contain atoms\nthat match this Atom ID" );
        
        }
        { //::SireMol::AtomID::fromString
        
            typedef ::SireMol::AtomIdentifier ( *fromString_function_type )( ::QString const & );
            fromString_function_type fromString_function_value( &::SireMol::AtomID::fromString );
            
            AtomID_exposer.def( 
                "fromString"
                , fromString_function_value
                , ( bp::arg("id") )
                , bp::release_gil_policy()
                , "Return an AtomID constructed from the passed string" );
        
        }
        { //::SireMol::AtomID::inverse
        
            typedef ::SireID::InvertMatch< SireMol::AtomID > ( ::SireMol::AtomID::*inverse_function_type)(  ) const;
            inverse_function_type inverse_function_value( &::SireMol::AtomID::inverse );
            
            AtomID_exposer.def( 
                "inverse"
                , inverse_function_value
                , bp::release_gil_policy()
                , "Syntactic sugar for AtomID::invert()" );
        
        }
        { //::SireMol::AtomID::invert
        
            typedef ::SireID::InvertMatch< SireMol::AtomID > ( ::SireMol::AtomID::*invert_function_type)(  ) const;
            invert_function_type invert_function_value( &::SireMol::AtomID::invert );
            
            AtomID_exposer.def( 
                "invert"
                , invert_function_value
                , bp::release_gil_policy()
                , "Return the invert (not) of this match" );
        
        }
        { //::SireMol::AtomID::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::AtomID::*map_function_type)( ::SireMol::MolInfo const & ) const;
            map_function_type map_function_value( &::SireMol::AtomID::map );
            
            AtomID_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molinfo") )
                , bp::release_gil_policy()
                , "Map this ID back to the indicies of the matching atoms in the molecule,\nusing the passed MoleculeInfo to do the mapping" );
        
        }
        { //::SireMol::AtomID::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::AtomID::*map_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            map_function_type map_function_value( &::SireMol::AtomID::map );
            
            AtomID_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molview"), bp::arg("map")=SireBase::PropertyMap() )
                , "Map this AtomID to the atoms in the passed molecule view\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\n" );
        
        }
        AtomID_exposer.def( !bp::self );
        AtomID_exposer.def( bp::self & bp::self );
        AtomID_exposer.def( bp::self & bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::MolID >() );
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type)( ::SireBase::Range const & ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("range") )
                , "" );
        
        }
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type)( ::qint64 ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type)( ::qint64,::qint64 ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("start"), bp::arg("end") )
                , "" );
        
        }
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type)( ::qint64,::qint64,::qint64 ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("start"), bp::arg("end"), bp::arg("increment") )
                , "" );
        
        }
        AtomID_exposer.def( bp::self * bp::self );
        AtomID_exposer.def( bp::self * bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self * bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self * bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self * bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self * bp::other< SireMol::MolID >() );
        AtomID_exposer.def( bp::self + bp::self );
        AtomID_exposer.def( bp::self + bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::MolID >() );
        AtomID_exposer.def( -bp::self );
        AtomID_exposer.def( bp::self - bp::self );
        AtomID_exposer.def( bp::self - bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self - bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self - bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self - bp::other< SireMol::SegID >() );
        { //::SireMol::AtomID::operator[]
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__getitem___function_type)( ::qint64 ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::AtomID::operator[] );
            
            AtomID_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMol::AtomID::operator[]
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__getitem___function_type)( ::SireBase::Range const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::AtomID::operator[] );
            
            AtomID_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("range") )
                , "" );
        
        }
        AtomID_exposer.def( bp::self | bp::self );
        AtomID_exposer.def( bp::self | bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self | bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self | bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self | bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self | bp::other< SireMol::MolID >() );
        { //::SireMol::AtomID::residues
        
            typedef ::SireMol::ResWithAtoms ( ::SireMol::AtomID::*residues_function_type)(  ) const;
            residues_function_type residues_function_value( &::SireMol::AtomID::residues );
            
            AtomID_exposer.def( 
                "residues"
                , residues_function_value
                , bp::release_gil_policy()
                , "Return a Residue ID that matches residues that contain atoms\nthat match this Atom ID" );
        
        }
        { //::SireMol::AtomID::segments
        
            typedef ::SireMol::SegsWithAtoms ( ::SireMol::AtomID::*segments_function_type)(  ) const;
            segments_function_type segments_function_value( &::SireMol::AtomID::segments );
            
            AtomID_exposer.def( 
                "segments"
                , segments_function_value
                , bp::release_gil_policy()
                , "Return a Segment ID that matches segments that contain atoms\nthat match this Atom ID" );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::AtomID::*selectAllFrom_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molview"), bp::arg("map")=SireBase::PropertyMap() )
                , "Select all the atoms from the passed view that match this ID\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\nThrow: SireMol::duplicate_atom\n" );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return all of the atoms from the molecules that match\nthis ID\nThrow: SireMol::missing_atom\n" );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the atoms from the molecule group molgroup that match\nthis ID\nThrow: SireMol::missing_atom\n" );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type)( ::SireMol::MolGroupsBase const &,::SireBase::PropertyMap const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molgroups"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the set of atoms that match this ID in the molecule groups\nset molgroups\nThrow: SireMol::missing_atom\n" );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molview"), bp::arg("map")=SireBase::PropertyMap() )
                , "Select the atom from the passed view that matches this ID\nThrow: SireMol::missing_atom\nThrow: SireError::invalid_index\nThrow: SireMol::duplicate_atom\n" );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the atom from the molecules molecules that matches\nthis ID\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\n" );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the atom from the molecule group molgroup that matches\nthis ID\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\n" );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type)( ::SireMol::MolGroupsBase const &,::SireBase::PropertyMap const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molgroups"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the atom from the molecule groups molgroups that matches\nthis ID\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\n" );
        
        }
        { //::SireMol::AtomID::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomID::typeName );
            
            AtomID_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomID_exposer.staticmethod( "any" );
        AtomID_exposer.staticmethod( "fromString" );
        AtomID_exposer.staticmethod( "typeName" );
        AtomID_exposer.def( "__str__", &__str__< ::SireMol::AtomID > );
        AtomID_exposer.def( "__repr__", &__str__< ::SireMol::AtomID > );
        AtomID_exposer.def( "__hash__", &::SireMol::AtomID::hash );
    }

}
