// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Average.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "accumulator.h"

#include "histogram.h"

#include <QDebug>

#include <QMutex>

#include <cmath>

#include "accumulator.h"

SireMaths::Average __copy__(const SireMaths::Average &other){ return SireMaths::Average(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Average_class(){

    { //::SireMaths::Average
        typedef bp::class_< SireMaths::Average, bp::bases< SireMaths::Accumulator, SireBase::Property > > Average_exposer_t;
        Average_exposer_t Average_exposer = Average_exposer_t( "Average", "This class is used to accumulate the mean average of a collection\nof values\n\nAuthor: Christopher Woods\n", bp::init< >("Construct an empty average") );
        bp::scope Average_scope( Average_exposer );
        Average_exposer.def( bp::init< SireMaths::Average const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMaths::Average::accumulate
        
            typedef void ( ::SireMaths::Average::*accumulate_function_type)( double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Average::accumulate );
            
            Average_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "Accumulate the passed value onto the average" );
        
        }
        { //::SireMaths::Average::average
        
            typedef double ( ::SireMaths::Average::*average_function_type)(  ) const;
            average_function_type average_function_value( &::SireMaths::Average::average );
            
            Average_exposer.def( 
                "average"
                , average_function_value
                , bp::release_gil_policy()
                , "Return the average value" );
        
        }
        { //::SireMaths::Average::clear
        
            typedef void ( ::SireMaths::Average::*clear_function_type)(  ) ;
            clear_function_type clear_function_value( &::SireMaths::Average::clear );
            
            Average_exposer.def( 
                "clear"
                , clear_function_value
                , bp::release_gil_policy()
                , "Completely clear the statistics in this accumulator" );
        
        }
        Average_exposer.def( bp::self != bp::self );
        Average_exposer.def( bp::self + bp::self );
        { //::SireMaths::Average::operator=
        
            typedef ::SireMaths::Average & ( ::SireMaths::Average::*assign_function_type)( ::SireMaths::Average const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Average::operator= );
            
            Average_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Average_exposer.def( bp::self == bp::self );
        { //::SireMaths::Average::toString
        
            typedef ::QString ( ::SireMaths::Average::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Average::toString );
            
            Average_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMaths::Average::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::Average::typeName );
            
            Average_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Average_exposer.staticmethod( "typeName" );
        Average_exposer.def( "__copy__", &__copy__);
        Average_exposer.def( "__deepcopy__", &__copy__);
        Average_exposer.def( "clone", &__copy__);
        Average_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMaths::Average >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Average_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMaths::Average >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Average_exposer.def_pickle(sire_pickle_suite< ::SireMaths::Average >());
        Average_exposer.def( "__str__", &__str__< ::SireMaths::Average > );
        Average_exposer.def( "__repr__", &__str__< ::SireMaths::Average > );
    }

}
