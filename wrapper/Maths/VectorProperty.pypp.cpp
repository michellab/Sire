// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "VectorProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/vectorproperty.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "vectorproperty.h"

#include "vectorproperty.h"

SireMaths::VectorProperty __copy__(const SireMaths::VectorProperty &other){ return SireMaths::VectorProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_VectorProperty_class(){

    { //::SireMaths::VectorProperty
        typedef bp::class_< SireMaths::VectorProperty, bp::bases< SireMaths::Vector, SireBase::Property > > VectorProperty_exposer_t;
        VectorProperty_exposer_t VectorProperty_exposer = VectorProperty_exposer_t( "VectorProperty", "This class provides a simple Property wrapper around a Vector, thereby\nallowing the vector to be stored as a Property, e.g. for the center\nof a molecule\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope VectorProperty_scope( VectorProperty_exposer );
        VectorProperty_exposer.def( bp::init< SireMaths::Vector const & >(( bp::arg("value") ), "Construct a copy of the passed vector") );
        VectorProperty_exposer.def( bp::init< SireMaths::VectorProperty const & >(( bp::arg("value") ), "Copy constructor") );
        VectorProperty_exposer.def( bp::self != bp::self );
        { //::SireMaths::VectorProperty::operator=
        
            typedef ::SireMaths::VectorProperty & ( ::SireMaths::VectorProperty::*assign_function_type)( ::SireMaths::VectorProperty const & ) ;
            assign_function_type assign_function_value( &::SireMaths::VectorProperty::operator= );
            
            VectorProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMaths::VectorProperty::operator=
        
            typedef ::SireMaths::VectorProperty & ( ::SireMaths::VectorProperty::*assign_function_type)( ::SireMaths::Vector const & ) ;
            assign_function_type assign_function_value( &::SireMaths::VectorProperty::operator= );
            
            VectorProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        VectorProperty_exposer.def( bp::self == bp::self );
        { //::SireMaths::VectorProperty::toString
        
            typedef ::QString ( ::SireMaths::VectorProperty::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMaths::VectorProperty::toString );
            
            VectorProperty_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMaths::VectorProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::VectorProperty::typeName );
            
            VectorProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMaths::VectorProperty::value
        
            typedef ::SireMaths::Vector ( ::SireMaths::VectorProperty::*value_function_type)(  ) const;
            value_function_type value_function_value( &::SireMaths::VectorProperty::value );
            
            VectorProperty_exposer.def( 
                "value"
                , value_function_value
                , bp::release_gil_policy()
                , "Return the actual value of the vector" );
        
        }
        { //::SireMaths::VectorProperty::what
        
            typedef char const * ( ::SireMaths::VectorProperty::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMaths::VectorProperty::what );
            
            VectorProperty_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        VectorProperty_exposer.staticmethod( "typeName" );
        VectorProperty_exposer.def( "__copy__", &__copy__);
        VectorProperty_exposer.def( "__deepcopy__", &__copy__);
        VectorProperty_exposer.def( "clone", &__copy__);
        VectorProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMaths::VectorProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VectorProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMaths::VectorProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VectorProperty_exposer.def_pickle(sire_pickle_suite< ::SireMaths::VectorProperty >());
        VectorProperty_exposer.def( "__str__", &__str__< ::SireMaths::VectorProperty > );
        VectorProperty_exposer.def( "__repr__", &__str__< ::SireMaths::VectorProperty > );
        VectorProperty_exposer.def( "__len__", &__len_count< ::SireMaths::VectorProperty > );
        VectorProperty_exposer.def( "__getitem__", &::SireMaths::VectorProperty::getitem );
    }

}
