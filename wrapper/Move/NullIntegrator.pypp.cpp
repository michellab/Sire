// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NullIntegrator.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireFF/forcefields.h"

#include "SireFF/forcetable.h"

#include "SireMaths/rangenerator.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculeview.h"

#include "SireStream/datastream.h"

#include "SireSystem/system.h"

#include "ensemble.h"

#include "integrator.h"

#include "integratorworkspace.h"

#include "integrator.h"

SireMove::NullIntegrator __copy__(const SireMove::NullIntegrator &other){ return SireMove::NullIntegrator(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_NullIntegrator_class(){

    { //::SireMove::NullIntegrator
        typedef bp::class_< SireMove::NullIntegrator, bp::bases< SireMove::Integrator, SireBase::Property > > NullIntegrator_exposer_t;
        NullIntegrator_exposer_t NullIntegrator_exposer = NullIntegrator_exposer_t( "NullIntegrator", "This class holds a null integrator, which doesnt advance anything anywhere\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope NullIntegrator_scope( NullIntegrator_exposer );
        NullIntegrator_exposer.def( bp::init< SireMove::NullIntegrator const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::NullIntegrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::NullIntegrator::*createWorkspace_function_type)( ::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::NullIntegrator::createWorkspace );
            
            NullIntegrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("map")=SireBase::PropertyMap() )
                , "This returns a null workspace" );
        
        }
        { //::SireMove::NullIntegrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::NullIntegrator::*createWorkspace_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::NullIntegrator::createWorkspace );
            
            NullIntegrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )
                , "This returns a null workspace" );
        
        }
        { //::SireMove::NullIntegrator::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::NullIntegrator::*ensemble_function_type)(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::NullIntegrator::ensemble );
            
            NullIntegrator_exposer.def( 
                "ensemble"
                , ensemble_function_value
                , bp::release_gil_policy()
                , "Return the ensemble of this integrator" );
        
        }
        { //::SireMove::NullIntegrator::integrate
        
            typedef void ( ::SireMove::NullIntegrator::*integrate_function_type)( ::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireUnits::Dimension::Time,int,bool ) ;
            integrate_function_type integrate_function_value( &::SireMove::NullIntegrator::integrate );
            
            NullIntegrator_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("timestep"), bp::arg("nmoves"), bp::arg("record_stats") )
                , bp::release_gil_policy()
                , "The null integrator does nothing" );
        
        }
        { //::SireMove::NullIntegrator::isTimeReversible
        
            typedef bool ( ::SireMove::NullIntegrator::*isTimeReversible_function_type)(  ) const;
            isTimeReversible_function_type isTimeReversible_function_value( &::SireMove::NullIntegrator::isTimeReversible );
            
            NullIntegrator_exposer.def( 
                "isTimeReversible"
                , isTimeReversible_function_value
                , bp::release_gil_policy()
                , "Return whether or not this integrator is time-reversible" );
        
        }
        NullIntegrator_exposer.def( bp::self != bp::self );
        { //::SireMove::NullIntegrator::operator=
        
            typedef ::SireMove::NullIntegrator & ( ::SireMove::NullIntegrator::*assign_function_type)( ::SireMove::NullIntegrator const & ) ;
            assign_function_type assign_function_value( &::SireMove::NullIntegrator::operator= );
            
            NullIntegrator_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        NullIntegrator_exposer.def( bp::self == bp::self );
        { //::SireMove::NullIntegrator::toString
        
            typedef ::QString ( ::SireMove::NullIntegrator::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMove::NullIntegrator::toString );
            
            NullIntegrator_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this integrator" );
        
        }
        { //::SireMove::NullIntegrator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::NullIntegrator::typeName );
            
            NullIntegrator_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        NullIntegrator_exposer.staticmethod( "typeName" );
        NullIntegrator_exposer.def( "__copy__", &__copy__);
        NullIntegrator_exposer.def( "__deepcopy__", &__copy__);
        NullIntegrator_exposer.def( "clone", &__copy__);
        NullIntegrator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::NullIntegrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullIntegrator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::NullIntegrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullIntegrator_exposer.def_pickle(sire_pickle_suite< ::SireMove::NullIntegrator >());
        NullIntegrator_exposer.def( "__str__", &__str__< ::SireMove::NullIntegrator > );
        NullIntegrator_exposer.def( "__repr__", &__str__< ::SireMove::NullIntegrator > );
    }

}
