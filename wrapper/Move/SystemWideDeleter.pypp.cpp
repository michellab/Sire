// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SystemWideDeleter.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "moldeleter.h"

#include "uniformsampler.h"

#include "moldeleter.h"

SireMove::SystemWideDeleter __copy__(const SireMove::SystemWideDeleter &other){ return SireMove::SystemWideDeleter(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_SystemWideDeleter_class(){

    { //::SireMove::SystemWideDeleter
        typedef bp::class_< SireMove::SystemWideDeleter, bp::bases< SireMove::MolDeleter, SireBase::Property > > SystemWideDeleter_exposer_t;
        SystemWideDeleter_exposer_t SystemWideDeleter_exposer = SystemWideDeleter_exposer_t( "SystemWideDeleter", "This deleter selects a molecule at random from an identified\nmolecule group (using the passed sampler) and then deletes\nthat molecule completely from the system\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope SystemWideDeleter_scope( SystemWideDeleter_exposer );
        SystemWideDeleter_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") ), "Construct a deleter that deletes molecules uniformly chosen from\nthe passed molecule group from the entire system") );
        SystemWideDeleter_exposer.def( bp::init< SireMove::Sampler const & >(( bp::arg("sampler") ), "Construct a deleter that deletes molecules chosen using the\npassed sampler from the entire system") );
        SystemWideDeleter_exposer.def( bp::init< SireMove::SystemWideDeleter const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::SystemWideDeleter::deleteFrom
        
            typedef ::boost::tuples::tuple< SireMol::Molecule, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMove::SystemWideDeleter::*deleteFrom_function_type)( ::SireSystem::System & ) ;
            deleteFrom_function_type deleteFrom_function_value( &::SireMove::SystemWideDeleter::deleteFrom );
            
            SystemWideDeleter_exposer.def( 
                "deleteFrom"
                , deleteFrom_function_value
                , ( bp::arg("system") )
                , bp::release_gil_policy()
                , "Delete a molecule from the system. This returns the molecule that\nwas deleted, and the probability with which it was sampled\n(normalised so that a probability of 1 is returned if the molecule\nwas picked purely randomly). This deleter deletes the molecule\nfrom the entire system. This returns an empty molecule if\nthe molecule was not contained in the system and nothing\nwas deleted" );
        
        }
        { //::SireMove::SystemWideDeleter::generator
        
            typedef ::SireMaths::RanGenerator const & ( ::SireMove::SystemWideDeleter::*generator_function_type)(  ) const;
            generator_function_type generator_function_value( &::SireMove::SystemWideDeleter::generator );
            
            SystemWideDeleter_exposer.def( 
                "generator"
                , generator_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the random number generator used by the sampler" );
        
        }
        { //::SireMove::SystemWideDeleter::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::SystemWideDeleter::*group_function_type)(  ) const;
            group_function_type group_function_value( &::SireMove::SystemWideDeleter::group );
            
            SystemWideDeleter_exposer.def( 
                "group"
                , group_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group from which molecules to be\ndeleted are chosen" );
        
        }
        SystemWideDeleter_exposer.def( bp::self != bp::self );
        { //::SireMove::SystemWideDeleter::operator=
        
            typedef ::SireMove::SystemWideDeleter & ( ::SireMove::SystemWideDeleter::*assign_function_type)( ::SireMove::SystemWideDeleter const & ) ;
            assign_function_type assign_function_value( &::SireMove::SystemWideDeleter::operator= );
            
            SystemWideDeleter_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SystemWideDeleter_exposer.def( bp::self == bp::self );
        { //::SireMove::SystemWideDeleter::sampler
        
            typedef ::SireMove::Sampler const & ( ::SireMove::SystemWideDeleter::*sampler_function_type)(  ) const;
            sampler_function_type sampler_function_value( &::SireMove::SystemWideDeleter::sampler );
            
            SystemWideDeleter_exposer.def( 
                "sampler"
                , sampler_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the sampler used to pick molecules to be deleted" );
        
        }
        { //::SireMove::SystemWideDeleter::setGenerator
        
            typedef void ( ::SireMove::SystemWideDeleter::*setGenerator_function_type)( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::SystemWideDeleter::setGenerator );
            
            SystemWideDeleter_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("generator") )
                , bp::release_gil_policy()
                , "Set the random number generator used by the sampler" );
        
        }
        { //::SireMove::SystemWideDeleter::setGroup
        
            typedef void ( ::SireMove::SystemWideDeleter::*setGroup_function_type)( ::SireMol::MoleculeGroup const & ) ;
            setGroup_function_type setGroup_function_value( &::SireMove::SystemWideDeleter::setGroup );
            
            SystemWideDeleter_exposer.def( 
                "setGroup"
                , setGroup_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Set the molecule group that will be sampled by the sampler" );
        
        }
        { //::SireMove::SystemWideDeleter::setSampler
        
            typedef void ( ::SireMove::SystemWideDeleter::*setSampler_function_type)( ::SireMove::Sampler const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::SystemWideDeleter::setSampler );
            
            SystemWideDeleter_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("sampler") )
                , bp::release_gil_policy()
                , "Set the sampler used to pick molecules to be deleted" );
        
        }
        { //::SireMove::SystemWideDeleter::setSampler
        
            typedef void ( ::SireMove::SystemWideDeleter::*setSampler_function_type)( ::SireMol::MoleculeGroup const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::SystemWideDeleter::setSampler );
            
            SystemWideDeleter_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Set the sampler to be the one that selects molecules uniformly\nfrom the passed molecule group" );
        
        }
        { //::SireMove::SystemWideDeleter::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::SystemWideDeleter::typeName );
            
            SystemWideDeleter_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SystemWideDeleter_exposer.staticmethod( "typeName" );
        SystemWideDeleter_exposer.def( "__copy__", &__copy__);
        SystemWideDeleter_exposer.def( "__deepcopy__", &__copy__);
        SystemWideDeleter_exposer.def( "clone", &__copy__);
        SystemWideDeleter_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::SystemWideDeleter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SystemWideDeleter_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::SystemWideDeleter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SystemWideDeleter_exposer.def_pickle(sire_pickle_suite< ::SireMove::SystemWideDeleter >());
        SystemWideDeleter_exposer.def( "__str__", &__str__< ::SireMove::SystemWideDeleter > );
        SystemWideDeleter_exposer.def( "__repr__", &__str__< ::SireMove::SystemWideDeleter > );
    }

}
