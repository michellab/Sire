// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "VelocitiesFromProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireMol/atomelements.h"

#include "SireMol/atommasses.h"

#include "SireMol/atomvelocities.h"

#include "SireMol/moleculedata.h"

#include "SireMol/moleculeinfodata.h"

#include "SireMol/moleculeview.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "velocitygenerator.h"

#include "velocitygenerator.h"

SireMove::VelocitiesFromProperty __copy__(const SireMove::VelocitiesFromProperty &other){ return SireMove::VelocitiesFromProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_VelocitiesFromProperty_class(){

    { //::SireMove::VelocitiesFromProperty
        typedef bp::class_< SireMove::VelocitiesFromProperty, bp::bases< SireMove::VelocityGenerator, SireBase::Property > > VelocitiesFromProperty_exposer_t;
        VelocitiesFromProperty_exposer_t VelocitiesFromProperty_exposer = VelocitiesFromProperty_exposer_t( "VelocitiesFromProperty", "This is a velocity generator that extracts velocities from a\nspecified molecular property\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope VelocitiesFromProperty_scope( VelocitiesFromProperty_exposer );
        VelocitiesFromProperty_exposer.def( bp::init< SireBase::PropertyName const & >(( bp::arg("property") ), "Construct to get the velocities from the property property") );
        VelocitiesFromProperty_exposer.def( bp::init< SireMove::VelocitiesFromProperty const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::VelocitiesFromProperty::generate
        
            typedef ::SireMol::AtomVelocities ( ::SireMove::VelocitiesFromProperty::*generate_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            generate_function_type generate_function_value( &::SireMove::VelocitiesFromProperty::generate );
            
            VelocitiesFromProperty_exposer.def( 
                "generate"
                , generate_function_value
                , ( bp::arg("molview"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return the velocities from the specified property" );
        
        }
        VelocitiesFromProperty_exposer.def( bp::self != bp::self );
        { //::SireMove::VelocitiesFromProperty::operator=
        
            typedef ::SireMove::VelocitiesFromProperty & ( ::SireMove::VelocitiesFromProperty::*assign_function_type)( ::SireMove::VelocitiesFromProperty const & ) ;
            assign_function_type assign_function_value( &::SireMove::VelocitiesFromProperty::operator= );
            
            VelocitiesFromProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        VelocitiesFromProperty_exposer.def( bp::self == bp::self );
        { //::SireMove::VelocitiesFromProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::VelocitiesFromProperty::typeName );
            
            VelocitiesFromProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        VelocitiesFromProperty_exposer.staticmethod( "typeName" );
        VelocitiesFromProperty_exposer.def( "__copy__", &__copy__);
        VelocitiesFromProperty_exposer.def( "__deepcopy__", &__copy__);
        VelocitiesFromProperty_exposer.def( "clone", &__copy__);
        VelocitiesFromProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::VelocitiesFromProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocitiesFromProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::VelocitiesFromProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocitiesFromProperty_exposer.def_pickle(sire_pickle_suite< ::SireMove::VelocitiesFromProperty >());
        VelocitiesFromProperty_exposer.def( "__str__", &__str__< ::SireMove::VelocitiesFromProperty > );
        VelocitiesFromProperty_exposer.def( "__repr__", &__str__< ::SireMove::VelocitiesFromProperty > );
    }

}
