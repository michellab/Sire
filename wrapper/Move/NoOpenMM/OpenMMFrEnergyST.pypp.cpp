// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "OpenMMFrEnergyST.pypp.hpp"

namespace bp = boost::python;

#include "SireFF/forcetable.h"

#include "SireIO/amber.h"

#include "SireMM/atomljs.h"

#include "SireMM/internalff.h"

#include "SireMM/internalperturbation.h"

#include "SireMaths/constants.h"

#include "SireMaths/rangenerator.h"

#include "SireMaths/vector.h"

#include "SireMol/amberparameters.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atommasses.h"

#include "SireMol/bondid.h"

#include "SireMol/connectivity.h"

#include "SireMol/mgname.h"

#include "SireMol/molecule.h"

#include "SireMol/core.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleditor.h"

#include "SireMol/partialmolecule.h"

#include "SireMol/perturbation.h"

#include "SireMove/flexibility.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/convert.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "SireVol/periodicbox.h"

#include "ensemble.h"

#include "openmmfrenergyst.h"

#include <QDebug>

#include <QTime>

#include <iostream>

#include "openmmfrenergyst.h"

SireMove::OpenMMFrEnergyST __copy__(const SireMove::OpenMMFrEnergyST &other){ return SireMove::OpenMMFrEnergyST(other); }

const char* pvt_get_name(const SireMove::OpenMMFrEnergyST&){ return "SireMove::OpenMMFrEnergyST";}

void register_OpenMMFrEnergyST_class(){

    { //::SireMove::OpenMMFrEnergyST
        typedef bp::class_< SireMove::OpenMMFrEnergyST > OpenMMFrEnergyST_exposer_t;
        OpenMMFrEnergyST_exposer_t OpenMMFrEnergyST_exposer = OpenMMFrEnergyST_exposer_t( "OpenMMFrEnergyST", bp::init< >() );
        bp::scope OpenMMFrEnergyST_scope( OpenMMFrEnergyST_exposer );
        { //::SireMove::OpenMMFrEnergyST::typeName

            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::OpenMMFrEnergyST::typeName );

            OpenMMFrEnergyST_exposer.def(
                "typeName"
                , typeName_function_value );

        }
        OpenMMFrEnergyST_exposer.staticmethod( "typeName" );
        OpenMMFrEnergyST_exposer.def( "__copy__", &__copy__);
        OpenMMFrEnergyST_exposer.def( "__deepcopy__", &__copy__);
        OpenMMFrEnergyST_exposer.def( "clone", &__copy__);
        OpenMMFrEnergyST_exposer.def( "__str__", &pvt_get_name);
        OpenMMFrEnergyST_exposer.def( "__repr__", &pvt_get_name);
    }

}
