// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Integrator.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireFF/forcefields.h"

#include "SireFF/forcetable.h"

#include "SireMaths/rangenerator.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculeview.h"

#include "SireStream/datastream.h"

#include "SireSystem/system.h"

#include "ensemble.h"

#include "integrator.h"

#include "integratorworkspace.h"

#include "integrator.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Integrator_class(){

    { //::SireMove::Integrator
        typedef bp::class_< SireMove::Integrator, bp::bases< SireBase::Property >, boost::noncopyable > Integrator_exposer_t;
        Integrator_exposer_t Integrator_exposer = Integrator_exposer_t( "Integrator", "This is the virtual base class of all dynamics integrators. An integrator\nis the kernel used to advance the coordinates of the system from one\ntimestep to the next\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope Integrator_scope( Integrator_exposer );
        { //::SireMove::Integrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::Integrator::*createWorkspace_function_type)( ::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::Integrator::createWorkspace );
            
            Integrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("map")=SireBase::PropertyMap() )
                , "" );
        
        }
        { //::SireMove::Integrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::Integrator::*createWorkspace_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::Integrator::createWorkspace );
            
            Integrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )
                , "" );
        
        }
        { //::SireMove::Integrator::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::Integrator::*ensemble_function_type)(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::Integrator::ensemble );
            
            Integrator_exposer.def( 
                "ensemble"
                , ensemble_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::Integrator::integrate
        
            typedef void ( ::SireMove::Integrator::*integrate_function_type)( ::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireUnits::Dimension::Time,int,bool ) ;
            integrate_function_type integrate_function_value( &::SireMove::Integrator::integrate );
            
            Integrator_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("timestep"), bp::arg("nmoves"), bp::arg("record_stats") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::Integrator::isTimeReversible
        
            typedef bool ( ::SireMove::Integrator::*isTimeReversible_function_type)(  ) const;
            isTimeReversible_function_type isTimeReversible_function_value( &::SireMove::Integrator::isTimeReversible );
            
            Integrator_exposer.def( 
                "isTimeReversible"
                , isTimeReversible_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::Integrator::null
        
            typedef ::SireMove::NullIntegrator const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMove::Integrator::null );
            
            Integrator_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return a NullIntegrator" );
        
        }
        { //::SireMove::Integrator::toString
        
            typedef ::QString ( ::SireMove::Integrator::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMove::Integrator::toString );
            
            Integrator_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::Integrator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::Integrator::typeName );
            
            Integrator_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Integrator_exposer.staticmethod( "null" );
        Integrator_exposer.staticmethod( "typeName" );
        Integrator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::Integrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Integrator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::Integrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Integrator_exposer.def_pickle(sire_pickle_suite< ::SireMove::Integrator >());
        Integrator_exposer.def( "__str__", &__str__< ::SireMove::Integrator > );
        Integrator_exposer.def( "__repr__", &__str__< ::SireMove::Integrator > );
    }

}
