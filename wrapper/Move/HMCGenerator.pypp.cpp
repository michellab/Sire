// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "HMCGenerator.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/atomelements.h"

#include "SireMol/atommasses.h"

#include "SireMol/atomvelocities.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "hybridmc.h"

#include <QDebug>

#include "hybridmc.h"

SireMove::HMCGenerator __copy__(const SireMove::HMCGenerator &other){ return SireMove::HMCGenerator(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_HMCGenerator_class(){

    { //::SireMove::HMCGenerator
        typedef bp::class_< SireMove::HMCGenerator, bp::bases< SireMove::HMCVelGen, SireMove::VelocityGenerator, SireBase::Property > > HMCGenerator_exposer_t;
        HMCGenerator_exposer_t HMCGenerator_exposer = HMCGenerator_exposer_t( "HMCGenerator", "This is the velocity generator used for the standard\nHybrid Monte Carlo move. This generates velocities such\nthat the acceptance test is just based on the change\nin total energy, which, for a good integrator, is\nnear zero, so nearly all moves should be accepted", bp::init< >("Constructor") );
        bp::scope HMCGenerator_scope( HMCGenerator_exposer );
        HMCGenerator_exposer.def( bp::init< SireMove::HMCGenerator const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::HMCGenerator::generate
        
            typedef double ( ::SireMove::HMCGenerator::*generate_function_type)( ::SireSystem::System const &,::SireMove::MolecularDynamics & ) ;
            generate_function_type generate_function_value( &::SireMove::HMCGenerator::generate );
            
            HMCGenerator_exposer.def( 
                "generate"
                , generate_function_value
                , ( bp::arg("system"), bp::arg("md") )
                , bp::release_gil_policy()
                , "Generate the velocities for the passed MD move, returning\nthe biasing factor" );
        
        }
        { //::SireMove::HMCGenerator::generate
        
            typedef ::SireMol::AtomVelocities ( ::SireMove::HMCGenerator::*generate_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) const;
            generate_function_type generate_function_value( &::SireMove::HMCGenerator::generate );
            
            HMCGenerator_exposer.def( 
                "generate"
                , generate_function_value
                , ( bp::arg("molview"), bp::arg("map")=SireBase::PropertyMap() )
                , "Generate the velocities for the passed molecule view" );
        
        }
        { //::SireMove::HMCGenerator::getBias
        
            typedef double ( ::SireMove::HMCGenerator::*getBias_function_type)( ::SireMove::MolecularDynamics const & ) ;
            getBias_function_type getBias_function_value( &::SireMove::HMCGenerator::getBias );
            
            HMCGenerator_exposer.def( 
                "getBias"
                , getBias_function_value
                , ( bp::arg("md") )
                , bp::release_gil_policy()
                , "Return the bias of the current state of the passed MD move" );
        
        }
        HMCGenerator_exposer.def( bp::self != bp::self );
        { //::SireMove::HMCGenerator::operator=
        
            typedef ::SireMove::HMCGenerator & ( ::SireMove::HMCGenerator::*assign_function_type)( ::SireMove::HMCGenerator const & ) ;
            assign_function_type assign_function_value( &::SireMove::HMCGenerator::operator= );
            
            HMCGenerator_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        HMCGenerator_exposer.def( bp::self == bp::self );
        { //::SireMove::HMCGenerator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::HMCGenerator::typeName );
            
            HMCGenerator_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        HMCGenerator_exposer.staticmethod( "typeName" );
        HMCGenerator_exposer.def( "__copy__", &__copy__);
        HMCGenerator_exposer.def( "__deepcopy__", &__copy__);
        HMCGenerator_exposer.def( "clone", &__copy__);
        HMCGenerator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::HMCGenerator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        HMCGenerator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::HMCGenerator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        HMCGenerator_exposer.def_pickle(sire_pickle_suite< ::SireMove::HMCGenerator >());
        HMCGenerator_exposer.def( "__str__", &__str__< ::SireMove::HMCGenerator > );
        HMCGenerator_exposer.def( "__repr__", &__str__< ::SireMove::HMCGenerator > );
    }

}
