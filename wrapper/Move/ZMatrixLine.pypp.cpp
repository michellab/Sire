// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ZMatrixLine.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/angleid.h"

#include "SireMol/atommatcher.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireMove/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/convert.h"

#include "SireUnits/units.h"

#include "zmatrix.h"

#include <QDebug>

#include <QElapsedTimer>

#include <QTime>

#include "zmatrix.h"

SireMove::ZMatrixLine __copy__(const SireMove::ZMatrixLine &other){ return SireMove::ZMatrixLine(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ZMatrixLine_class(){

    { //::SireMove::ZMatrixLine
        typedef bp::class_< SireMove::ZMatrixLine > ZMatrixLine_exposer_t;
        ZMatrixLine_exposer_t ZMatrixLine_exposer = ZMatrixLine_exposer_t( "ZMatrixLine", "This class represents a single line of a zmatrix\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope ZMatrixLine_scope( ZMatrixLine_exposer );
        ZMatrixLine_exposer.def( bp::init< SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx >(( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ), "Construct with the specified atom indicies") );
        ZMatrixLine_exposer.def( bp::init< SireMove::ZMatrixLine const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::ZMatrixLine::angle
        
            typedef ::SireMol::AtomIdx ( ::SireMove::ZMatrixLine::*angle_function_type)(  ) const;
            angle_function_type angle_function_value( &::SireMove::ZMatrixLine::angle );
            
            ZMatrixLine_exposer.def( 
                "angle"
                , angle_function_value
                , bp::release_gil_policy()
                , "Return the index of the angled atom" );
        
        }
        { //::SireMove::ZMatrixLine::angleDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixLine::*angleDelta_function_type)(  ) const;
            angleDelta_function_type angleDelta_function_value( &::SireMove::ZMatrixLine::angleDelta );
            
            ZMatrixLine_exposer.def( 
                "angleDelta"
                , angleDelta_function_value
                , bp::release_gil_policy()
                , "Return the maximum amount by which the angle should be changed" );
        
        }
        { //::SireMove::ZMatrixLine::atom
        
            typedef ::SireMol::AtomIdx ( ::SireMove::ZMatrixLine::*atom_function_type)(  ) const;
            atom_function_type atom_function_value( &::SireMove::ZMatrixLine::atom );
            
            ZMatrixLine_exposer.def( 
                "atom"
                , atom_function_value
                , bp::release_gil_policy()
                , "Return the index of the atom whose coordinates\nare described in this line" );
        
        }
        { //::SireMove::ZMatrixLine::bond
        
            typedef ::SireMol::AtomIdx ( ::SireMove::ZMatrixLine::*bond_function_type)(  ) const;
            bond_function_type bond_function_value( &::SireMove::ZMatrixLine::bond );
            
            ZMatrixLine_exposer.def( 
                "bond"
                , bond_function_value
                , bp::release_gil_policy()
                , "Return the index of the bonded atom" );
        
        }
        { //::SireMove::ZMatrixLine::bondDelta
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixLine::*bondDelta_function_type)(  ) const;
            bondDelta_function_type bondDelta_function_value( &::SireMove::ZMatrixLine::bondDelta );
            
            ZMatrixLine_exposer.def( 
                "bondDelta"
                , bondDelta_function_value
                , bp::release_gil_policy()
                , "Return the maximum amount by which the bond should be changed" );
        
        }
        { //::SireMove::ZMatrixLine::dihedral
        
            typedef ::SireMol::AtomIdx ( ::SireMove::ZMatrixLine::*dihedral_function_type)(  ) const;
            dihedral_function_type dihedral_function_value( &::SireMove::ZMatrixLine::dihedral );
            
            ZMatrixLine_exposer.def( 
                "dihedral"
                , dihedral_function_value
                , bp::release_gil_policy()
                , "Return the index of the dihedralled atom" );
        
        }
        { //::SireMove::ZMatrixLine::dihedralDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixLine::*dihedralDelta_function_type)(  ) const;
            dihedralDelta_function_type dihedralDelta_function_value( &::SireMove::ZMatrixLine::dihedralDelta );
            
            ZMatrixLine_exposer.def( 
                "dihedralDelta"
                , dihedralDelta_function_value
                , bp::release_gil_policy()
                , "Return the maximum amount by which the dihedral should be changed" );
        
        }
        ZMatrixLine_exposer.def( bp::self != bp::self );
        { //::SireMove::ZMatrixLine::operator=
        
            typedef ::SireMove::ZMatrixLine & ( ::SireMove::ZMatrixLine::*assign_function_type)( ::SireMove::ZMatrixLine const & ) ;
            assign_function_type assign_function_value( &::SireMove::ZMatrixLine::operator= );
            
            ZMatrixLine_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        ZMatrixLine_exposer.def( bp::self == bp::self );
        { //::SireMove::ZMatrixLine::operator[]
        
            typedef ::SireMol::AtomIdx ( ::SireMove::ZMatrixLine::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMove::ZMatrixLine::operator[] );
            
            ZMatrixLine_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMove::ZMatrixLine::setAngleDelta
        
            typedef void ( ::SireMove::ZMatrixLine::*setAngleDelta_function_type)( ::SireUnits::Dimension::Angle const & ) ;
            setAngleDelta_function_type setAngleDelta_function_value( &::SireMove::ZMatrixLine::setAngleDelta );
            
            ZMatrixLine_exposer.def( 
                "setAngleDelta"
                , setAngleDelta_function_value
                , ( bp::arg("delta") )
                , bp::release_gil_policy()
                , "Set the maximum amount by which the angle should be changed" );
        
        }
        { //::SireMove::ZMatrixLine::setBondDelta
        
            typedef void ( ::SireMove::ZMatrixLine::*setBondDelta_function_type)( ::SireUnits::Dimension::Length const & ) ;
            setBondDelta_function_type setBondDelta_function_value( &::SireMove::ZMatrixLine::setBondDelta );
            
            ZMatrixLine_exposer.def( 
                "setBondDelta"
                , setBondDelta_function_value
                , ( bp::arg("delta") )
                , bp::release_gil_policy()
                , "Set the maximum amount by which the bond should be changed" );
        
        }
        { //::SireMove::ZMatrixLine::setDihedralDelta
        
            typedef void ( ::SireMove::ZMatrixLine::*setDihedralDelta_function_type)( ::SireUnits::Dimension::Angle const & ) ;
            setDihedralDelta_function_type setDihedralDelta_function_value( &::SireMove::ZMatrixLine::setDihedralDelta );
            
            ZMatrixLine_exposer.def( 
                "setDihedralDelta"
                , setDihedralDelta_function_value
                , ( bp::arg("delta") )
                , bp::release_gil_policy()
                , "Set the maximum amount by which the dihedral should be changed" );
        
        }
        { //::SireMove::ZMatrixLine::toString
        
            typedef ::QString ( ::SireMove::ZMatrixLine::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMove::ZMatrixLine::toString );
            
            ZMatrixLine_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation" );
        
        }
        { //::SireMove::ZMatrixLine::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::ZMatrixLine::typeName );
            
            ZMatrixLine_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::ZMatrixLine::what
        
            typedef char const * ( ::SireMove::ZMatrixLine::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMove::ZMatrixLine::what );
            
            ZMatrixLine_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ZMatrixLine_exposer.staticmethod( "typeName" );
        ZMatrixLine_exposer.def( "__copy__", &__copy__);
        ZMatrixLine_exposer.def( "__deepcopy__", &__copy__);
        ZMatrixLine_exposer.def( "clone", &__copy__);
        ZMatrixLine_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::ZMatrixLine >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ZMatrixLine_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::ZMatrixLine >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ZMatrixLine_exposer.def_pickle(sire_pickle_suite< ::SireMove::ZMatrixLine >());
        ZMatrixLine_exposer.def( "__str__", &__str__< ::SireMove::ZMatrixLine > );
        ZMatrixLine_exposer.def( "__repr__", &__str__< ::SireMove::ZMatrixLine > );
    }

}
