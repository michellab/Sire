// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SpecifiedGroupsDeleter.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "moldeleter.h"

#include "uniformsampler.h"

#include "moldeleter.h"

SireMove::SpecifiedGroupsDeleter __copy__(const SireMove::SpecifiedGroupsDeleter &other){ return SireMove::SpecifiedGroupsDeleter(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_SpecifiedGroupsDeleter_class(){

    { //::SireMove::SpecifiedGroupsDeleter
        typedef bp::class_< SireMove::SpecifiedGroupsDeleter, bp::bases< SireMove::MolDeleter, SireBase::Property > > SpecifiedGroupsDeleter_exposer_t;
        SpecifiedGroupsDeleter_exposer_t SpecifiedGroupsDeleter_exposer = SpecifiedGroupsDeleter_exposer_t( "SpecifiedGroupsDeleter", "This is a molecule deleter that selects a molecule at random\nfrom a specified molecule group (using the contained sampler)\nand then deletes that molecule from a specific set of\nmolecule groups in the system\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope SpecifiedGroupsDeleter_scope( SpecifiedGroupsDeleter_exposer );
        SpecifiedGroupsDeleter_exposer.def( bp::init< SireMol::MoleculeGroup const &, SireMol::MGID const & >(( bp::arg("molgroup"), bp::arg("mgid") ), "Construct a deleter that deletes molecules selected at random from the\nmolecule group molgroup from the molecule groups that are identified\nby the ID in mgid") );
        SpecifiedGroupsDeleter_exposer.def( bp::init< SireMove::Sampler const &, SireMol::MGID const & >(( bp::arg("sampler"), bp::arg("mgid") ), "Construct a deleter that deletes molecules selected at random using the\npassed sampler from the molecule groups that are identified by the\nID in mgid") );
        SpecifiedGroupsDeleter_exposer.def( bp::init< SireMove::SpecifiedGroupsDeleter const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::SpecifiedGroupsDeleter::deleteFrom
        
            typedef ::boost::tuples::tuple< SireMol::Molecule, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMove::SpecifiedGroupsDeleter::*deleteFrom_function_type)( ::SireSystem::System & ) ;
            deleteFrom_function_type deleteFrom_function_value( &::SireMove::SpecifiedGroupsDeleter::deleteFrom );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "deleteFrom"
                , deleteFrom_function_value
                , ( bp::arg("system") )
                , bp::release_gil_policy()
                , "Delete a molecule from the system. This returns the molecule that\nwas deleted, and the probability with which it was sampled\n(normalised so that a probability of 1 is returned if the molecule\nwas picked purely randomly). This deleter deletes the molecule\nfrom the entire system. This returns an empty molecule if\nthe molecule was not contained in the system and nothing\nwas deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::generator
        
            typedef ::SireMaths::RanGenerator const & ( ::SireMove::SpecifiedGroupsDeleter::*generator_function_type)(  ) const;
            generator_function_type generator_function_value( &::SireMove::SpecifiedGroupsDeleter::generator );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "generator"
                , generator_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the random number generator used by the sampler to randomly\nselect molecules to be deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::SpecifiedGroupsDeleter::*group_function_type)(  ) const;
            group_function_type group_function_value( &::SireMove::SpecifiedGroupsDeleter::group );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "group"
                , group_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group from which molecules are randomly\nselected to be deleted" );
        
        }
        SpecifiedGroupsDeleter_exposer.def( bp::self != bp::self );
        { //::SireMove::SpecifiedGroupsDeleter::operator=
        
            typedef ::SireMove::SpecifiedGroupsDeleter & ( ::SireMove::SpecifiedGroupsDeleter::*assign_function_type)( ::SireMove::SpecifiedGroupsDeleter const & ) ;
            assign_function_type assign_function_value( &::SireMove::SpecifiedGroupsDeleter::operator= );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SpecifiedGroupsDeleter_exposer.def( bp::self == bp::self );
        { //::SireMove::SpecifiedGroupsDeleter::sampler
        
            typedef ::SireMove::Sampler const & ( ::SireMove::SpecifiedGroupsDeleter::*sampler_function_type)(  ) const;
            sampler_function_type sampler_function_value( &::SireMove::SpecifiedGroupsDeleter::sampler );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "sampler"
                , sampler_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the sampler used to randomly select molecules to be deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::setGenerator
        
            typedef void ( ::SireMove::SpecifiedGroupsDeleter::*setGenerator_function_type)( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::SpecifiedGroupsDeleter::setGenerator );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("generator") )
                , bp::release_gil_policy()
                , "Set the random number generator used by the sampler to randomly\nselect molecules to be deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::setGroup
        
            typedef void ( ::SireMove::SpecifiedGroupsDeleter::*setGroup_function_type)( ::SireMol::MoleculeGroup const & ) ;
            setGroup_function_type setGroup_function_value( &::SireMove::SpecifiedGroupsDeleter::setGroup );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "setGroup"
                , setGroup_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Set the molecule group from which molecules are selected randomly" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::setSampler
        
            typedef void ( ::SireMove::SpecifiedGroupsDeleter::*setSampler_function_type)( ::SireMove::Sampler const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::SpecifiedGroupsDeleter::setSampler );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("sampler") )
                , bp::release_gil_policy()
                , "Set the sampler used to randomly select molecules to be deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::setSampler
        
            typedef void ( ::SireMove::SpecifiedGroupsDeleter::*setSampler_function_type)( ::SireMol::MoleculeGroup const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::SpecifiedGroupsDeleter::setSampler );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Set the sampler to one that selects molecules uniformly from the\npassed molecule group" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::setSpecifiedGroups
        
            typedef void ( ::SireMove::SpecifiedGroupsDeleter::*setSpecifiedGroups_function_type)( ::SireMol::MGID const & ) ;
            setSpecifiedGroups_function_type setSpecifiedGroups_function_value( &::SireMove::SpecifiedGroupsDeleter::setSpecifiedGroups );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "setSpecifiedGroups"
                , setSpecifiedGroups_function_value
                , ( bp::arg("mgid") )
                , bp::release_gil_policy()
                , "Set the ID of the groups from which molecules are actually deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::specifiedGroups
        
            typedef ::SireMol::MGID const & ( ::SireMove::SpecifiedGroupsDeleter::*specifiedGroups_function_type)(  ) const;
            specifiedGroups_function_type specifiedGroups_function_value( &::SireMove::SpecifiedGroupsDeleter::specifiedGroups );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "specifiedGroups"
                , specifiedGroups_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the groups from which molecules are actually deleted" );
        
        }
        { //::SireMove::SpecifiedGroupsDeleter::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::SpecifiedGroupsDeleter::typeName );
            
            SpecifiedGroupsDeleter_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SpecifiedGroupsDeleter_exposer.staticmethod( "typeName" );
        SpecifiedGroupsDeleter_exposer.def( "__copy__", &__copy__);
        SpecifiedGroupsDeleter_exposer.def( "__deepcopy__", &__copy__);
        SpecifiedGroupsDeleter_exposer.def( "clone", &__copy__);
        SpecifiedGroupsDeleter_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::SpecifiedGroupsDeleter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpecifiedGroupsDeleter_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::SpecifiedGroupsDeleter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpecifiedGroupsDeleter_exposer.def_pickle(sire_pickle_suite< ::SireMove::SpecifiedGroupsDeleter >());
        SpecifiedGroupsDeleter_exposer.def( "__str__", &__str__< ::SireMove::SpecifiedGroupsDeleter > );
        SpecifiedGroupsDeleter_exposer.def( "__repr__", &__str__< ::SireMove::SpecifiedGroupsDeleter > );
    }

}
