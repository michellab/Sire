// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SimPacket.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "simpacket.h"

#include "simpacket.h"

SireMove::SimPacket __copy__(const SireMove::SimPacket &other){ return SireMove::SimPacket(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireMove::SimPacket&){ return "SireMove::SimPacket";}

#include "Helpers/release_gil_policy.hpp"

void register_SimPacket_class(){

    { //::SireMove::SimPacket
        typedef bp::class_< SireMove::SimPacket, bp::bases< SireCluster::WorkPacketBase > > SimPacket_exposer_t;
        SimPacket_exposer_t SimPacket_exposer = SimPacket_exposer_t( "SimPacket", "This is a WorkPacket that is used to run part of a\nsimulation\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope SimPacket_scope( SimPacket_exposer );
        SimPacket_exposer.def( bp::init< SireSystem::System const &, SireMove::Moves const &, int, bp::optional< bool > >(( bp::arg("system"), bp::arg("moves"), bp::arg("nmoves"), bp::arg("record_stats")=(bool)(true) ), "Construct a workpacket that runs nmoves of the Moves moves on the\npassed System system, optionally recording simulation statistics\nif record_stats is true") );
        SimPacket_exposer.def( bp::init< SireSystem::System const &, SireMove::Moves const &, int, int, bp::optional< bool > >(( bp::arg("system"), bp::arg("moves"), bp::arg("nmoves"), bp::arg("nmoves_per_chunk"), bp::arg("record_stats")=(bool)(true) ), "Construct a workpacket that runs nmoves of the Moves moves on the\npassed System system, optionally recording simulation statistics\nif record_stats is true, and running nmoves_per_chunk moves\nfor each chunk") );
        SimPacket_exposer.def( bp::init< SireMove::SimStore const &, int, bp::optional< bool > >(( bp::arg("simstore"), bp::arg("nmoves"), bp::arg("record_stats")=(bool)(true) ), "Construct a workpacket that runs nmoves of the Moves on the\nSystem, both contained in simstore, optionally recording simulation statistics\nif record_stats is true") );
        SimPacket_exposer.def( bp::init< SireMove::SimStore const &, int, int, bp::optional< bool > >(( bp::arg("simstore"), bp::arg("nmoves"), bp::arg("nmoves_per_chunk"), bp::arg("record_stats")=(bool)(true) ), "Construct a workpacket that runs nmoves of the Moves  on the\nSystem, both contained in simstore, optionally recording simulation statistics\nif record_stats is true, and running nmoves_per_chunk moves\nfor each chunk") );
        SimPacket_exposer.def( bp::init< SireMove::SimPacket const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::SimPacket::approximatePacketSize
        
            typedef int ( ::SireMove::SimPacket::*approximatePacketSize_function_type)(  ) const;
            approximatePacketSize_function_type approximatePacketSize_function_value( &::SireMove::SimPacket::approximatePacketSize );
            
            SimPacket_exposer.def( 
                "approximatePacketSize"
                , approximatePacketSize_function_value
                , bp::release_gil_policy()
                , "Because it takes too long to calculate the size of this\npacket, we say that it will be 32 MB - this is enough for\nmost cases" );
        
        }
        { //::SireMove::SimPacket::hasFinished
        
            typedef bool ( ::SireMove::SimPacket::*hasFinished_function_type)(  ) const;
            hasFinished_function_type hasFinished_function_value( &::SireMove::SimPacket::hasFinished );
            
            SimPacket_exposer.def( 
                "hasFinished"
                , hasFinished_function_value
                , bp::release_gil_policy()
                , "Return whether or not this simulation has finished" );
        
        }
        { //::SireMove::SimPacket::moves
        
            typedef ::SireMove::MovesPtr ( ::SireMove::SimPacket::*moves_function_type)(  ) const;
            moves_function_type moves_function_value( &::SireMove::SimPacket::moves );
            
            SimPacket_exposer.def( 
                "moves"
                , moves_function_value
                , bp::release_gil_policy()
                , "Return the moves being applied to the system" );
        
        }
        { //::SireMove::SimPacket::nCompleted
        
            typedef int ( ::SireMove::SimPacket::*nCompleted_function_type)(  ) const;
            nCompleted_function_type nCompleted_function_value( &::SireMove::SimPacket::nCompleted );
            
            SimPacket_exposer.def( 
                "nCompleted"
                , nCompleted_function_value
                , bp::release_gil_policy()
                , "Return the number of moves already run on the system" );
        
        }
        { //::SireMove::SimPacket::nMoves
        
            typedef int ( ::SireMove::SimPacket::*nMoves_function_type)(  ) const;
            nMoves_function_type nMoves_function_value( &::SireMove::SimPacket::nMoves );
            
            SimPacket_exposer.def( 
                "nMoves"
                , nMoves_function_value
                , bp::release_gil_policy()
                , "Return the number of moves being applied to the system" );
        
        }
        { //::SireMove::SimPacket::nMovesPerChunk
        
            typedef int ( ::SireMove::SimPacket::*nMovesPerChunk_function_type)(  ) const;
            nMovesPerChunk_function_type nMovesPerChunk_function_value( &::SireMove::SimPacket::nMovesPerChunk );
            
            SimPacket_exposer.def( 
                "nMovesPerChunk"
                , nMovesPerChunk_function_value
                , bp::release_gil_policy()
                , "Return the number of moves to apply for each chunk" );
        
        }
        SimPacket_exposer.def( bp::self != bp::self );
        { //::SireMove::SimPacket::operator=
        
            typedef ::SireMove::SimPacket & ( ::SireMove::SimPacket::*assign_function_type)( ::SireMove::SimPacket const & ) ;
            assign_function_type assign_function_value( &::SireMove::SimPacket::operator= );
            
            SimPacket_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SimPacket_exposer.def( bp::self == bp::self );
        { //::SireMove::SimPacket::recordingStatistics
        
            typedef bool ( ::SireMove::SimPacket::*recordingStatistics_function_type)(  ) const;
            recordingStatistics_function_type recordingStatistics_function_value( &::SireMove::SimPacket::recordingStatistics );
            
            SimPacket_exposer.def( 
                "recordingStatistics"
                , recordingStatistics_function_value
                , bp::release_gil_policy()
                , "Return whether or not simulation statistics will be recorded\nduring the moves" );
        
        }
        { //::SireMove::SimPacket::shouldPack
        
            typedef bool ( ::SireMove::SimPacket::*shouldPack_function_type)(  ) const;
            shouldPack_function_type shouldPack_function_value( &::SireMove::SimPacket::shouldPack );
            
            SimPacket_exposer.def( 
                "shouldPack"
                , shouldPack_function_value
                , bp::release_gil_policy()
                , "Only compress this workpacket if the SimStore is not already packed" );
        
        }
        { //::SireMove::SimPacket::system
        
            typedef ::SireSystem::System ( ::SireMove::SimPacket::*system_function_type)(  ) const;
            system_function_type system_function_value( &::SireMove::SimPacket::system );
            
            SimPacket_exposer.def( 
                "system"
                , system_function_value
                , bp::release_gil_policy()
                , "Return the system being simulated" );
        
        }
        { //::SireMove::SimPacket::systemAndMoves
        
            typedef ::SireMove::SimStore ( ::SireMove::SimPacket::*systemAndMoves_function_type)(  ) const;
            systemAndMoves_function_type systemAndMoves_function_value( &::SireMove::SimPacket::systemAndMoves );
            
            SimPacket_exposer.def( 
                "systemAndMoves"
                , systemAndMoves_function_value
                , bp::release_gil_policy()
                , "Return both the system and moves together" );
        
        }
        { //::SireMove::SimPacket::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::SimPacket::typeName );
            
            SimPacket_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::SimPacket::what
        
            typedef char const * ( ::SireMove::SimPacket::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMove::SimPacket::what );
            
            SimPacket_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SimPacket_exposer.staticmethod( "typeName" );
        SimPacket_exposer.def( "__copy__", &__copy__);
        SimPacket_exposer.def( "__deepcopy__", &__copy__);
        SimPacket_exposer.def( "clone", &__copy__);
        SimPacket_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::SimPacket >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SimPacket_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::SimPacket >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SimPacket_exposer.def_pickle(sire_pickle_suite< ::SireMove::SimPacket >());
        SimPacket_exposer.def( "__str__", &pvt_get_name);
        SimPacket_exposer.def( "__repr__", &pvt_get_name);
    }

}
