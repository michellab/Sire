// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "OpenMMPMEFEP.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/variantproperty.h"

#include "SireFF/forcetable.h"

#include "SireIO/amber.h"

#include "SireMM/atomljs.h"

#include "SireMM/internalff.h"

#include "SireMM/internalperturbation.h"

#include "SireMaths/constants.h"

#include "SireMaths/rangenerator.h"

#include "SireMaths/vector.h"

#include "SireMol/amberparameters.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atommasses.h"

#include "SireMol/bondid.h"

#include "SireMol/connectivity.h"

#include "SireMol/core.h"

#include "SireMol/mgname.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleditor.h"

#include "SireMol/partialmolecule.h"

#include "SireMol/perturbation.h"

#include "SireMove/flexibility.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/convert.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "SireVol/periodicbox.h"

#include "SireVol/triclinicbox.h"

#include "ensemble.h"

#include "openmmpmefep.h"

#include <QDebug>

#include <QTime>

#include <boost/tuple/tuple.hpp>

#include <cmath>

#include <iostream>

#include "openmmpmefep.h"

SireMove::OpenMMPMEFEP __copy__(const SireMove::OpenMMPMEFEP &other){ return SireMove::OpenMMPMEFEP(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_OpenMMPMEFEP_class(){

    { //::SireMove::OpenMMPMEFEP
        typedef bp::class_< SireMove::OpenMMPMEFEP, bp::bases< SireMove::Integrator, SireBase::Property > > OpenMMPMEFEP_exposer_t;
        OpenMMPMEFEP_exposer_t OpenMMPMEFEP_exposer = OpenMMPMEFEP_exposer_t( "OpenMMPMEFEP", "This class implements the single topology free energy method using\nOpenMM.\n\nAuthor: Julien Michel, Gaetano Calabro, Antonia Mey, Hannes H Loeffler\n", bp::init< bp::optional< bool > >(( bp::arg("frequent_save_velocities")=(bool)(false) ), "Constructor") );
        bp::scope OpenMMPMEFEP_scope( OpenMMPMEFEP_exposer );
        OpenMMPMEFEP_exposer.def( bp::init< SireMol::MoleculeGroup const &, SireMol::MoleculeGroup const &, SireMol::MoleculeGroup const &, SireMol::MoleculeGroup const &, SireMol::MoleculeGroup const &, bp::optional< bool > >(( bp::arg("molecule_group"), bp::arg("solutes"), bp::arg("solute_hard"), bp::arg("solute_todummy"), bp::arg("solute_fromdummy"), bp::arg("frequent_save_velocities")=(bool)(false) ), "Constructor using the passed molecule groups") );
        OpenMMPMEFEP_exposer.def( bp::init< SireMove::OpenMMPMEFEP const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMove::OpenMMPMEFEP::annealSystemToLambda
        
            typedef ::SireSystem::System ( ::SireMove::OpenMMPMEFEP::*annealSystemToLambda_function_type)( ::SireSystem::System &,::SireUnits::Dimension::Time,int ) ;
            annealSystemToLambda_function_type annealSystemToLambda_function_value( &::SireMove::OpenMMPMEFEP::annealSystemToLambda );
            
            OpenMMPMEFEP_exposer.def( 
                "annealSystemToLambda"
                , annealSystemToLambda_function_value
                , ( bp::arg("system"), bp::arg("anneal_step_size"), bp::arg("annealing_steps") )
                , bp::release_gil_policy()
                , "\n annealSystemToLambda will anneal the system to the current alchemical lambda\n value of the system\n Par:am system                Sire System including molegroup, forcefield\n                              positions etc\n Par:am timestep              Default = 0.005. Time step used of the\n equilibration to the desired lambda\n Par:am annealingSteps        Default = 1000. Number of steps used for the\n annealing\n Return:                      Sire system with updated coordinates and\n velocities.\n" );
        
        }
        { //::SireMove::OpenMMPMEFEP::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::OpenMMPMEFEP::*createWorkspace_function_type)( ::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::OpenMMPMEFEP::createWorkspace );
            
            OpenMMPMEFEP_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("map")=SireBase::PropertyMap() )
                , "Create an empty workspace" );
        
        }
        { //::SireMove::OpenMMPMEFEP::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::OpenMMPMEFEP::*createWorkspace_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::OpenMMPMEFEP::createWorkspace );
            
            OpenMMPMEFEP_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )
                , "Create a workspace for this integrator for the molecule group molgroup" );
        
        }
        { //::SireMove::OpenMMPMEFEP::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::OpenMMPMEFEP::*ensemble_function_type)(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::OpenMMPMEFEP::ensemble );
            
            OpenMMPMEFEP_exposer.def( 
                "ensemble"
                , ensemble_function_value
                , bp::release_gil_policy()
                , "Return the ensemble of this integrator" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getAlchemicalValue
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getAlchemicalValue_function_type)(  ) ;
            getAlchemicalValue_function_type getAlchemicalValue_function_value( &::SireMove::OpenMMPMEFEP::getAlchemicalValue );
            
            OpenMMPMEFEP_exposer.def( 
                "getAlchemicalValue"
                , getAlchemicalValue_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getAndersen
        
            typedef bool ( ::SireMove::OpenMMPMEFEP::*getAndersen_function_type)(  ) ;
            getAndersen_function_type getAndersen_function_value( &::SireMove::OpenMMPMEFEP::getAndersen );
            
            OpenMMPMEFEP_exposer.def( 
                "getAndersen"
                , getAndersen_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getAndersenFrequency
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getAndersenFrequency_function_type)(  ) ;
            getAndersenFrequency_function_type getAndersenFrequency_function_value( &::SireMove::OpenMMPMEFEP::getAndersenFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "getAndersenFrequency"
                , getAndersenFrequency_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getBackwardMetropolis
        
            typedef ::QVector< double > ( ::SireMove::OpenMMPMEFEP::*getBackwardMetropolis_function_type)(  ) ;
            getBackwardMetropolis_function_type getBackwardMetropolis_function_value( &::SireMove::OpenMMPMEFEP::getBackwardMetropolis );
            
            OpenMMPMEFEP_exposer.def( 
                "getBackwardMetropolis"
                , getBackwardMetropolis_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getBufferFrequency
        
            typedef int ( ::SireMove::OpenMMPMEFEP::*getBufferFrequency_function_type)(  ) ;
            getBufferFrequency_function_type getBufferFrequency_function_value( &::SireMove::OpenMMPMEFEP::getBufferFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "getBufferFrequency"
                , getBufferFrequency_function_value
                , bp::release_gil_policy()
                , "Get the frequency of buffering coordinates" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getCMMremovalFrequency
        
            typedef int ( ::SireMove::OpenMMPMEFEP::*getCMMremovalFrequency_function_type)(  ) ;
            getCMMremovalFrequency_function_type getCMMremovalFrequency_function_value( &::SireMove::OpenMMPMEFEP::getCMMremovalFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "getCMMremovalFrequency"
                , getCMMremovalFrequency_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getCombiningRules
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getCombiningRules_function_type)(  ) ;
            getCombiningRules_function_type getCombiningRules_function_value( &::SireMove::OpenMMPMEFEP::getCombiningRules );
            
            OpenMMPMEFEP_exposer.def( 
                "getCombiningRules"
                , getCombiningRules_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getConstraintType
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getConstraintType_function_type)(  ) ;
            getConstraintType_function_type getConstraintType_function_value( &::SireMove::OpenMMPMEFEP::getConstraintType );
            
            OpenMMPMEFEP_exposer.def( 
                "getConstraintType"
                , getConstraintType_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getCoulombPower
        
            typedef float ( ::SireMove::OpenMMPMEFEP::*getCoulombPower_function_type)(  ) ;
            getCoulombPower_function_type getCoulombPower_function_value( &::SireMove::OpenMMPMEFEP::getCoulombPower );
            
            OpenMMPMEFEP_exposer.def( 
                "getCoulombPower"
                , getCoulombPower_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getCutoffDistance
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::OpenMMPMEFEP::*getCutoffDistance_function_type)(  ) ;
            getCutoffDistance_function_type getCutoffDistance_function_value( &::SireMove::OpenMMPMEFEP::getCutoffDistance );
            
            OpenMMPMEFEP_exposer.def( 
                "getCutoffDistance"
                , getCutoffDistance_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getCutoffType
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getCutoffType_function_type)(  ) ;
            getCutoffType_function_type getCutoffType_function_value( &::SireMove::OpenMMPMEFEP::getCutoffType );
            
            OpenMMPMEFEP_exposer.def( 
                "getCutoffType"
                , getCutoffType_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getDeltaAlchemical
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getDeltaAlchemical_function_type)(  ) ;
            getDeltaAlchemical_function_type getDeltaAlchemical_function_value( &::SireMove::OpenMMPMEFEP::getDeltaAlchemical );
            
            OpenMMPMEFEP_exposer.def( 
                "getDeltaAlchemical"
                , getDeltaAlchemical_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getDeviceIndex
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getDeviceIndex_function_type)(  ) ;
            getDeviceIndex_function_type getDeviceIndex_function_value( &::SireMove::OpenMMPMEFEP::getDeviceIndex );
            
            OpenMMPMEFEP_exposer.def( 
                "getDeviceIndex"
                , getDeviceIndex_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getEnergies
        
            typedef ::QVector< double > ( ::SireMove::OpenMMPMEFEP::*getEnergies_function_type)(  ) ;
            getEnergies_function_type getEnergies_function_value( &::SireMove::OpenMMPMEFEP::getEnergies );
            
            OpenMMPMEFEP_exposer.def( 
                "getEnergies"
                , getEnergies_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getEnergyFrequency
        
            typedef int ( ::SireMove::OpenMMPMEFEP::*getEnergyFrequency_function_type)(  ) ;
            getEnergyFrequency_function_type getEnergyFrequency_function_value( &::SireMove::OpenMMPMEFEP::getEnergyFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "getEnergyFrequency"
                , getEnergyFrequency_function_value
                , bp::release_gil_policy()
                , "Get the frequency of buffering coordinates" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getFieldDielectric
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getFieldDielectric_function_type)(  ) ;
            getFieldDielectric_function_type getFieldDielectric_function_value( &::SireMove::OpenMMPMEFEP::getFieldDielectric );
            
            OpenMMPMEFEP_exposer.def( 
                "getFieldDielectric"
                , getFieldDielectric_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getForwardMetropolis
        
            typedef ::QVector< double > ( ::SireMove::OpenMMPMEFEP::*getForwardMetropolis_function_type)(  ) ;
            getForwardMetropolis_function_type getForwardMetropolis_function_value( &::SireMove::OpenMMPMEFEP::getForwardMetropolis );
            
            OpenMMPMEFEP_exposer.def( 
                "getForwardMetropolis"
                , getForwardMetropolis_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getFriction
        
            typedef ::SireUnits::Dimension::Time ( ::SireMove::OpenMMPMEFEP::*getFriction_function_type)(  ) ;
            getFriction_function_type getFriction_function_value( &::SireMove::OpenMMPMEFEP::getFriction );
            
            OpenMMPMEFEP_exposer.def( 
                "getFriction"
                , getFriction_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getGradients
        
            typedef ::QVector< double > ( ::SireMove::OpenMMPMEFEP::*getGradients_function_type)(  ) ;
            getGradients_function_type getGradients_function_value( &::SireMove::OpenMMPMEFEP::getGradients );
            
            OpenMMPMEFEP_exposer.def( 
                "getGradients"
                , getGradients_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getIntegrationTolerance
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getIntegrationTolerance_function_type)(  ) ;
            getIntegrationTolerance_function_type getIntegrationTolerance_function_value( &::SireMove::OpenMMPMEFEP::getIntegrationTolerance );
            
            OpenMMPMEFEP_exposer.def( 
                "getIntegrationTolerance"
                , getIntegrationTolerance_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getIntegrator
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getIntegrator_function_type)(  ) ;
            getIntegrator_function_type getIntegrator_function_value( &::SireMove::OpenMMPMEFEP::getIntegrator );
            
            OpenMMPMEFEP_exposer.def( 
                "getIntegrator"
                , getIntegrator_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getMCBarostat
        
            typedef bool ( ::SireMove::OpenMMPMEFEP::*getMCBarostat_function_type)(  ) ;
            getMCBarostat_function_type getMCBarostat_function_value( &::SireMove::OpenMMPMEFEP::getMCBarostat );
            
            OpenMMPMEFEP_exposer.def( 
                "getMCBarostat"
                , getMCBarostat_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getMCBarostatFrequency
        
            typedef int ( ::SireMove::OpenMMPMEFEP::*getMCBarostatFrequency_function_type)(  ) ;
            getMCBarostatFrequency_function_type getMCBarostatFrequency_function_value( &::SireMove::OpenMMPMEFEP::getMCBarostatFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "getMCBarostatFrequency"
                , getMCBarostatFrequency_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getPlatform
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getPlatform_function_type)(  ) ;
            getPlatform_function_type getPlatform_function_value( &::SireMove::OpenMMPMEFEP::getPlatform );
            
            OpenMMPMEFEP_exposer.def( 
                "getPlatform"
                , getPlatform_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getPotentialEnergy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMove::OpenMMPMEFEP::*getPotentialEnergy_function_type)( ::SireSystem::System const & ) ;
            getPotentialEnergy_function_type getPotentialEnergy_function_value( &::SireMove::OpenMMPMEFEP::getPotentialEnergy );
            
            OpenMMPMEFEP_exposer.def( 
                "getPotentialEnergy"
                , getPotentialEnergy_function_value
                , ( bp::arg("system") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getPrecision
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*getPrecision_function_type)(  ) ;
            getPrecision_function_type getPrecision_function_value( &::SireMove::OpenMMPMEFEP::getPrecision );
            
            OpenMMPMEFEP_exposer.def( 
                "getPrecision"
                , getPrecision_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getPressure
        
            typedef ::SireUnits::Dimension::Pressure ( ::SireMove::OpenMMPMEFEP::*getPressure_function_type)(  ) ;
            getPressure_function_type getPressure_function_value( &::SireMove::OpenMMPMEFEP::getPressure );
            
            OpenMMPMEFEP_exposer.def( 
                "getPressure"
                , getPressure_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getRandomSeed
        
            typedef int ( ::SireMove::OpenMMPMEFEP::*getRandomSeed_function_type)(  ) ;
            getRandomSeed_function_type getRandomSeed_function_value( &::SireMove::OpenMMPMEFEP::getRandomSeed );
            
            OpenMMPMEFEP_exposer.def( 
                "getRandomSeed"
                , getRandomSeed_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getReducedPerturbedEnergies
        
            typedef ::QVector< QVector< double > > ( ::SireMove::OpenMMPMEFEP::*getReducedPerturbedEnergies_function_type)(  ) ;
            getReducedPerturbedEnergies_function_type getReducedPerturbedEnergies_function_value( &::SireMove::OpenMMPMEFEP::getReducedPerturbedEnergies );
            
            OpenMMPMEFEP_exposer.def( 
                "getReducedPerturbedEnergies"
                , getReducedPerturbedEnergies_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getRestraint
        
            typedef bool ( ::SireMove::OpenMMPMEFEP::*getRestraint_function_type)(  ) ;
            getRestraint_function_type getRestraint_function_value( &::SireMove::OpenMMPMEFEP::getRestraint );
            
            OpenMMPMEFEP_exposer.def( 
                "getRestraint"
                , getRestraint_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getShiftDelta
        
            typedef double ( ::SireMove::OpenMMPMEFEP::*getShiftDelta_function_type)(  ) ;
            getShiftDelta_function_type getShiftDelta_function_value( &::SireMove::OpenMMPMEFEP::getShiftDelta );
            
            OpenMMPMEFEP_exposer.def( 
                "getShiftDelta"
                , getShiftDelta_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getTemperature
        
            typedef ::SireUnits::Dimension::Temperature ( ::SireMove::OpenMMPMEFEP::*getTemperature_function_type)(  ) ;
            getTemperature_function_type getTemperature_function_value( &::SireMove::OpenMMPMEFEP::getTemperature );
            
            OpenMMPMEFEP_exposer.def( 
                "getTemperature"
                , getTemperature_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::getTimetoSkip
        
            typedef ::SireUnits::Dimension::Time ( ::SireMove::OpenMMPMEFEP::*getTimetoSkip_function_type)(  ) ;
            getTimetoSkip_function_type getTimetoSkip_function_value( &::SireMove::OpenMMPMEFEP::getTimetoSkip );
            
            OpenMMPMEFEP_exposer.def( 
                "getTimetoSkip"
                , getTimetoSkip_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::initialise
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*initialise_function_type)( bool ) ;
            initialise_function_type initialise_function_value( &::SireMove::OpenMMPMEFEP::initialise );
            
            OpenMMPMEFEP_exposer.def( 
                "initialise"
                , initialise_function_value
                , ( bp::arg("fullPME")=(bool)(false) )
                , "\n Initialise the OpenMM Free energy single topology calculation.\n Parameter fullPME is only useful for debugging of e.g. single ion systems.\n initialise() must be called before anything else happens.\n" );
        
        }
        { //::SireMove::OpenMMPMEFEP::integrate
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*integrate_function_type)( ::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireUnits::Dimension::Time,int,bool ) ;
            integrate_function_type integrate_function_value( &::SireMove::OpenMMPMEFEP::integrate );
            
            OpenMMPMEFEP_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("timestep"), bp::arg("nmoves"), bp::arg("record_stats") )
                , bp::release_gil_policy()
                , "\n Main integration methods for advancing dynamics\n Par:am workspace             Sire Integrator workspace\n Par:am nrg_component\n Par:am timestep              Default = 0.002. Integration timestep\n Par:am nmoves                Number of moves\n Par:am record_stats          boolean that tracks recording.\n" );
        
        }
        { //::SireMove::OpenMMPMEFEP::isTimeReversible
        
            typedef bool ( ::SireMove::OpenMMPMEFEP::*isTimeReversible_function_type)(  ) const;
            isTimeReversible_function_type isTimeReversible_function_value( &::SireMove::OpenMMPMEFEP::isTimeReversible );
            
            OpenMMPMEFEP_exposer.def( 
                "isTimeReversible"
                , isTimeReversible_function_value
                , bp::release_gil_policy()
                , "Return whether or not this integrator is time-reversible" );
        
        }
        { //::SireMove::OpenMMPMEFEP::minimiseEnergy
        
            typedef ::SireSystem::System ( ::SireMove::OpenMMPMEFEP::*minimiseEnergy_function_type)( ::SireSystem::System &,double,int ) ;
            minimiseEnergy_function_type minimiseEnergy_function_value( &::SireMove::OpenMMPMEFEP::minimiseEnergy );
            
            OpenMMPMEFEP_exposer.def( 
                "minimiseEnergy"
                , minimiseEnergy_function_value
                , ( bp::arg("system"), bp::arg("tolerance"), bp::arg("max_iteration") )
                , bp::release_gil_policy()
                , "\n <Runs an energy Minimization on the current system.>\n minimizeEnergy will find the nearest local potential energy minimum,\n given the current Sire::System. It calls the\n LocalEnergyMinimizer :: minimize() function of OpenMM.\n Par:am system                Sire System including molegroup, forcefield\n                              positions etc\n Par:am tolerance             Default = 1. This specifies how precisely the\n energy minimum must be located. Minimisation will be halted once the\n root-mean-square value of all force components reaches this tolerance.\n Par:am max_iteration         Default = 1000. this specifies the number of\n iterations are run for the minimisation. If max_iteration = 0, the\n iteration will run until convergence.\n\n Return:                      Sire System, with the updated energy\n minimised coordinates.\n" );
        
        }
        OpenMMPMEFEP_exposer.def( bp::self != bp::self );
        { //::SireMove::OpenMMPMEFEP::operator=
        
            typedef ::SireMove::OpenMMPMEFEP & ( ::SireMove::OpenMMPMEFEP::*assign_function_type)( ::SireMove::OpenMMPMEFEP const & ) ;
            assign_function_type assign_function_value( &::SireMove::OpenMMPMEFEP::operator= );
            
            OpenMMPMEFEP_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        OpenMMPMEFEP_exposer.def( bp::self == bp::self );
        { //::SireMove::OpenMMPMEFEP::setAlchemicalArray
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setAlchemicalArray_function_type)( ::QVector< double > ) ;
            setAlchemicalArray_function_type setAlchemicalArray_function_value( &::SireMove::OpenMMPMEFEP::setAlchemicalArray );
            
            OpenMMPMEFEP_exposer.def( 
                "setAlchemicalArray"
                , setAlchemicalArray_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setAlchemicalValue
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setAlchemicalValue_function_type)( double ) ;
            setAlchemicalValue_function_type setAlchemicalValue_function_value( &::SireMove::OpenMMPMEFEP::setAlchemicalValue );
            
            OpenMMPMEFEP_exposer.def( 
                "setAlchemicalValue"
                , setAlchemicalValue_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the alchemical value used to calculate the free energy change via TI method" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setAndersen
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setAndersen_function_type)( bool ) ;
            setAndersen_function_type setAndersen_function_value( &::SireMove::OpenMMPMEFEP::setAndersen );
            
            OpenMMPMEFEP_exposer.def( 
                "setAndersen"
                , setAndersen_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set Andersen thermostat" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setAndersenFrequency
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setAndersenFrequency_function_type)( double ) ;
            setAndersenFrequency_function_type setAndersenFrequency_function_value( &::SireMove::OpenMMPMEFEP::setAndersenFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "setAndersenFrequency"
                , setAndersenFrequency_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Andersen Thermostat frequency collision" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setBufferFrequency
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setBufferFrequency_function_type)( int ) ;
            setBufferFrequency_function_type setBufferFrequency_function_value( &::SireMove::OpenMMPMEFEP::setBufferFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "setBufferFrequency"
                , setBufferFrequency_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Center of Mass motion removal frequency" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setCMMremovalFrequency
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setCMMremovalFrequency_function_type)( int ) ;
            setCMMremovalFrequency_function_type setCMMremovalFrequency_function_value( &::SireMove::OpenMMPMEFEP::setCMMremovalFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "setCMMremovalFrequency"
                , setCMMremovalFrequency_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Center of Mass motion removal frequency" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setCombiningRules
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setCombiningRules_function_type)( ::QString ) ;
            setCombiningRules_function_type setCombiningRules_function_value( &::SireMove::OpenMMPMEFEP::setCombiningRules );
            
            OpenMMPMEFEP_exposer.def( 
                "setCombiningRules"
                , setCombiningRules_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the combining rules type: arithmetic, geometric" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setConstraintType
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setConstraintType_function_type)( ::QString ) ;
            setConstraintType_function_type setConstraintType_function_value( &::SireMove::OpenMMPMEFEP::setConstraintType );
            
            OpenMMPMEFEP_exposer.def( 
                "setConstraintType"
                , setConstraintType_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Constraint type: none, hbonds, allbonds, hangles" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setCoulombPower
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setCoulombPower_function_type)( float ) ;
            setCoulombPower_function_type setCoulombPower_function_value( &::SireMove::OpenMMPMEFEP::setCoulombPower );
            
            OpenMMPMEFEP_exposer.def( 
                "setCoulombPower"
                , setCoulombPower_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the coulomb power used in the soft core potential" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setCutoffDistance
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setCutoffDistance_function_type)( ::SireUnits::Dimension::Length ) ;
            setCutoffDistance_function_type setCutoffDistance_function_value( &::SireMove::OpenMMPMEFEP::setCutoffDistance );
            
            OpenMMPMEFEP_exposer.def( 
                "setCutoffDistance"
                , setCutoffDistance_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the cutoff distance in A" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setDebug
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setDebug_function_type)( bool ) ;
            setDebug_function_type setDebug_function_value( &::SireMove::OpenMMPMEFEP::setDebug );
            
            OpenMMPMEFEP_exposer.def( 
                "setDebug"
                , setDebug_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setDeltatAlchemical
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setDeltatAlchemical_function_type)( double ) ;
            setDeltatAlchemical_function_type setDeltatAlchemical_function_value( &::SireMove::OpenMMPMEFEP::setDeltatAlchemical );
            
            OpenMMPMEFEP_exposer.def( 
                "setDeltatAlchemical"
                , setDeltatAlchemical_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "\n Set the delta alchemical used in the FEP method\n Par:am deltaalchemical\n" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setDeviceIndex
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setDeviceIndex_function_type)( ::QString ) ;
            setDeviceIndex_function_type setDeviceIndex_function_value( &::SireMove::OpenMMPMEFEP::setDeviceIndex );
            
            OpenMMPMEFEP_exposer.def( 
                "setDeviceIndex"
                , setDeviceIndex_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the OpenMM Platform: CUDA, OpenCL, CPU" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setEnergyFrequency
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setEnergyFrequency_function_type)( int ) ;
            setEnergyFrequency_function_type setEnergyFrequency_function_value( &::SireMove::OpenMMPMEFEP::setEnergyFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "setEnergyFrequency"
                , setEnergyFrequency_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Center of Mass motion removal frequency" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setFieldDielectric
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setFieldDielectric_function_type)( double ) ;
            setFieldDielectric_function_type setFieldDielectric_function_value( &::SireMove::OpenMMPMEFEP::setFieldDielectric );
            
            OpenMMPMEFEP_exposer.def( 
                "setFieldDielectric"
                , setFieldDielectric_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the dielectric constant" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setFriction
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setFriction_function_type)( ::SireUnits::Dimension::Time ) ;
            setFriction_function_type setFriction_function_value( &::SireMove::OpenMMPMEFEP::setFriction );
            
            OpenMMPMEFEP_exposer.def( 
                "setFriction"
                , setFriction_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the friction used in specific Integrator type" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setIntegrationTolerance
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setIntegrationTolerance_function_type)( double ) ;
            setIntegrationTolerance_function_type setIntegrationTolerance_function_value( &::SireMove::OpenMMPMEFEP::setIntegrationTolerance );
            
            OpenMMPMEFEP_exposer.def( 
                "setIntegrationTolerance"
                , setIntegrationTolerance_function_value
                , ( bp::arg("tollerance") )
                , bp::release_gil_policy()
                , "Set the integration tolerance" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setIntegrator
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setIntegrator_function_type)( ::QString ) ;
            setIntegrator_function_type setIntegrator_function_value( &::SireMove::OpenMMPMEFEP::setIntegrator );
            
            OpenMMPMEFEP_exposer.def( 
                "setIntegrator"
                , setIntegrator_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Integrator type" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setMCBarostat
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setMCBarostat_function_type)( bool ) ;
            setMCBarostat_function_type setMCBarostat_function_value( &::SireMove::OpenMMPMEFEP::setMCBarostat );
            
            OpenMMPMEFEP_exposer.def( 
                "setMCBarostat"
                , setMCBarostat_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set Monte Carlo Barostat onoff" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setMCBarostatFrequency
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setMCBarostatFrequency_function_type)( int ) ;
            setMCBarostatFrequency_function_type setMCBarostatFrequency_function_value( &::SireMove::OpenMMPMEFEP::setMCBarostatFrequency );
            
            OpenMMPMEFEP_exposer.def( 
                "setMCBarostatFrequency"
                , setMCBarostatFrequency_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Monte Carlo Barostat frequency in time speps" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setPlatform
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setPlatform_function_type)( ::QString ) ;
            setPlatform_function_type setPlatform_function_value( &::SireMove::OpenMMPMEFEP::setPlatform );
            
            OpenMMPMEFEP_exposer.def( 
                "setPlatform"
                , setPlatform_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the OpenMM Platform: CUDA, OpenCL, CPU" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setPrecision
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setPrecision_function_type)( ::QString ) ;
            setPrecision_function_type setPrecision_function_value( &::SireMove::OpenMMPMEFEP::setPrecision );
            
            OpenMMPMEFEP_exposer.def( 
                "setPrecision"
                , setPrecision_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the OpenMM Precision" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setPressure
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setPressure_function_type)( ::SireUnits::Dimension::Pressure ) ;
            setPressure_function_type setPressure_function_value( &::SireMove::OpenMMPMEFEP::setPressure );
            
            OpenMMPMEFEP_exposer.def( 
                "setPressure"
                , setPressure_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Pressure" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setRandomSeed
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setRandomSeed_function_type)( int ) ;
            setRandomSeed_function_type setRandomSeed_function_value( &::SireMove::OpenMMPMEFEP::setRandomSeed );
            
            OpenMMPMEFEP_exposer.def( 
                "setRandomSeed"
                , setRandomSeed_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Integrator random seed" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setReinitialiseContext
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setReinitialiseContext_function_type)( bool ) ;
            setReinitialiseContext_function_type setReinitialiseContext_function_value( &::SireMove::OpenMMPMEFEP::setReinitialiseContext );
            
            OpenMMPMEFEP_exposer.def( 
                "setReinitialiseContext"
                , setReinitialiseContext_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the flag to reinitialise the context" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setRestraint
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setRestraint_function_type)( bool ) ;
            setRestraint_function_type setRestraint_function_value( &::SireMove::OpenMMPMEFEP::setRestraint );
            
            OpenMMPMEFEP_exposer.def( 
                "setRestraint"
                , setRestraint_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Retraint mode" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setShiftDelta
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setShiftDelta_function_type)( double ) ;
            setShiftDelta_function_type setShiftDelta_function_value( &::SireMove::OpenMMPMEFEP::setShiftDelta );
            
            OpenMMPMEFEP_exposer.def( 
                "setShiftDelta"
                , setShiftDelta_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "\n <Set the shift used in the soft core potential>\n Par:am shiftdelta\n" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setTemperature
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setTemperature_function_type)( ::SireUnits::Dimension::Temperature ) ;
            setTemperature_function_type setTemperature_function_value( &::SireMove::OpenMMPMEFEP::setTemperature );
            
            OpenMMPMEFEP_exposer.def( 
                "setTemperature"
                , setTemperature_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the Temperature" );
        
        }
        { //::SireMove::OpenMMPMEFEP::setTimetoSkip
        
            typedef void ( ::SireMove::OpenMMPMEFEP::*setTimetoSkip_function_type)( ::SireUnits::Dimension::Time ) ;
            setTimetoSkip_function_type setTimetoSkip_function_value( &::SireMove::OpenMMPMEFEP::setTimetoSkip );
            
            OpenMMPMEFEP_exposer.def( 
                "setTimetoSkip"
                , setTimetoSkip_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Get total time to skip" );
        
        }
        { //::SireMove::OpenMMPMEFEP::toString
        
            typedef ::QString ( ::SireMove::OpenMMPMEFEP::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMove::OpenMMPMEFEP::toString );
            
            OpenMMPMEFEP_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this integrator" );
        
        }
        { //::SireMove::OpenMMPMEFEP::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::OpenMMPMEFEP::typeName );
            
            OpenMMPMEFEP_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        OpenMMPMEFEP_exposer.staticmethod( "typeName" );
        OpenMMPMEFEP_exposer.def( "__copy__", &__copy__);
        OpenMMPMEFEP_exposer.def( "__deepcopy__", &__copy__);
        OpenMMPMEFEP_exposer.def( "clone", &__copy__);
        OpenMMPMEFEP_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::OpenMMPMEFEP >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        OpenMMPMEFEP_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::OpenMMPMEFEP >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        OpenMMPMEFEP_exposer.def_pickle(sire_pickle_suite< ::SireMove::OpenMMPMEFEP >());
        OpenMMPMEFEP_exposer.def( "__str__", &__str__< ::SireMove::OpenMMPMEFEP > );
        OpenMMPMEFEP_exposer.def( "__repr__", &__str__< ::SireMove::OpenMMPMEFEP > );
    }

}
