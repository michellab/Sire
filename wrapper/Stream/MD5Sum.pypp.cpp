// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "MD5Sum.pypp.hpp"

namespace bp = boost::python;

#include "md5sum.h"

#include <QByteArray>

#include <QDataStream>

#include <QFile>

#include <QRegExp>

#include <QString>

#include "md5sum.h"

SireStream::MD5Sum __copy__(const SireStream::MD5Sum &other){ return SireStream::MD5Sum(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_MD5Sum_class(){

    { //::SireStream::MD5Sum
        typedef bp::class_< SireStream::MD5Sum > MD5Sum_exposer_t;
        MD5Sum_exposer_t MD5Sum_exposer = MD5Sum_exposer_t( "MD5Sum", "", bp::init< >("Construct a null MD5Sum") );
        bp::scope MD5Sum_scope( MD5Sum_exposer );
        MD5Sum_exposer.def( bp::init< QByteArray const & >(( bp::arg("buffer") ), "Construct an MD5Sum from a buffer") );
        MD5Sum_exposer.def( bp::init< char const *, unsigned int >(( bp::arg("buffer"), bp::arg("sz") ), "\nConstruct an MD5Sum from a const char buffer.\nPar:am buffer The buffer containing the data.\nPar:am sz This size of the buffer. Dont lie otherwise it will crash\nReturn: A constructed, valid MD5Sum object.\n") );
        MD5Sum_exposer.def( bp::init< QString const & >(( bp::arg("file") ), "Construct the MD5Sum for a file") );
        MD5Sum_exposer.def( bp::init< SireStream::MD5Sum const & >(( bp::arg("sum") ), "Copy constructor") );
        MD5Sum_exposer.def( bp::self != bp::self );
        { //::SireStream::MD5Sum::operator=
        
            typedef ::SireStream::MD5Sum const & ( ::SireStream::MD5Sum::*assign_function_type)( ::SireStream::MD5Sum const & ) ;
            assign_function_type assign_function_value( &::SireStream::MD5Sum::operator= );
            
            MD5Sum_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Assignment operator" );
        
        }
        MD5Sum_exposer.def( bp::self == bp::self );
        { //::SireStream::MD5Sum::toString
        
            typedef ::QString ( ::SireStream::MD5Sum::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireStream::MD5Sum::toString );
            
            MD5Sum_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of the digest" );
        
        }
        MD5Sum_exposer.def( "__copy__", &__copy__);
        MD5Sum_exposer.def( "__deepcopy__", &__copy__);
        MD5Sum_exposer.def( "clone", &__copy__);
        MD5Sum_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireStream::MD5Sum >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MD5Sum_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireStream::MD5Sum >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MD5Sum_exposer.def_pickle(sire_pickle_suite< ::SireStream::MD5Sum >());
        MD5Sum_exposer.def( "__str__", &__str__< ::SireStream::MD5Sum > );
        MD5Sum_exposer.def( "__repr__", &__str__< ::SireStream::MD5Sum > );
    }

}
