// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SelectorMBond.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "selectormbond.h"

#include "selectormbond.h"

SireMM::SelectorMBond __copy__(const SireMM::SelectorMBond &other){ return SireMM::SelectorMBond(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_SelectorMBond_class(){

    { //::SireMM::SelectorMBond
        typedef bp::class_< SireMM::SelectorMBond, bp::bases< SireBase::Property > > SelectorMBond_exposer_t;
        SelectorMBond_exposer_t SelectorMBond_exposer = SelectorMBond_exposer_t( "SelectorMBond", "Multi-molecule selector for bonds", bp::init< >("") );
        bp::scope SelectorMBond_scope( SelectorMBond_exposer );
        SelectorMBond_exposer.def( bp::init< SireMM::Bond const & >(( bp::arg("view") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::Molecules const & >(( bp::arg("mols") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("mols") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::MolGroupsBase const & >(( bp::arg("mols") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::SelectResult const & >(( bp::arg("mols") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMM::SelectorBond const & >(( bp::arg("bonds") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::SelectorMol const & >(( bp::arg("mols") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMM::SelectorMBond const &, SireBase::Slice const & >(( bp::arg("bonds"), bp::arg("slice") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMM::SelectorMBond const &, QList< long long > const & >(( bp::arg("bonds"), bp::arg("idxs") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::SelectResult const &, SireMol::BondID const & >(( bp::arg("mols"), bp::arg("bond") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMol::SelectResult const &, SireBase::PropertyMap const & >(( bp::arg("mols"), bp::arg("map") ), "") );
        SelectorMBond_exposer.def( bp::init< SireMM::SelectorMBond const & >(( bp::arg("other") ), "") );
        { //::SireMM::SelectorMBond::IDs
        
            typedef ::QList< SireMol::BondID > ( ::SireMM::SelectorMBond::*IDs_function_type)(  ) const;
            IDs_function_type IDs_function_value( &::SireMM::SelectorMBond::IDs );
            
            SelectorMBond_exposer.def( 
                "IDs"
                , IDs_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atom
        
            typedef ::SireMol::Atom ( ::SireMM::SelectorMBond::*atom_function_type)( int ) const;
            atom_function_type atom_function_value( &::SireMM::SelectorMBond::atom );
            
            SelectorMBond_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atom
        
            typedef ::SireMol::Atom ( ::SireMM::SelectorMBond::*atom_function_type)( ::QString const & ) const;
            atom_function_type atom_function_value( &::SireMM::SelectorMBond::atom );
            
            SelectorMBond_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atom
        
            typedef ::SireMol::Atom ( ::SireMM::SelectorMBond::*atom_function_type)( ::SireMol::AtomID const & ) const;
            atom_function_type atom_function_value( &::SireMM::SelectorMBond::atom );
            
            SelectorMBond_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)(  ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)( int ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)( ::SireBase::Slice const & ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)( ::QList< long long > const & ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)( ::QString const & ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::atoms
        
            typedef ::SireMol::SelectorM< SireMol::Atom > ( ::SireMM::SelectorMBond::*atoms_function_type)( ::SireMol::AtomID const & ) const;
            atoms_function_type atoms_function_value( &::SireMM::SelectorMBond::atoms );
            
            SelectorMBond_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("atomid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chain
        
            typedef ::SireMol::Chain ( ::SireMM::SelectorMBond::*chain_function_type)( int ) const;
            chain_function_type chain_function_value( &::SireMM::SelectorMBond::chain );
            
            SelectorMBond_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chain
        
            typedef ::SireMol::Chain ( ::SireMM::SelectorMBond::*chain_function_type)( ::QString const & ) const;
            chain_function_type chain_function_value( &::SireMM::SelectorMBond::chain );
            
            SelectorMBond_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chain
        
            typedef ::SireMol::Chain ( ::SireMM::SelectorMBond::*chain_function_type)( ::SireMol::ChainID const & ) const;
            chain_function_type chain_function_value( &::SireMM::SelectorMBond::chain );
            
            SelectorMBond_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)(  ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)( int ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)( ::SireBase::Slice const & ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)( ::QList< long long > const & ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)( ::QString const & ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::chains
        
            typedef ::SireMol::SelectorM< SireMol::Chain > ( ::SireMM::SelectorMBond::*chains_function_type)( ::SireMol::ChainID const & ) const;
            chains_function_type chains_function_value( &::SireMM::SelectorMBond::chains );
            
            SelectorMBond_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("chainid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::count
        
            typedef int ( ::SireMM::SelectorMBond::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMM::SelectorMBond::count );
            
            SelectorMBond_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMM::SelectorMBond::*cutGroup_function_type)( int ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMM::SelectorMBond::cutGroup );
            
            SelectorMBond_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMM::SelectorMBond::*cutGroup_function_type)( ::QString const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMM::SelectorMBond::cutGroup );
            
            SelectorMBond_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMM::SelectorMBond::*cutGroup_function_type)( ::SireMol::CGID const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMM::SelectorMBond::cutGroup );
            
            SelectorMBond_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)(  ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)( int ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)( ::SireBase::Slice const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)( ::QList< long long > const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)( ::QString const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::cutGroups
        
            typedef ::SireMol::SelectorM< SireMol::CutGroup > ( ::SireMM::SelectorMBond::*cutGroups_function_type)( ::SireMol::CGID const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMM::SelectorMBond::cutGroups );
            
            SelectorMBond_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("cgid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::evaluate
        
            typedef ::SireMol::EvaluatorM ( ::SireMM::SelectorMBond::*evaluate_function_type)(  ) const;
            evaluate_function_type evaluate_function_value( &::SireMM::SelectorMBond::evaluate );
            
            SelectorMBond_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::isEmpty
        
            typedef bool ( ::SireMM::SelectorMBond::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::SelectorMBond::isEmpty );
            
            SelectorMBond_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecule
        
            typedef ::SireMol::Molecule ( ::SireMM::SelectorMBond::*molecule_function_type)( int ) const;
            molecule_function_type molecule_function_value( &::SireMM::SelectorMBond::molecule );
            
            SelectorMBond_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecule
        
            typedef ::SireMol::Molecule ( ::SireMM::SelectorMBond::*molecule_function_type)( ::QString const & ) const;
            molecule_function_type molecule_function_value( &::SireMM::SelectorMBond::molecule );
            
            SelectorMBond_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecule
        
            typedef ::SireMol::Molecule ( ::SireMM::SelectorMBond::*molecule_function_type)( ::SireMol::MolID const & ) ;
            molecule_function_type molecule_function_value( &::SireMM::SelectorMBond::molecule );
            
            SelectorMBond_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)(  ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)( int ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)( ::SireBase::Slice const & ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)( ::QList< long long > const & ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)( ::QString const & ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::molecules
        
            typedef ::SireMol::SelectorMol ( ::SireMM::SelectorMBond::*molecules_function_type)( ::SireMol::MolID const & ) const;
            molecules_function_type molecules_function_value( &::SireMM::SelectorMBond::molecules );
            
            SelectorMBond_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nAtoms
        
            typedef int ( ::SireMM::SelectorMBond::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMM::SelectorMBond::nAtoms );
            
            SelectorMBond_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nChains
        
            typedef int ( ::SireMM::SelectorMBond::*nChains_function_type)(  ) const;
            nChains_function_type nChains_function_value( &::SireMM::SelectorMBond::nChains );
            
            SelectorMBond_exposer.def( 
                "nChains"
                , nChains_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nCutGroups
        
            typedef int ( ::SireMM::SelectorMBond::*nCutGroups_function_type)(  ) const;
            nCutGroups_function_type nCutGroups_function_value( &::SireMM::SelectorMBond::nCutGroups );
            
            SelectorMBond_exposer.def( 
                "nCutGroups"
                , nCutGroups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nMolecules
        
            typedef int ( ::SireMM::SelectorMBond::*nMolecules_function_type)(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireMM::SelectorMBond::nMolecules );
            
            SelectorMBond_exposer.def( 
                "nMolecules"
                , nMolecules_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nResidues
        
            typedef int ( ::SireMM::SelectorMBond::*nResidues_function_type)(  ) const;
            nResidues_function_type nResidues_function_value( &::SireMM::SelectorMBond::nResidues );
            
            SelectorMBond_exposer.def( 
                "nResidues"
                , nResidues_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::nSegments
        
            typedef int ( ::SireMM::SelectorMBond::*nSegments_function_type)(  ) const;
            nSegments_function_type nSegments_function_value( &::SireMM::SelectorMBond::nSegments );
            
            SelectorMBond_exposer.def( 
                "nSegments"
                , nSegments_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SelectorMBond_exposer.def( bp::self != bp::self );
        { //::SireMM::SelectorMBond::operator()
        
            typedef ::SireMM::Bond ( ::SireMM::SelectorMBond::*__call___function_type)( int ) const;
            __call___function_type __call___function_value( &::SireMM::SelectorMBond::operator() );
            
            SelectorMBond_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator()
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__call___function_type)( ::SireBase::Slice const & ) const;
            __call___function_type __call___function_value( &::SireMM::SelectorMBond::operator() );
            
            SelectorMBond_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("slice") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator()
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__call___function_type)( ::QList< long long > const & ) const;
            __call___function_type __call___function_value( &::SireMM::SelectorMBond::operator() );
            
            SelectorMBond_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("idxs") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator()
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__call___function_type)( ::SireMol::BondID const & ) const;
            __call___function_type __call___function_value( &::SireMM::SelectorMBond::operator() );
            
            SelectorMBond_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("id") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator=
        
            typedef ::SireMM::SelectorMBond & ( ::SireMM::SelectorMBond::*assign_function_type)( ::SireMM::SelectorMBond const & ) ;
            assign_function_type assign_function_value( &::SireMM::SelectorMBond::operator= );
            
            SelectorMBond_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SelectorMBond_exposer.def( bp::self == bp::self );
        { //::SireMM::SelectorMBond::operator[]
        
            typedef ::SireMM::Bond ( ::SireMM::SelectorMBond::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::SelectorMBond::operator[] );
            
            SelectorMBond_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator[]
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__getitem___function_type)( ::SireBase::Slice const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::SelectorMBond::operator[] );
            
            SelectorMBond_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("slice") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator[]
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__getitem___function_type)( ::QList< long long > const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::SelectorMBond::operator[] );
            
            SelectorMBond_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("idxs") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::operator[]
        
            typedef ::SireMM::SelectorMBond ( ::SireMM::SelectorMBond::*__getitem___function_type)( ::SireMol::BondID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::SelectorMBond::operator[] );
            
            SelectorMBond_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("id") )
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residue
        
            typedef ::SireMol::Residue ( ::SireMM::SelectorMBond::*residue_function_type)( int ) const;
            residue_function_type residue_function_value( &::SireMM::SelectorMBond::residue );
            
            SelectorMBond_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residue
        
            typedef ::SireMol::Residue ( ::SireMM::SelectorMBond::*residue_function_type)( ::QString const & ) const;
            residue_function_type residue_function_value( &::SireMM::SelectorMBond::residue );
            
            SelectorMBond_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residue
        
            typedef ::SireMol::Residue ( ::SireMM::SelectorMBond::*residue_function_type)( ::SireMol::ResID const & ) const;
            residue_function_type residue_function_value( &::SireMM::SelectorMBond::residue );
            
            SelectorMBond_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)(  ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)( int ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)( ::SireBase::Slice const & ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)( ::QList< long long > const & ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)( ::QString const & ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::residues
        
            typedef ::SireMol::SelectorM< SireMol::Residue > ( ::SireMM::SelectorMBond::*residues_function_type)( ::SireMol::ResID const & ) const;
            residues_function_type residues_function_value( &::SireMM::SelectorMBond::residues );
            
            SelectorMBond_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("resid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::search
        
            typedef ::SireMol::SelectResult ( ::SireMM::SelectorMBond::*search_function_type)( ::QString const & ) const;
            search_function_type search_function_value( &::SireMM::SelectorMBond::search );
            
            SelectorMBond_exposer.def( 
                "search"
                , search_function_value
                , ( bp::arg("search_string") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segment
        
            typedef ::SireMol::Segment ( ::SireMM::SelectorMBond::*segment_function_type)( int ) const;
            segment_function_type segment_function_value( &::SireMM::SelectorMBond::segment );
            
            SelectorMBond_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segment
        
            typedef ::SireMol::Segment ( ::SireMM::SelectorMBond::*segment_function_type)( ::QString const & ) const;
            segment_function_type segment_function_value( &::SireMM::SelectorMBond::segment );
            
            SelectorMBond_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segment
        
            typedef ::SireMol::Segment ( ::SireMM::SelectorMBond::*segment_function_type)( ::SireMol::SegID const & ) const;
            segment_function_type segment_function_value( &::SireMM::SelectorMBond::segment );
            
            SelectorMBond_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)(  ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)( int ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)( ::SireBase::Slice const & ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("slice") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)( ::QList< long long > const & ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("idxs") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)( ::QString const & ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::segments
        
            typedef ::SireMol::SelectorM< SireMol::Segment > ( ::SireMM::SelectorMBond::*segments_function_type)( ::SireMol::SegID const & ) const;
            segments_function_type segments_function_value( &::SireMM::SelectorMBond::segments );
            
            SelectorMBond_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("segid") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::size
        
            typedef int ( ::SireMM::SelectorMBond::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireMM::SelectorMBond::size );
            
            SelectorMBond_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::toList
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeView > > ( ::SireMM::SelectorMBond::*toList_function_type)(  ) const;
            toList_function_type toList_function_value( &::SireMM::SelectorMBond::toList );
            
            SelectorMBond_exposer.def( 
                "toList"
                , toList_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::toMoleculeGroup
        
            typedef ::SireMol::MoleculeGroup ( ::SireMM::SelectorMBond::*toMoleculeGroup_function_type)(  ) const;
            toMoleculeGroup_function_type toMoleculeGroup_function_value( &::SireMM::SelectorMBond::toMoleculeGroup );
            
            SelectorMBond_exposer.def( 
                "toMoleculeGroup"
                , toMoleculeGroup_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::toSelectResult
        
            typedef ::SireMol::SelectResult ( ::SireMM::SelectorMBond::*toSelectResult_function_type)(  ) const;
            toSelectResult_function_type toSelectResult_function_value( &::SireMM::SelectorMBond::toSelectResult );
            
            SelectorMBond_exposer.def( 
                "toSelectResult"
                , toSelectResult_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::toString
        
            typedef ::QString ( ::SireMM::SelectorMBond::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::SelectorMBond::toString );
            
            SelectorMBond_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SelectorMBond::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::SelectorMBond::typeName );
            
            SelectorMBond_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SelectorMBond_exposer.staticmethod( "typeName" );
        SelectorMBond_exposer.def( "__copy__", &__copy__);
        SelectorMBond_exposer.def( "__deepcopy__", &__copy__);
        SelectorMBond_exposer.def( "clone", &__copy__);
        SelectorMBond_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::SelectorMBond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectorMBond_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::SelectorMBond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectorMBond_exposer.def_pickle(sire_pickle_suite< ::SireMM::SelectorMBond >());
        SelectorMBond_exposer.def( "__str__", &__str__< ::SireMM::SelectorMBond > );
        SelectorMBond_exposer.def( "__repr__", &__str__< ::SireMM::SelectorMBond > );
        SelectorMBond_exposer.def( "__len__", &__len_size< ::SireMM::SelectorMBond > );
    }

}
