// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NoCutoff.pypp.hpp"

namespace bp = boost::python;

#include "SireFF/errors.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "switchingfunction.h"

#include <QMutex>

#include <cmath>

#include <numeric>

#include "switchingfunction.h"

SireMM::NoCutoff __copy__(const SireMM::NoCutoff &other){ return SireMM::NoCutoff(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NoCutoff_class(){

    { //::SireMM::NoCutoff
        typedef bp::class_< SireMM::NoCutoff, bp::bases< SireMM::SwitchingFunction, SireBase::Property > > NoCutoff_exposer_t;
        NoCutoff_exposer_t NoCutoff_exposer = NoCutoff_exposer_t( "NoCutoff", "", bp::init< >("Constructor") );
        bp::scope NoCutoff_scope( NoCutoff_exposer );
        NoCutoff_exposer.def( bp::init< SireMM::NoCutoff const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::NoCutoff::dElectrostaticScaleFactor
        
            typedef double ( ::SireMM::NoCutoff::*dElectrostaticScaleFactor_function_type)( ::SireUnits::Dimension::Length ) const;
            dElectrostaticScaleFactor_function_type dElectrostaticScaleFactor_function_value( &::SireMM::NoCutoff::dElectrostaticScaleFactor );
            
            NoCutoff_exposer.def( 
                "dElectrostaticScaleFactor"
                , dElectrostaticScaleFactor_function_value
                , ( bp::arg("dist") )
                , "Return the derivative of the electrostatic scale factor - this\nwill always be 0 as there is no cutoff" );
        
        }
        { //::SireMM::NoCutoff::dVDWScaleFactor
        
            typedef double ( ::SireMM::NoCutoff::*dVDWScaleFactor_function_type)( ::SireUnits::Dimension::Length ) const;
            dVDWScaleFactor_function_type dVDWScaleFactor_function_value( &::SireMM::NoCutoff::dVDWScaleFactor );
            
            NoCutoff_exposer.def( 
                "dVDWScaleFactor"
                , dVDWScaleFactor_function_value
                , ( bp::arg("dist") )
                , "Return the derivative of the VDW scale factor - this will\nalways be 0 as there is no cutoff" );
        
        }
        { //::SireMM::NoCutoff::electrostaticScaleFactor
        
            typedef double ( ::SireMM::NoCutoff::*electrostaticScaleFactor_function_type)( ::SireUnits::Dimension::Length ) const;
            electrostaticScaleFactor_function_type electrostaticScaleFactor_function_value( &::SireMM::NoCutoff::electrostaticScaleFactor );
            
            NoCutoff_exposer.def( 
                "electrostaticScaleFactor"
                , electrostaticScaleFactor_function_value
                , ( bp::arg("dist") )
                , "Return the scale factor for the electrostatic energies - this\nwill always be 1.0, as there are no cutoffs" );
        
        }
        NoCutoff_exposer.def( bp::self != bp::self );
        { //::SireMM::NoCutoff::operator=
        
            typedef ::SireMM::NoCutoff & ( ::SireMM::NoCutoff::*assign_function_type)( ::SireMM::NoCutoff const & ) ;
            assign_function_type assign_function_value( &::SireMM::NoCutoff::operator= );
            
            NoCutoff_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        NoCutoff_exposer.def( bp::self == bp::self );
        { //::SireMM::NoCutoff::toString
        
            typedef ::QString ( ::SireMM::NoCutoff::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::NoCutoff::toString );
            
            NoCutoff_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of this switching function" );
        
        }
        { //::SireMM::NoCutoff::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::NoCutoff::typeName );
            
            NoCutoff_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::NoCutoff::vdwScaleFactor
        
            typedef double ( ::SireMM::NoCutoff::*vdwScaleFactor_function_type)( ::SireUnits::Dimension::Length ) const;
            vdwScaleFactor_function_type vdwScaleFactor_function_value( &::SireMM::NoCutoff::vdwScaleFactor );
            
            NoCutoff_exposer.def( 
                "vdwScaleFactor"
                , vdwScaleFactor_function_value
                , ( bp::arg("dist") )
                , "Return the scale factor for the vdw energies - this\nwill always be 1.0, as there are no cutoffs" );
        
        }
        NoCutoff_exposer.staticmethod( "typeName" );
        NoCutoff_exposer.def( "__copy__", &__copy__);
        NoCutoff_exposer.def( "__deepcopy__", &__copy__);
        NoCutoff_exposer.def( "clone", &__copy__);
        NoCutoff_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::NoCutoff >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NoCutoff_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::NoCutoff >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NoCutoff_exposer.def( "__str__", &__str__< ::SireMM::NoCutoff > );
        NoCutoff_exposer.def( "__repr__", &__str__< ::SireMM::NoCutoff > );
    }

}
