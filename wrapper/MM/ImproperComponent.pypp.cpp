// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "ImproperComponent.pypp.hpp"

namespace bp = boost::python;

#include "SireFF/ff.h"

#include "SireStream/datastream.h"

#include "internalcomponent.h"

#include "internalcomponent.h"

SireMM::ImproperComponent __copy__(const SireMM::ImproperComponent &other){ return SireMM::ImproperComponent(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_ImproperComponent_class(){

    { //::SireMM::ImproperComponent
        typedef bp::class_< SireMM::ImproperComponent, bp::bases< SireFF::FFComponent, SireCAS::Symbol, SireCAS::ExBase > > ImproperComponent_exposer_t;
        ImproperComponent_exposer_t ImproperComponent_exposer = ImproperComponent_exposer_t( "ImproperComponent", "", bp::init< bp::optional< SireFF::FFName const & > >(( bp::arg("ffname")=SireFF::FFName() ), "Constructor") );
        bp::scope ImproperComponent_scope( ImproperComponent_exposer );
        ImproperComponent_exposer.def( bp::init< SireCAS::Symbol const & >(( bp::arg("symbol") ), "Construct from a symbol\nThrow: SireError::incompatible_error\n") );
        ImproperComponent_exposer.def( bp::init< SireMM::ImproperComponent const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::ImproperComponent::changeEnergy
        
            typedef void ( ::SireMM::ImproperComponent::*changeEnergy_function_type)( ::SireFF::FF &,::SireMM::ImproperEnergy const & ) const;
            changeEnergy_function_type changeEnergy_function_value( &::SireMM::ImproperComponent::changeEnergy );
            
            ImproperComponent_exposer.def( 
                "changeEnergy"
                , changeEnergy_function_value
                , ( bp::arg("ff"), bp::arg("impnrg") )
                , "Change the component of the energy in the forcefield ff\nby delta" );
        
        }
        { //::SireMM::ImproperComponent::setEnergy
        
            typedef void ( ::SireMM::ImproperComponent::*setEnergy_function_type)( ::SireFF::FF &,::SireMM::ImproperEnergy const & ) const;
            setEnergy_function_type setEnergy_function_value( &::SireMM::ImproperComponent::setEnergy );
            
            ImproperComponent_exposer.def( 
                "setEnergy"
                , setEnergy_function_value
                , ( bp::arg("ff"), bp::arg("impnrg") )
                , "Set the component of the energy in the forcefield ff\nto be equal to the passed energy" );
        
        }
        { //::SireMM::ImproperComponent::symbols
        
            typedef ::SireCAS::Symbols ( ::SireMM::ImproperComponent::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::SireMM::ImproperComponent::symbols );
            
            ImproperComponent_exposer.def( 
                "symbols"
                , symbols_function_value
                , "" );
        
        }
        { //::SireMM::ImproperComponent::total
        
            typedef ::SireMM::ImproperComponent const & ( ::SireMM::ImproperComponent::*total_function_type)(  ) const;
            total_function_type total_function_value( &::SireMM::ImproperComponent::total );
            
            ImproperComponent_exposer.def( 
                "total"
                , total_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "" );
        
        }
        { //::SireMM::ImproperComponent::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::ImproperComponent::typeName );
            
            ImproperComponent_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::ImproperComponent::what
        
            typedef char const * ( ::SireMM::ImproperComponent::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::ImproperComponent::what );
            
            ImproperComponent_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        ImproperComponent_exposer.staticmethod( "typeName" );
        ImproperComponent_exposer.def( "__copy__", &__copy__);
        ImproperComponent_exposer.def( "__deepcopy__", &__copy__);
        ImproperComponent_exposer.def( "clone", &__copy__);
        ImproperComponent_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::ImproperComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ImproperComponent_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::ImproperComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ImproperComponent_exposer.def( "__str__", &__str__< ::SireMM::ImproperComponent > );
        ImproperComponent_exposer.def( "__repr__", &__str__< ::SireMM::ImproperComponent > );
        ImproperComponent_exposer.def( "__hash__", &::SireMM::ImproperComponent::hash );
    }

}
