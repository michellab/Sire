// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "InternalParameterNames.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireBase/property.h"

#include "SireBase/stringproperty.h"

#include "SireError/errors.h"

#include "SireFF/detail/atomiccoords3d.h"

#include "SireFF/errors.h"

#include "SireMaths/line.h"

#include "SireMaths/torsion.h"

#include "SireMaths/triangle.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "internalff.h"

#include "tostring.h"

#include <QDebug>

#include <cstdio>

#include "internalff.h"

SireMM::InternalParameterNames __copy__(const SireMM::InternalParameterNames &other){ return SireMM::InternalParameterNames(other); }

const char* pvt_get_name(const SireMM::InternalParameterNames&){ return "SireMM::InternalParameterNames";}

void register_InternalParameterNames_class(){

    { //::SireMM::InternalParameterNames
        typedef bp::class_< SireMM::InternalParameterNames, bp::bases< SireMM::StretchBendTorsionParameterName, SireMM::BendBendParameterName, SireMM::StretchBendParameterName, SireMM::StretchStretchParameterName, SireMM::UreyBradleyParameterName, SireMM::ImproperParameterName, SireMM::DihedralParameterName, SireMM::AngleParameterName, SireMM::BondParameterName > > InternalParameterNames_exposer_t;
        InternalParameterNames_exposer_t InternalParameterNames_exposer = InternalParameterNames_exposer_t( "InternalParameterNames", "", bp::init< >("") );
        bp::scope InternalParameterNames_scope( InternalParameterNames_exposer );
        InternalParameterNames_exposer.def( "__copy__", &__copy__);
        InternalParameterNames_exposer.def( "__deepcopy__", &__copy__);
        InternalParameterNames_exposer.def( "clone", &__copy__);
        InternalParameterNames_exposer.def( "__str__", &pvt_get_name);
        InternalParameterNames_exposer.def( "__repr__", &pvt_get_name);
    }

}
