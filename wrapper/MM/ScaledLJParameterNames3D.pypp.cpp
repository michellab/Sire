// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ScaledLJParameterNames3D.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireBase/errors.h"

#include "SireBase/sparsematrix.hpp"

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMaths/maths.h"

#include "SireMol/atomcoords.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "SireVol/cartesian.h"

#include "ljfunction.h"

#include "ljparameter.h"

#include "ljpotential.h"

#include "switchingfunction.h"

#include <QDebug>

#include "ljpotential.h"

SireMM::ScaledLJParameterNames3D __copy__(const SireMM::ScaledLJParameterNames3D &other){ return SireMM::ScaledLJParameterNames3D(other); }

const char* pvt_get_name(const SireMM::ScaledLJParameterNames3D&){ return "SireMM::ScaledLJParameterNames3D";}

void register_ScaledLJParameterNames3D_class(){

    { //::SireMM::ScaledLJParameterNames3D
        typedef bp::class_< SireMM::ScaledLJParameterNames3D, bp::bases< SireMM::LJParameterName3D, SireMM::LJParameterName > > ScaledLJParameterNames3D_exposer_t;
        ScaledLJParameterNames3D_exposer_t ScaledLJParameterNames3D_exposer = ScaledLJParameterNames3D_exposer_t( "ScaledLJParameterNames3D", "", bp::init< >("") );
        bp::scope ScaledLJParameterNames3D_scope( ScaledLJParameterNames3D_exposer );
        ScaledLJParameterNames3D_exposer.def( "__copy__", &__copy__);
        ScaledLJParameterNames3D_exposer.def( "__deepcopy__", &__copy__);
        ScaledLJParameterNames3D_exposer.def( "clone", &__copy__);
        ScaledLJParameterNames3D_exposer.def( "__str__", &pvt_get_name);
        ScaledLJParameterNames3D_exposer.def( "__repr__", &pvt_get_name);
    }

}
