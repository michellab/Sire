// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "LJParameterName3D.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireBase/errors.h"

#include "SireBase/sparsematrix.hpp"

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMaths/maths.h"

#include "SireMol/atomcoords.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "SireVol/cartesian.h"

#include "ljfunction.h"

#include "ljparameter.h"

#include "ljpotential.h"

#include "switchingfunction.h"

#include <QDebug>

#include "ljpotential.h"

SireMM::LJParameterName3D __copy__(const SireMM::LJParameterName3D &other){ return SireMM::LJParameterName3D(other); }

const char* pvt_get_name(const SireMM::LJParameterName3D&){ return "SireMM::LJParameterName3D";}

void register_LJParameterName3D_class(){

    { //::SireMM::LJParameterName3D
        typedef bp::class_< SireMM::LJParameterName3D, bp::bases< SireMM::LJParameterName > > LJParameterName3D_exposer_t;
        LJParameterName3D_exposer_t LJParameterName3D_exposer = LJParameterName3D_exposer_t( "LJParameterName3D", "", bp::init< >("") );
        bp::scope LJParameterName3D_scope( LJParameterName3D_exposer );
        LJParameterName3D_exposer.def( "__copy__", &__copy__);
        LJParameterName3D_exposer.def( "__deepcopy__", &__copy__);
        LJParameterName3D_exposer.def( "clone", &__copy__);
        LJParameterName3D_exposer.def( "__str__", &pvt_get_name);
        LJParameterName3D_exposer.def( "__repr__", &pvt_get_name);
    }

}
