// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoulombNBPairs.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "cljnbpairs.h"

#include "cljnbpairs.h"

SireMM::CoulombNBPairs __copy__(const SireMM::CoulombNBPairs &other){ return SireMM::CoulombNBPairs(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CoulombNBPairs_class(){

    { //::SireMM::CoulombNBPairs
        typedef bp::class_< SireMM::CoulombNBPairs, bp::bases< SireMM::AtomPairs<SireMM::CoulombScaleFactor>, SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > CoulombNBPairs_exposer_t;
        CoulombNBPairs_exposer_t CoulombNBPairs_exposer = CoulombNBPairs_exposer_t( "CoulombNBPairs", "", bp::init< >("Null constructor") );
        bp::scope CoulombNBPairs_scope( CoulombNBPairs_exposer );
        CoulombNBPairs_exposer.def( bp::init< SireMol::MoleculeInfoData const &, bp::optional< SireMM::CoulombScaleFactor const & > >(( bp::arg("molinfo"), bp::arg("default_scale")=SireMM::CoulombScaleFactor(1.0e+0) ), "Construct, using default_scale for all of the atom-atom\ninteractions in the molecule molinfo") );
        CoulombNBPairs_exposer.def( bp::init< SireMol::MoleculeView const &, bp::optional< SireMM::CoulombScaleFactor const & > >(( bp::arg("molview"), bp::arg("default_scale")=SireMM::CoulombScaleFactor(1.0e+0) ), "Construct for the molecule viewed in molview") );
        CoulombNBPairs_exposer.def( bp::init< SireMM::CLJNBPairs const & >(( bp::arg("cljpairs") ), "Construct from the coulomb scaling factors in cljpairs") );
        CoulombNBPairs_exposer.def( bp::init< SireMM::CoulombNBPairs const & >(( bp::arg("other") ), "Copy constructor") );
        CoulombNBPairs_exposer.def( bp::self != bp::self );
        { //::SireMM::CoulombNBPairs::operator=
        
            typedef ::SireMM::CoulombNBPairs & ( ::SireMM::CoulombNBPairs::*assign_function_type)( ::SireMM::CoulombNBPairs const & ) ;
            assign_function_type assign_function_value( &::SireMM::CoulombNBPairs::operator= );
            
            CoulombNBPairs_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireMM::CoulombNBPairs::operator=
        
            typedef ::SireMM::CoulombNBPairs & ( ::SireMM::CoulombNBPairs::*assign_function_type)( ::SireMM::CLJNBPairs const & ) ;
            assign_function_type assign_function_value( &::SireMM::CoulombNBPairs::operator= );
            
            CoulombNBPairs_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("cljpairs") )
                , bp::return_self< >()
                , "" );
        
        }
        CoulombNBPairs_exposer.def( bp::self == bp::self );
        { //::SireMM::CoulombNBPairs::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CoulombNBPairs::typeName );
            
            CoulombNBPairs_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        CoulombNBPairs_exposer.staticmethod( "typeName" );
        CoulombNBPairs_exposer.def( "__copy__", &__copy__);
        CoulombNBPairs_exposer.def( "__deepcopy__", &__copy__);
        CoulombNBPairs_exposer.def( "clone", &__copy__);
        CoulombNBPairs_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CoulombNBPairs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombNBPairs_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CoulombNBPairs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombNBPairs_exposer.def( "__str__", &__str__< ::SireMM::CoulombNBPairs > );
        CoulombNBPairs_exposer.def( "__repr__", &__str__< ::SireMM::CoulombNBPairs > );
    }

}
