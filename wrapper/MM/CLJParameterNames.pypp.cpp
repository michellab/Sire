// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJParameterNames.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireBase/errors.h"

#include "SireBase/sparsematrix.hpp"

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMaths/maths.h"

#include "SireMol/atomcoords.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "SireVol/cartesian.h"

#include "cljpotential.h"

#include "ljparameter.h"

#include "switchingfunction.h"

#include <QDebug>

#include "cljpotential.h"

SireMM::CLJParameterNames __copy__(const SireMM::CLJParameterNames &other){ return SireMM::CLJParameterNames(other); }

const char* pvt_get_name(const SireMM::CLJParameterNames&){ return "SireMM::CLJParameterNames";}

void register_CLJParameterNames_class(){

    { //::SireMM::CLJParameterNames
        typedef bp::class_< SireMM::CLJParameterNames, bp::bases< SireMM::LJParameterName, SireMM::ChargeParameterName > > CLJParameterNames_exposer_t;
        CLJParameterNames_exposer_t CLJParameterNames_exposer = CLJParameterNames_exposer_t( "CLJParameterNames", "", bp::init< >("") );
        bp::scope CLJParameterNames_scope( CLJParameterNames_exposer );
        CLJParameterNames_exposer.def( "__copy__", &__copy__);
        CLJParameterNames_exposer.def( "__deepcopy__", &__copy__);
        CLJParameterNames_exposer.def( "clone", &__copy__);
        CLJParameterNames_exposer.def( "__str__", &pvt_get_name);
        CLJParameterNames_exposer.def( "__repr__", &pvt_get_name);
    }

}
