// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoulombScaleFactor.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "cljnbpairs.h"

#include "cljnbpairs.h"

SireMM::CoulombScaleFactor __copy__(const SireMM::CoulombScaleFactor &other){ return SireMM::CoulombScaleFactor(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::CoulombScaleFactor&){ return "SireMM::CoulombScaleFactor";}

void register_CoulombScaleFactor_class(){

    { //::SireMM::CoulombScaleFactor
        typedef bp::class_< SireMM::CoulombScaleFactor > CoulombScaleFactor_exposer_t;
        CoulombScaleFactor_exposer_t CoulombScaleFactor_exposer = CoulombScaleFactor_exposer_t( "CoulombScaleFactor", "", bp::init< bp::optional< double > >(( bp::arg("scl")=0 ), "Construct with the Coulomb scale factor equal to scl") );
        bp::scope CoulombScaleFactor_scope( CoulombScaleFactor_exposer );
        CoulombScaleFactor_exposer.def( bp::init< SireMM::CoulombScaleFactor const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::CoulombScaleFactor::coulomb
        
            typedef double ( ::SireMM::CoulombScaleFactor::*coulomb_function_type)(  ) const;
            coulomb_function_type coulomb_function_value( &::SireMM::CoulombScaleFactor::coulomb );
            
            CoulombScaleFactor_exposer.def( 
                "coulomb"
                , coulomb_function_value
                , "Return the Coulomb parameter scaling factor" );
        
        }
        CoulombScaleFactor_exposer.def( bp::self != bp::self );
        { //::SireMM::CoulombScaleFactor::operator=
        
            typedef ::SireMM::CoulombScaleFactor & ( ::SireMM::CoulombScaleFactor::*assign_function_type)( ::SireMM::CoulombScaleFactor const & ) ;
            assign_function_type assign_function_value( &::SireMM::CoulombScaleFactor::operator= );
            
            CoulombScaleFactor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CoulombScaleFactor_exposer.def( bp::self == bp::self );
        { //::SireMM::CoulombScaleFactor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CoulombScaleFactor::typeName );
            
            CoulombScaleFactor_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::CoulombScaleFactor::what
        
            typedef char const * ( ::SireMM::CoulombScaleFactor::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::CoulombScaleFactor::what );
            
            CoulombScaleFactor_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        CoulombScaleFactor_exposer.staticmethod( "typeName" );
        CoulombScaleFactor_exposer.def( "__copy__", &__copy__);
        CoulombScaleFactor_exposer.def( "__deepcopy__", &__copy__);
        CoulombScaleFactor_exposer.def( "clone", &__copy__);
        CoulombScaleFactor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CoulombScaleFactor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombScaleFactor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CoulombScaleFactor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombScaleFactor_exposer.def( "__str__", &pvt_get_name);
        CoulombScaleFactor_exposer.def( "__repr__", &pvt_get_name);
    }

}
