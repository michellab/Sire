// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJSoftIntraFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireBase/lengthproperty.h"

#include "SireBase/numberproperty.h"

#include "SireBase/properties.h"

#include "SireBase/stringproperty.h"

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/cartesian.h"

#include "SireVol/gridinfo.h"

#include "SireVol/periodicbox.h"

#include "cljboxes.h"

#include "cljfunction.h"

#include "switchingfunction.h"

#include "tbb/blocked_range.h"

#include "tbb/parallel_for.h"

#include "tostring.h"

#include <QElapsedTimer>

#include "cljfunction.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJSoftIntraFunction_class(){

    { //::SireMM::CLJSoftIntraFunction
        typedef bp::class_< SireMM::CLJSoftIntraFunction, bp::bases< SireMM::CLJIntraFunction, SireMM::CLJCutoffFunction, SireMM::CLJFunction, SireBase::Property >, boost::noncopyable > CLJSoftIntraFunction_exposer_t;
        CLJSoftIntraFunction_exposer_t CLJSoftIntraFunction_exposer = CLJSoftIntraFunction_exposer_t( "CLJSoftIntraFunction", "", bp::no_init );
        bp::scope CLJSoftIntraFunction_scope( CLJSoftIntraFunction_exposer );
        { //::SireMM::CLJSoftIntraFunction::alpha
        
            typedef float ( ::SireMM::CLJSoftIntraFunction::*alpha_function_type)(  ) const;
            alpha_function_type alpha_function_value( &::SireMM::CLJSoftIntraFunction::alpha );
            
            CLJSoftIntraFunction_exposer.def( 
                "alpha"
                , alpha_function_value
                , "Return the soft-core alpha value. A value of 0 is a completely hard\npotential, while increasing values of alpha will increasingly soften\nthe potential" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::containsProperty
        
            typedef bool ( ::SireMM::CLJSoftIntraFunction::*containsProperty_function_type)( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireMM::CLJSoftIntraFunction::containsProperty );
            
            CLJSoftIntraFunction_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") )
                , "Return whether or not this function contains a property called name" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::coulombPower
        
            typedef float ( ::SireMM::CLJSoftIntraFunction::*coulombPower_function_type)(  ) const;
            coulombPower_function_type coulombPower_function_value( &::SireMM::CLJSoftIntraFunction::coulombPower );
            
            CLJSoftIntraFunction_exposer.def( 
                "coulombPower"
                , coulombPower_function_value
                , "Return the soft-core coulomb_power parameter. This is used to soften\nthe electrostatic interactions" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::isSoftened
        
            typedef bool ( ::SireMM::CLJSoftIntraFunction::*isSoftened_function_type)(  ) const;
            isSoftened_function_type isSoftened_function_value( &::SireMM::CLJSoftIntraFunction::isSoftened );
            
            CLJSoftIntraFunction_exposer.def( 
                "isSoftened"
                , isSoftened_function_value
                , "Return whether or not this is a softened function" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::properties
        
            typedef ::SireBase::Properties ( ::SireMM::CLJSoftIntraFunction::*properties_function_type)(  ) const;
            properties_function_type properties_function_value( &::SireMM::CLJSoftIntraFunction::properties );
            
            CLJSoftIntraFunction_exposer.def( 
                "properties"
                , properties_function_value
                , "Return the properties that can be set in this function" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::property
        
            typedef ::SireBase::PropertyPtr ( ::SireMM::CLJSoftIntraFunction::*property_function_type)( ::QString const & ) const;
            property_function_type property_function_value( &::SireMM::CLJSoftIntraFunction::property );
            
            CLJSoftIntraFunction_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , "Return the value of the property with name name" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::setAlpha
        
            typedef void ( ::SireMM::CLJSoftIntraFunction::*setAlpha_function_type)( float ) ;
            setAlpha_function_type setAlpha_function_value( &::SireMM::CLJSoftIntraFunction::setAlpha );
            
            CLJSoftIntraFunction_exposer.def( 
                "setAlpha"
                , setAlpha_function_value
                , ( bp::arg("alpha") )
                , "Set the soft-core alpha parameter" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::setCoulombPower
        
            typedef void ( ::SireMM::CLJSoftIntraFunction::*setCoulombPower_function_type)( float ) ;
            setCoulombPower_function_type setCoulombPower_function_value( &::SireMM::CLJSoftIntraFunction::setCoulombPower );
            
            CLJSoftIntraFunction_exposer.def( 
                "setCoulombPower"
                , setCoulombPower_function_value
                , ( bp::arg("power") )
                , "Set the soft-core coulomb power parameter" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::setProperty
        
            typedef ::SireMM::CLJFunctionPtr ( ::SireMM::CLJSoftIntraFunction::*setProperty_function_type)( ::QString const &,::SireBase::Property const & ) const;
            setProperty_function_type setProperty_function_value( &::SireMM::CLJSoftIntraFunction::setProperty );
            
            CLJSoftIntraFunction_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") )
                , "Set the property with name name to value value" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::setShiftDelta
        
            typedef void ( ::SireMM::CLJSoftIntraFunction::*setShiftDelta_function_type)( float ) ;
            setShiftDelta_function_type setShiftDelta_function_value( &::SireMM::CLJSoftIntraFunction::setShiftDelta );
            
            CLJSoftIntraFunction_exposer.def( 
                "setShiftDelta"
                , setShiftDelta_function_value
                , ( bp::arg("shift") )
                , "Set the soft-core shift delta parameter" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::shiftDelta
        
            typedef float ( ::SireMM::CLJSoftIntraFunction::*shiftDelta_function_type)(  ) const;
            shiftDelta_function_type shiftDelta_function_value( &::SireMM::CLJSoftIntraFunction::shiftDelta );
            
            CLJSoftIntraFunction_exposer.def( 
                "shiftDelta"
                , shiftDelta_function_value
                , "Return the soft-core shift_delta parameter. This is used to soften\nthe LJ interactions" );
        
        }
        { //::SireMM::CLJSoftIntraFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJSoftIntraFunction::typeName );
            
            CLJSoftIntraFunction_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        CLJSoftIntraFunction_exposer.staticmethod( "typeName" );
        CLJSoftIntraFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJSoftIntraFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJSoftIntraFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJSoftIntraFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJSoftIntraFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJSoftIntraFunction > );
        CLJSoftIntraFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJSoftIntraFunction > );
    }

}
