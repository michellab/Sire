// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "CoulombPotentialInterface_IntraCoulombPotential_.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "intracoulombff.h"

#include "intracoulombff.h"

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::CoulombPotentialInterface<SireMM::IntraCoulombPotential>&){ return "SireMM::CoulombPotentialInterface<SireMM::IntraCoulombPotential>";}

void register_CoulombPotentialInterface_IntraCoulombPotential__class(){

    { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >
        typedef bp::class_< SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >, boost::noncopyable > CoulombPotentialInterface_IntraCoulombPotential__exposer_t;
        CoulombPotentialInterface_IntraCoulombPotential__exposer_t CoulombPotentialInterface_IntraCoulombPotential__exposer = CoulombPotentialInterface_IntraCoulombPotential__exposer_t( "CoulombPotentialInterface_IntraCoulombPotential_", "", bp::no_init );
        bp::scope CoulombPotentialInterface_IntraCoulombPotential__scope( CoulombPotentialInterface_IntraCoulombPotential__exposer );
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::containsProperty
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*containsProperty_function_type)( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::containsProperty );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") )
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::parameters
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef ::SireMM::ScaledChargeParameterNames3D ( *parameters_function_type )(  );
            parameters_function_type parameters_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::parameters );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "parameters"
                , parameters_function_value
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::properties
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef ::SireBase::Properties const & ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*properties_function_type)(  ) const;
            properties_function_type properties_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::properties );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "properties"
                , properties_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::property
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef ::SireBase::Property const & ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*property_function_type)( ::QString const & ) const;
            property_function_type property_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::property );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>()
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setProperty
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*setProperty_function_type)( ::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setProperty );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") )
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setShiftElectrostatics
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*setShiftElectrostatics_function_type)( bool ) ;
            setShiftElectrostatics_function_type setShiftElectrostatics_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setShiftElectrostatics );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "setShiftElectrostatics"
                , setShiftElectrostatics_function_value
                , ( bp::arg("switchelectro") )
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setSpace
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*setSpace_function_type)( ::SireVol::Space const & ) ;
            setSpace_function_type setSpace_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setSpace );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "setSpace"
                , setSpace_function_value
                , ( bp::arg("new_space") )
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setSwitchingFunction
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*setSwitchingFunction_function_type)( ::SireMM::SwitchingFunction const & ) ;
            setSwitchingFunction_function_type setSwitchingFunction_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::setSwitchingFunction );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "setSwitchingFunction"
                , setSwitchingFunction_function_value
                , ( bp::arg("new_switchfunc") )
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::shiftElectrostatics
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef bool ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*shiftElectrostatics_function_type)(  ) const;
            shiftElectrostatics_function_type shiftElectrostatics_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::shiftElectrostatics );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "shiftElectrostatics"
                , shiftElectrostatics_function_value
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::space
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef ::SireVol::Space const & ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*space_function_type)(  ) const;
            space_function_type space_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::space );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "space"
                , space_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "" );
        
        }
        { //::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::switchingFunction
        
            typedef SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential > exported_class_t;
            typedef ::SireMM::SwitchingFunction const & ( ::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::*switchingFunction_function_type)(  ) const;
            switchingFunction_function_type switchingFunction_function_value( &::SireMM::CoulombPotentialInterface< SireMM::IntraCoulombPotential >::switchingFunction );
            
            CoulombPotentialInterface_IntraCoulombPotential__exposer.def( 
                "switchingFunction"
                , switchingFunction_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "" );
        
        }
        CoulombPotentialInterface_IntraCoulombPotential__exposer.staticmethod( "parameters" );
        CoulombPotentialInterface_IntraCoulombPotential__exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CoulombPotentialInterface<SireMM::IntraCoulombPotential> >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombPotentialInterface_IntraCoulombPotential__exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CoulombPotentialInterface<SireMM::IntraCoulombPotential> >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombPotentialInterface_IntraCoulombPotential__exposer.def( "__str__", &pvt_get_name);
        CoulombPotentialInterface_IntraCoulombPotential__exposer.def( "__repr__", &pvt_get_name);
    }

}
