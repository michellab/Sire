// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoulombProbe.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "cljprobe.h"

#include "cljprobe.h"

SireMM::CoulombProbe __copy__(const SireMM::CoulombProbe &other){ return SireMM::CoulombProbe(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CoulombProbe_class(){

    { //::SireMM::CoulombProbe
        typedef bp::class_< SireMM::CoulombProbe, bp::bases< SireFF::Probe, SireBase::Property > > CoulombProbe_exposer_t;
        CoulombProbe_exposer_t CoulombProbe_exposer = CoulombProbe_exposer_t( "CoulombProbe", "", bp::init< >("Construct a default probe (+1 unit charge)") );
        bp::scope CoulombProbe_scope( CoulombProbe_exposer );
        CoulombProbe_exposer.def( bp::init< SireUnits::Dimension::Charge >(( bp::arg("charge") ), "Construct a probe with charge charge") );
        CoulombProbe_exposer.def( bp::init< SireMM::CLJProbe const & >(( bp::arg("cljprobe") ), "Construct a probe with charge taken from cljprobe") );
        CoulombProbe_exposer.def( bp::init< SireFF::Probe const & >(( bp::arg("probe") ), "Construct from the passed probe") );
        CoulombProbe_exposer.def( bp::init< SireMM::CoulombProbe const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::CoulombProbe::charge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireMM::CoulombProbe::*charge_function_type)(  ) const;
            charge_function_type charge_function_value( &::SireMM::CoulombProbe::charge );
            
            CoulombProbe_exposer.def( 
                "charge"
                , charge_function_value
                , "" );
        
        }
        CoulombProbe_exposer.def( bp::self != bp::self );
        { //::SireMM::CoulombProbe::operator=
        
            typedef ::SireMM::CoulombProbe & ( ::SireMM::CoulombProbe::*assign_function_type)( ::SireMM::CoulombProbe const & ) ;
            assign_function_type assign_function_value( &::SireMM::CoulombProbe::operator= );
            
            CoulombProbe_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CoulombProbe_exposer.def( bp::self == bp::self );
        { //::SireMM::CoulombProbe::reducedCharge
        
            typedef double ( ::SireMM::CoulombProbe::*reducedCharge_function_type)(  ) const;
            reducedCharge_function_type reducedCharge_function_value( &::SireMM::CoulombProbe::reducedCharge );
            
            CoulombProbe_exposer.def( 
                "reducedCharge"
                , reducedCharge_function_value
                , "" );
        
        }
        { //::SireMM::CoulombProbe::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CoulombProbe::typeName );
            
            CoulombProbe_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        CoulombProbe_exposer.staticmethod( "typeName" );
        CoulombProbe_exposer.def( "__copy__", &__copy__);
        CoulombProbe_exposer.def( "__deepcopy__", &__copy__);
        CoulombProbe_exposer.def( "clone", &__copy__);
        CoulombProbe_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CoulombProbe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombProbe_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CoulombProbe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoulombProbe_exposer.def( "__str__", &__str__< ::SireMM::CoulombProbe > );
        CoulombProbe_exposer.def( "__repr__", &__str__< ::SireMM::CoulombProbe > );
    }

}
