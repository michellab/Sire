// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJIntraRFFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/numberproperty.h"

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireMaths/multifloat.h"

#include "SireMaths/multiint.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "SireVol/gridinfo.h"

#include "cljrffunction.h"

#include <QDebug>

#include <QElapsedTimer>

#include "cljrffunction.h"

SireMM::CLJIntraRFFunction __copy__(const SireMM::CLJIntraRFFunction &other){ return SireMM::CLJIntraRFFunction(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJIntraRFFunction_class(){

    { //::SireMM::CLJIntraRFFunction
        typedef bp::class_< SireMM::CLJIntraRFFunction, bp::bases< SireMM::CLJIntraFunction, SireMM::CLJCutoffFunction, SireMM::CLJFunction, SireBase::Property > > CLJIntraRFFunction_exposer_t;
        CLJIntraRFFunction_exposer_t CLJIntraRFFunction_exposer = CLJIntraRFFunction_exposer_t( "CLJIntraRFFunction", "", bp::init< >("") );
        bp::scope CLJIntraRFFunction_scope( CLJIntraRFFunction_exposer );
        CLJIntraRFFunction_exposer.def( bp::init< SireUnits::Dimension::Length >(( bp::arg("cutoff") ), "Copy constructor") );
        CLJIntraRFFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireUnits::Dimension::Length >(( bp::arg("coul_cutoff"), bp::arg("lj_cutoff") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length >(( bp::arg("space"), bp::arg("cutoff") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireUnits::Dimension::Length >(( bp::arg("space"), bp::arg("coul_cutoff"), bp::arg("lj_cutoff") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("coul_cutoff"), bp::arg("lj_cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireVol::Space const &, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("combining_rules") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("coul_cutoff"), bp::arg("lj_cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraRFFunction_exposer.def( bp::init< SireMM::CLJIntraRFFunction const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::CLJIntraRFFunction::containsProperty
        
            typedef bool ( ::SireMM::CLJIntraRFFunction::*containsProperty_function_type)( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireMM::CLJIntraRFFunction::containsProperty );
            
            CLJIntraRFFunction_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") )
                , "Return whether or not this function contains a property called name" );
        
        }
        { //::SireMM::CLJIntraRFFunction::defaultRFFunction
        
            typedef ::SireMM::CLJFunctionPtr ( *defaultRFFunction_function_type )(  );
            defaultRFFunction_function_type defaultRFFunction_function_value( &::SireMM::CLJIntraRFFunction::defaultRFFunction );
            
            CLJIntraRFFunction_exposer.def( 
                "defaultRFFunction"
                , defaultRFFunction_function_value
                , "" );
        
        }
        { //::SireMM::CLJIntraRFFunction::dielectric
        
            typedef float ( ::SireMM::CLJIntraRFFunction::*dielectric_function_type)(  ) const;
            dielectric_function_type dielectric_function_value( &::SireMM::CLJIntraRFFunction::dielectric );
            
            CLJIntraRFFunction_exposer.def( 
                "dielectric"
                , dielectric_function_value
                , "Return the value of the dielectric constant" );
        
        }
        CLJIntraRFFunction_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJIntraRFFunction::operator=
        
            typedef ::SireMM::CLJIntraRFFunction & ( ::SireMM::CLJIntraRFFunction::*assign_function_type)( ::SireMM::CLJIntraRFFunction const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJIntraRFFunction::operator= );
            
            CLJIntraRFFunction_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CLJIntraRFFunction_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJIntraRFFunction::properties
        
            typedef ::SireBase::Properties ( ::SireMM::CLJIntraRFFunction::*properties_function_type)(  ) const;
            properties_function_type properties_function_value( &::SireMM::CLJIntraRFFunction::properties );
            
            CLJIntraRFFunction_exposer.def( 
                "properties"
                , properties_function_value
                , "Return the properties of this function" );
        
        }
        { //::SireMM::CLJIntraRFFunction::property
        
            typedef ::SireBase::PropertyPtr ( ::SireMM::CLJIntraRFFunction::*property_function_type)( ::QString const & ) const;
            property_function_type property_function_value( &::SireMM::CLJIntraRFFunction::property );
            
            CLJIntraRFFunction_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , "Return the value of the property with name name" );
        
        }
        { //::SireMM::CLJIntraRFFunction::setDielectric
        
            typedef void ( ::SireMM::CLJIntraRFFunction::*setDielectric_function_type)( float ) ;
            setDielectric_function_type setDielectric_function_value( &::SireMM::CLJIntraRFFunction::setDielectric );
            
            CLJIntraRFFunction_exposer.def( 
                "setDielectric"
                , setDielectric_function_value
                , ( bp::arg("dielectric") )
                , "Set the dielectric constant to dielectric" );
        
        }
        { //::SireMM::CLJIntraRFFunction::setProperty
        
            typedef ::SireMM::CLJFunctionPtr ( ::SireMM::CLJIntraRFFunction::*setProperty_function_type)( ::QString const &,::SireBase::Property const & ) const;
            setProperty_function_type setProperty_function_value( &::SireMM::CLJIntraRFFunction::setProperty );
            
            CLJIntraRFFunction_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") )
                , "Return a copy of this function where the property name has been set to the\nvalue value" );
        
        }
        { //::SireMM::CLJIntraRFFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJIntraRFFunction::typeName );
            
            CLJIntraRFFunction_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::CLJIntraRFFunction::what
        
            typedef char const * ( ::SireMM::CLJIntraRFFunction::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::CLJIntraRFFunction::what );
            
            CLJIntraRFFunction_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        CLJIntraRFFunction_exposer.staticmethod( "defaultRFFunction" );
        CLJIntraRFFunction_exposer.staticmethod( "typeName" );
        CLJIntraRFFunction_exposer.def( "__copy__", &__copy__);
        CLJIntraRFFunction_exposer.def( "__deepcopy__", &__copy__);
        CLJIntraRFFunction_exposer.def( "clone", &__copy__);
        CLJIntraRFFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJIntraRFFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraRFFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJIntraRFFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraRFFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJIntraRFFunction > );
        CLJIntraRFFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJIntraRFFunction > );
    }

}
