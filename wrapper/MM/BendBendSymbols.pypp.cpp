// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "BendBendSymbols.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMol/cgidx.h"

#include "SireMol/molecule.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireVol/coordgroup.h"

#include "internalparameters.h"

#include "sireglobal.h"

#include "tostring.h"

#include <algorithm>

#include "internalparameters.h"

SireMM::BendBendSymbols __copy__(const SireMM::BendBendSymbols &other){ return SireMM::BendBendSymbols(other); }

const char* pvt_get_name(const SireMM::BendBendSymbols&){ return "SireMM::BendBendSymbols";}

void register_BendBendSymbols_class(){

    { //::SireMM::BendBendSymbols
        typedef bp::class_< SireMM::BendBendSymbols, bp::bases< SireMM::InternalSymbolsBase > > BendBendSymbols_exposer_t;
        BendBendSymbols_exposer_t BendBendSymbols_exposer = BendBendSymbols_exposer_t( "BendBendSymbols", "", bp::init< >("") );
        bp::scope BendBendSymbols_scope( BendBendSymbols_exposer );
        { //::SireMM::BendBendSymbols::theta012
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::BendBendSymbols::*theta012_function_type)(  ) const;
            theta012_function_type theta012_function_value( &::SireMM::BendBendSymbols::theta012 );
            
            BendBendSymbols_exposer.def( 
                "theta012"
                , theta012_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the angle between atoms 0-1-2, theta_\n{012}" );
        
        }
        { //::SireMM::BendBendSymbols::theta213
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::BendBendSymbols::*theta213_function_type)(  ) const;
            theta213_function_type theta213_function_value( &::SireMM::BendBendSymbols::theta213 );
            
            BendBendSymbols_exposer.def( 
                "theta213"
                , theta213_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the angle between atoms 2-1-3, theta_\n{213}" );
        
        }
        { //::SireMM::BendBendSymbols::theta310
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::BendBendSymbols::*theta310_function_type)(  ) const;
            theta310_function_type theta310_function_value( &::SireMM::BendBendSymbols::theta310 );
            
            BendBendSymbols_exposer.def( 
                "theta310"
                , theta310_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the angle between atoms 3-1-0, theta_\n{310}" );
        
        }
        BendBendSymbols_exposer.def( "__copy__", &__copy__);
        BendBendSymbols_exposer.def( "__deepcopy__", &__copy__);
        BendBendSymbols_exposer.def( "clone", &__copy__);
        BendBendSymbols_exposer.def( "__str__", &pvt_get_name);
        BendBendSymbols_exposer.def( "__repr__", &pvt_get_name);
    }

}
