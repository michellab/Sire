// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "StretchBendSymbols.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMol/cgidx.h"

#include "SireMol/molecule.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireVol/coordgroup.h"

#include "internalparameters.h"

#include "sireglobal.h"

#include "tostring.h"

#include <algorithm>

#include "internalparameters.h"

SireMM::StretchBendSymbols __copy__(const SireMM::StretchBendSymbols &other){ return SireMM::StretchBendSymbols(other); }

const char* pvt_get_name(const SireMM::StretchBendSymbols&){ return "SireMM::StretchBendSymbols";}

void register_StretchBendSymbols_class(){

    { //::SireMM::StretchBendSymbols
        typedef bp::class_< SireMM::StretchBendSymbols, bp::bases< SireMM::InternalSymbolsBase > > StretchBendSymbols_exposer_t;
        StretchBendSymbols_exposer_t StretchBendSymbols_exposer = StretchBendSymbols_exposer_t( "StretchBendSymbols", "", bp::init< >("") );
        bp::scope StretchBendSymbols_scope( StretchBendSymbols_exposer );
        { //::SireMM::StretchBendSymbols::r01
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::StretchBendSymbols::*r01_function_type)(  ) const;
            r01_function_type r01_function_value( &::SireMM::StretchBendSymbols::r01 );
            
            StretchBendSymbols_exposer.def( 
                "r01"
                , r01_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the bond length, r_\n{01}" );
        
        }
        { //::SireMM::StretchBendSymbols::r12
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::StretchBendSymbols::*r12_function_type)(  ) const;
            r12_function_type r12_function_value( &::SireMM::StretchBendSymbols::r12 );
            
            StretchBendSymbols_exposer.def( 
                "r12"
                , r12_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the bond length r_\n{12}" );
        
        }
        { //::SireMM::StretchBendSymbols::r21
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::StretchBendSymbols::*r21_function_type)(  ) const;
            r21_function_type r21_function_value( &::SireMM::StretchBendSymbols::r21 );
            
            StretchBendSymbols_exposer.def( 
                "r21"
                , r21_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the bond length, r_\n{21}" );
        
        }
        { //::SireMM::StretchBendSymbols::theta
        
            typedef ::SireCAS::Symbol const & ( ::SireMM::StretchBendSymbols::*theta_function_type)(  ) const;
            theta_function_type theta_function_value( &::SireMM::StretchBendSymbols::theta );
            
            StretchBendSymbols_exposer.def( 
                "theta"
                , theta_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the symbol representing the angle, theta" );
        
        }
        StretchBendSymbols_exposer.def( "__copy__", &__copy__);
        StretchBendSymbols_exposer.def( "__deepcopy__", &__copy__);
        StretchBendSymbols_exposer.def( "clone", &__copy__);
        StretchBendSymbols_exposer.def( "__str__", &pvt_get_name);
        StretchBendSymbols_exposer.def( "__repr__", &pvt_get_name);
    }

}
