// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "LJProbe.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "cljprobe.h"

#include "cljprobe.h"

SireMM::LJProbe __copy__(const SireMM::LJProbe &other){ return SireMM::LJProbe(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_LJProbe_class(){

    { //::SireMM::LJProbe
        typedef bp::class_< SireMM::LJProbe, bp::bases< SireFF::Probe, SireBase::Property > > LJProbe_exposer_t;
        LJProbe_exposer_t LJProbe_exposer = LJProbe_exposer_t( "LJProbe", "", bp::init< >("Constructor - this makes a probe that is the equivalent\nof an OPLS united atom methane molecule") );
        bp::scope LJProbe_scope( LJProbe_exposer );
        LJProbe_exposer.def( bp::init< SireMM::LJParameter const & >(( bp::arg("ljparam") ), "Construct a probe with parameters in ljparam") );
        LJProbe_exposer.def( bp::init< SireMM::CLJProbe const & >(( bp::arg("cljprobe") ), "Construct to take the LJ probe from the passed CLJProbe") );
        LJProbe_exposer.def( bp::init< SireFF::Probe const & >(( bp::arg("probe") ), "Construct from the passed probe") );
        LJProbe_exposer.def( bp::init< SireMM::LJProbe const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::LJProbe::lj
        
            typedef ::SireMM::LJParameter const & ( ::SireMM::LJProbe::*lj_function_type)(  ) const;
            lj_function_type lj_function_value( &::SireMM::LJProbe::lj );
            
            LJProbe_exposer.def( 
                "lj"
                , lj_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        LJProbe_exposer.def( bp::self != bp::self );
        { //::SireMM::LJProbe::operator=
        
            typedef ::SireMM::LJProbe & ( ::SireMM::LJProbe::*assign_function_type)( ::SireMM::LJProbe const & ) ;
            assign_function_type assign_function_value( &::SireMM::LJProbe::operator= );
            
            LJProbe_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        LJProbe_exposer.def( bp::self == bp::self );
        { //::SireMM::LJProbe::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::LJProbe::typeName );
            
            LJProbe_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        LJProbe_exposer.staticmethod( "typeName" );
        LJProbe_exposer.def( "__copy__", &__copy__);
        LJProbe_exposer.def( "__deepcopy__", &__copy__);
        LJProbe_exposer.def( "clone", &__copy__);
        LJProbe_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::LJProbe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJProbe_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::LJProbe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJProbe_exposer.def( "__str__", &__str__< ::SireMM::LJProbe > );
        LJProbe_exposer.def( "__repr__", &__str__< ::SireMM::LJProbe > );
    }

}
