// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SoftCLJPotentialInterface_IntraSoftCLJPotential_.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "intrasoftcljff.h"

#include "intrasoftcljff.h"

const char* pvt_get_name(const SireMM::SoftCLJPotentialInterface<SireMM::IntraSoftCLJPotential>&){ return "SireMM::SoftCLJPotentialInterface<SireMM::IntraSoftCLJPotential>";}

#include "Helpers/release_gil_policy.hpp"

void register_SoftCLJPotentialInterface_IntraSoftCLJPotential__class(){

    { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >
        typedef bp::class_< SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >, bp::bases< SireMM::CLJPotentialInterface<SireMM::IntraSoftCLJPotential> >, boost::noncopyable > SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer_t;
        SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer_t SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer = SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer_t( "SoftCLJPotentialInterface_IntraSoftCLJPotential_", "", bp::no_init );
        bp::scope SoftCLJPotentialInterface_IntraSoftCLJPotential__scope( SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer );
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::alpha
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef double ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*alpha_function_type)(  ) const;
            alpha_function_type alpha_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::alpha );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "alpha"
                , alpha_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::alpha
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef double ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*alpha_function_type)( int ) const;
            alpha_function_type alpha_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::alpha );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "alpha"
                , alpha_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::clearAlphas
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef void ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*clearAlphas_function_type)(  ) ;
            clearAlphas_function_type clearAlphas_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::clearAlphas );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "clearAlphas"
                , clearAlphas_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::coulombPower
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef int ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*coulombPower_function_type)(  ) const;
            coulombPower_function_type coulombPower_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::coulombPower );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "coulombPower"
                , coulombPower_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::hasAlphaValue
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*hasAlphaValue_function_type)( int ) const;
            hasAlphaValue_function_type hasAlphaValue_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::hasAlphaValue );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "hasAlphaValue"
                , hasAlphaValue_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::ljPower
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef int ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*ljPower_function_type)(  ) const;
            ljPower_function_type ljPower_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::ljPower );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "ljPower"
                , ljPower_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::nActiveAlphaComponents
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef int ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*nActiveAlphaComponents_function_type)(  ) const;
            nActiveAlphaComponents_function_type nActiveAlphaComponents_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::nActiveAlphaComponents );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "nActiveAlphaComponents"
                , nActiveAlphaComponents_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::removeAlpha
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*removeAlpha_function_type)( int ) ;
            removeAlpha_function_type removeAlpha_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::removeAlpha );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "removeAlpha"
                , removeAlpha_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setAlpha
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*setAlpha_function_type)( double ) ;
            setAlpha_function_type setAlpha_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setAlpha );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "setAlpha"
                , setAlpha_function_value
                , ( bp::arg("alpha") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setAlpha
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*setAlpha_function_type)( int,double ) ;
            setAlpha_function_type setAlpha_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setAlpha );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "setAlpha"
                , setAlpha_function_value
                , ( bp::arg("i"), bp::arg("alpha") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setCoulombPower
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*setCoulombPower_function_type)( int ) ;
            setCoulombPower_function_type setCoulombPower_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setCoulombPower );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "setCoulombPower"
                , setCoulombPower_function_value
                , ( bp::arg("power") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setLJPower
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*setLJPower_function_type)( int ) ;
            setLJPower_function_type setLJPower_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setLJPower );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "setLJPower"
                , setLJPower_function_value
                , ( bp::arg("power") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setShiftDelta
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef bool ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*setShiftDelta_function_type)( double ) ;
            setShiftDelta_function_type setShiftDelta_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::setShiftDelta );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "setShiftDelta"
                , setShiftDelta_function_value
                , ( bp::arg("delta") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::shiftDelta
        
            typedef SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential > exported_class_t;
            typedef double ( ::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::*shiftDelta_function_type)(  ) const;
            shiftDelta_function_type shiftDelta_function_value( &::SireMM::SoftCLJPotentialInterface< SireMM::IntraSoftCLJPotential >::shiftDelta );
            
            SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( 
                "shiftDelta"
                , shiftDelta_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( "__str__", &pvt_get_name);
        SoftCLJPotentialInterface_IntraSoftCLJPotential__exposer.def( "__repr__", &pvt_get_name);
    }

}
