// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJIntraShiftFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireMaths/multifloat.h"

#include "SireMaths/multiint.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "SireVol/gridinfo.h"

#include "cljshiftfunction.h"

#include <QDebug>

#include <QElapsedTimer>

#include "cljshiftfunction.h"

SireMM::CLJIntraShiftFunction __copy__(const SireMM::CLJIntraShiftFunction &other){ return SireMM::CLJIntraShiftFunction(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJIntraShiftFunction_class(){

    { //::SireMM::CLJIntraShiftFunction
        typedef bp::class_< SireMM::CLJIntraShiftFunction, bp::bases< SireMM::CLJIntraFunction, SireMM::CLJCutoffFunction, SireMM::CLJFunction, SireBase::Property > > CLJIntraShiftFunction_exposer_t;
        CLJIntraShiftFunction_exposer_t CLJIntraShiftFunction_exposer = CLJIntraShiftFunction_exposer_t( "CLJIntraShiftFunction", "", bp::init< >("") );
        bp::scope CLJIntraShiftFunction_scope( CLJIntraShiftFunction_exposer );
        CLJIntraShiftFunction_exposer.def( bp::init< SireUnits::Dimension::Length >(( bp::arg("cutoff") ), "Copy constructor") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireUnits::Dimension::Length >(( bp::arg("coul_cutoff"), bp::arg("lj_cutoff") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length >(( bp::arg("space"), bp::arg("cutoff") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireUnits::Dimension::Length >(( bp::arg("space"), bp::arg("coul_cutoff"), bp::arg("lj_cutoff") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("coul_cutoff"), bp::arg("lj_cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireVol::Space const &, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("combining_rules") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireVol::Space const &, SireUnits::Dimension::Length, SireUnits::Dimension::Length, SireMM::CLJFunction::COMBINING_RULES >(( bp::arg("space"), bp::arg("coul_cutoff"), bp::arg("lj_cutoff"), bp::arg("combining_rules") ), "") );
        CLJIntraShiftFunction_exposer.def( bp::init< SireMM::CLJIntraShiftFunction const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::CLJIntraShiftFunction::defaultShiftFunction
        
            typedef ::SireMM::CLJFunctionPtr ( *defaultShiftFunction_function_type )(  );
            defaultShiftFunction_function_type defaultShiftFunction_function_value( &::SireMM::CLJIntraShiftFunction::defaultShiftFunction );
            
            CLJIntraShiftFunction_exposer.def( 
                "defaultShiftFunction"
                , defaultShiftFunction_function_value
                , "" );
        
        }
        CLJIntraShiftFunction_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJIntraShiftFunction::operator=
        
            typedef ::SireMM::CLJIntraShiftFunction & ( ::SireMM::CLJIntraShiftFunction::*assign_function_type)( ::SireMM::CLJIntraShiftFunction const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJIntraShiftFunction::operator= );
            
            CLJIntraShiftFunction_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CLJIntraShiftFunction_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJIntraShiftFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJIntraShiftFunction::typeName );
            
            CLJIntraShiftFunction_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::CLJIntraShiftFunction::what
        
            typedef char const * ( ::SireMM::CLJIntraShiftFunction::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::CLJIntraShiftFunction::what );
            
            CLJIntraShiftFunction_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        CLJIntraShiftFunction_exposer.staticmethod( "defaultShiftFunction" );
        CLJIntraShiftFunction_exposer.staticmethod( "typeName" );
        CLJIntraShiftFunction_exposer.def( "__copy__", &__copy__);
        CLJIntraShiftFunction_exposer.def( "__deepcopy__", &__copy__);
        CLJIntraShiftFunction_exposer.def( "clone", &__copy__);
        CLJIntraShiftFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJIntraShiftFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraShiftFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJIntraShiftFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraShiftFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJIntraShiftFunction > );
        CLJIntraShiftFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJIntraShiftFunction > );
    }

}
