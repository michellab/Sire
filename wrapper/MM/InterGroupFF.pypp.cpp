// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "InterGroupFF.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/booleanproperty.h"

#include "SireBase/errors.h"

#include "SireBase/lengthproperty.h"

#include "SireBase/refcountdata.h"

#include "SireError/errors.h"

#include "SireMol/atomselection.h"

#include "SireMol/molecule.h"

#include "SireMol/molecules.h"

#include "SireMol/molresid.h"

#include "SireMol/partialmolecule.h"

#include "SireMol/residue.h"

#include "SireMol/selector.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cljcalculator.h"

#include "cljshiftfunction.h"

#include "intergroupff.h"

#include <QDebug>

#include <QElapsedTimer>

#include "intergroupff.h"

SireMM::InterGroupFF __copy__(const SireMM::InterGroupFF &other){ return SireMM::InterGroupFF(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_InterGroupFF_class(){

    { //::SireMM::InterGroupFF
        typedef bp::class_< SireMM::InterGroupFF, bp::bases< SireFF::G2FF, SireFF::FF, SireMol::MolGroupsBase, SireBase::Property > > InterGroupFF_exposer_t;
        InterGroupFF_exposer_t InterGroupFF_exposer = InterGroupFF_exposer_t( "InterGroupFF", "", bp::init< >("Constructor") );
        bp::scope InterGroupFF_scope( InterGroupFF_exposer );
        InterGroupFF_exposer.def( bp::init< QString const & >(( bp::arg("name") ), "Construct, specifying the name of the forcefield") );
        InterGroupFF_exposer.def( bp::init< SireMM::InterGroupFF const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::InterGroupFF::accept
        
            typedef void ( ::SireMM::InterGroupFF::*accept_function_type)(  ) ;
            accept_function_type accept_function_value( &::SireMM::InterGroupFF::accept );
            
            InterGroupFF_exposer.def( 
                "accept"
                , accept_function_value
                , "Tell the forcefield that the last move was accepted. This tells the\nforcefield to make permanent any temporary changes that were used a workspace\nto avoid memory allocation during a move" );
        
        }
        { //::SireMM::InterGroupFF::addFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*addFixedAtoms_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            addFixedAtoms_function_type addFixedAtoms_function_value( &::SireMM::InterGroupFF::addFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "addFixedAtoms"
                , addFixedAtoms_function_value
                , ( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() )
                , "Add the passed atoms as fixed atoms to the forcefield" );
        
        }
        { //::SireMM::InterGroupFF::addFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*addFixedAtoms_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            addFixedAtoms_function_type addFixedAtoms_function_value( &::SireMM::InterGroupFF::addFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "addFixedAtoms"
                , addFixedAtoms_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Add the passed molecules as fixed atoms to the forcefield" );
        
        }
        { //::SireMM::InterGroupFF::addFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*addFixedAtoms_function_type)( ::SireMM::CLJAtoms const & ) ;
            addFixedAtoms_function_type addFixedAtoms_function_value( &::SireMM::InterGroupFF::addFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "addFixedAtoms"
                , addFixedAtoms_function_value
                , ( bp::arg("atoms") )
                , "Add the passed atoms as fixed atoms to the forcefield" );
        
        }
        { //::SireMM::InterGroupFF::cljFunction
        
            typedef ::SireMM::CLJFunction const & ( ::SireMM::InterGroupFF::*cljFunction_function_type)(  ) const;
            cljFunction_function_type cljFunction_function_value( &::SireMM::InterGroupFF::cljFunction );
            
            InterGroupFF_exposer.def( 
                "cljFunction"
                , cljFunction_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the function used to calculate the energy" );
        
        }
        { //::SireMM::InterGroupFF::cljFunction
        
            typedef ::SireMM::CLJFunction const & ( ::SireMM::InterGroupFF::*cljFunction_function_type)( ::QString ) const;
            cljFunction_function_type cljFunction_function_value( &::SireMM::InterGroupFF::cljFunction );
            
            InterGroupFF_exposer.def( 
                "cljFunction"
                , cljFunction_function_value
                , ( bp::arg("key") )
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the CLJFunction associated with the passed key" );
        
        }
        { //::SireMM::InterGroupFF::cljFunctionKeys
        
            typedef ::QStringList ( ::SireMM::InterGroupFF::*cljFunctionKeys_function_type)(  ) const;
            cljFunctionKeys_function_type cljFunctionKeys_function_value( &::SireMM::InterGroupFF::cljFunctionKeys );
            
            InterGroupFF_exposer.def( 
                "cljFunctionKeys"
                , cljFunctionKeys_function_value
                , "Return the keys of all CLJFunctions added to this forcefield" );
        
        }
        { //::SireMM::InterGroupFF::cljFunctions
        
            typedef ::QHash< QString, SireBase::PropPtr< SireMM::CLJFunction > > ( ::SireMM::InterGroupFF::*cljFunctions_function_type)(  ) const;
            cljFunctions_function_type cljFunctions_function_value( &::SireMM::InterGroupFF::cljFunctions );
            
            InterGroupFF_exposer.def( 
                "cljFunctions"
                , cljFunctions_function_value
                , "Return the hash of all CLJFunctions in this forcefield, indexed by their key" );
        
        }
        { //::SireMM::InterGroupFF::components
        
            typedef ::SireMM::MultiCLJComponent const & ( ::SireMM::InterGroupFF::*components_function_type)(  ) const;
            components_function_type components_function_value( &::SireMM::InterGroupFF::components );
            
            InterGroupFF_exposer.def( 
                "components"
                , components_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the energy components of this forcefield" );
        
        }
        { //::SireMM::InterGroupFF::containsProperty
        
            typedef bool ( ::SireMM::InterGroupFF::*containsProperty_function_type)( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireMM::InterGroupFF::containsProperty );
            
            InterGroupFF_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") )
                , "Return whether or not this forcefield contains the property property" );
        
        }
        { //::SireMM::InterGroupFF::disableGrid
        
            typedef void ( ::SireMM::InterGroupFF::*disableGrid_function_type)(  ) ;
            disableGrid_function_type disableGrid_function_value( &::SireMM::InterGroupFF::disableGrid );
            
            InterGroupFF_exposer.def( 
                "disableGrid"
                , disableGrid_function_value
                , "Turn off use of the grid" );
        
        }
        { //::SireMM::InterGroupFF::disableParallelCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*disableParallelCalculation_function_type)(  ) ;
            disableParallelCalculation_function_type disableParallelCalculation_function_value( &::SireMM::InterGroupFF::disableParallelCalculation );
            
            InterGroupFF_exposer.def( 
                "disableParallelCalculation"
                , disableParallelCalculation_function_value
                , "Turn off use of a multicore parallel calculation of the energy.\nThis may be quicker if you have few atoms in the forcefield,\nor if you are only planning on allocating one core per forcefield" );
        
        }
        { //::SireMM::InterGroupFF::disableReproducibleCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*disableReproducibleCalculation_function_type)(  ) ;
            disableReproducibleCalculation_function_type disableReproducibleCalculation_function_value( &::SireMM::InterGroupFF::disableReproducibleCalculation );
            
            InterGroupFF_exposer.def( 
                "disableReproducibleCalculation"
                , disableReproducibleCalculation_function_value
                , "Turn off an energy summing algorithm that guarantees the same energy\nregardless of whether a single core or multicore calculation is being\nperformed (i.e. rounding errors in both cases will not be identical)" );
        
        }
        { //::SireMM::InterGroupFF::enableGrid
        
            typedef void ( ::SireMM::InterGroupFF::*enableGrid_function_type)(  ) ;
            enableGrid_function_type enableGrid_function_value( &::SireMM::InterGroupFF::enableGrid );
            
            InterGroupFF_exposer.def( 
                "enableGrid"
                , enableGrid_function_value
                , "Turn on the use of the grid" );
        
        }
        { //::SireMM::InterGroupFF::enableParallelCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*enableParallelCalculation_function_type)(  ) ;
            enableParallelCalculation_function_type enableParallelCalculation_function_value( &::SireMM::InterGroupFF::enableParallelCalculation );
            
            InterGroupFF_exposer.def( 
                "enableParallelCalculation"
                , enableParallelCalculation_function_value
                , "Turn on use of a multicore parallel calculation of the energy.\nThis is on by default, and spreads the energy calculations over\navailable cores" );
        
        }
        { //::SireMM::InterGroupFF::enableReproducibleCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*enableReproducibleCalculation_function_type)(  ) ;
            enableReproducibleCalculation_function_type enableReproducibleCalculation_function_value( &::SireMM::InterGroupFF::enableReproducibleCalculation );
            
            InterGroupFF_exposer.def( 
                "enableReproducibleCalculation"
                , enableReproducibleCalculation_function_value
                , "Turn on an energy summing algorithm that guarantees the same energy\nregardless of whether a single core or multicore calculation is being\nperformed (i.e. rounding errors in both cases will be identical)" );
        
        }
        { //::SireMM::InterGroupFF::fixedOnly
        
            typedef bool ( ::SireMM::InterGroupFF::*fixedOnly_function_type)(  ) const;
            fixedOnly_function_type fixedOnly_function_value( &::SireMM::InterGroupFF::fixedOnly );
            
            InterGroupFF_exposer.def( 
                "fixedOnly"
                , fixedOnly_function_value
                , "Return whether or not only the energy between the mobile and fixed\natoms is being calculated" );
        
        }
        { //::SireMM::InterGroupFF::grid
        
            typedef ::SireVol::GridInfo ( ::SireMM::InterGroupFF::*grid_function_type)(  ) const;
            grid_function_type grid_function_value( &::SireMM::InterGroupFF::grid );
            
            InterGroupFF_exposer.def( 
                "grid"
                , grid_function_value
                , "Return the grid used to calculate the energy with fixed atoms. This will\nonly be set after the first energy calculation that uses the grid" );
        
        }
        { //::SireMM::InterGroupFF::gridBuffer
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::InterGroupFF::*gridBuffer_function_type)(  ) const;
            gridBuffer_function_type gridBuffer_function_value( &::SireMM::InterGroupFF::gridBuffer );
            
            InterGroupFF_exposer.def( 
                "gridBuffer"
                , gridBuffer_function_value
                , "Return the buffer used when working out the dimension of the grid" );
        
        }
        { //::SireMM::InterGroupFF::gridSpacing
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::InterGroupFF::*gridSpacing_function_type)(  ) const;
            gridSpacing_function_type gridSpacing_function_value( &::SireMM::InterGroupFF::gridSpacing );
            
            InterGroupFF_exposer.def( 
                "gridSpacing"
                , gridSpacing_function_value
                , "Return spacing between grid points" );
        
        }
        { //::SireMM::InterGroupFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireMM::InterGroupFF::*mustNowRecalculateFromScratch_function_type)(  ) ;
            mustNowRecalculateFromScratch_function_type mustNowRecalculateFromScratch_function_value( &::SireMM::InterGroupFF::mustNowRecalculateFromScratch );
            
            InterGroupFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_value
                , "Signal that this forcefield must now be recalculated from scratch" );
        
        }
        { //::SireMM::InterGroupFF::nCLJFunctions
        
            typedef int ( ::SireMM::InterGroupFF::*nCLJFunctions_function_type)(  ) const;
            nCLJFunctions_function_type nCLJFunctions_function_value( &::SireMM::InterGroupFF::nCLJFunctions );
            
            InterGroupFF_exposer.def( 
                "nCLJFunctions"
                , nCLJFunctions_function_value
                , "Return the number of CLJ functions in this forcefield. There should always\nbe at least one" );
        
        }
        { //::SireMM::InterGroupFF::needsAccepting
        
            typedef bool ( ::SireMM::InterGroupFF::*needsAccepting_function_type)(  ) const;
            needsAccepting_function_type needsAccepting_function_value( &::SireMM::InterGroupFF::needsAccepting );
            
            InterGroupFF_exposer.def( 
                "needsAccepting"
                , needsAccepting_function_value
                , "Return whether or not this forcefield is using a temporary workspace that\nneeds to be accepted" );
        
        }
        InterGroupFF_exposer.def( bp::self != bp::self );
        { //::SireMM::InterGroupFF::operator=
        
            typedef ::SireMM::InterGroupFF & ( ::SireMM::InterGroupFF::*assign_function_type)( ::SireMM::InterGroupFF const & ) ;
            assign_function_type assign_function_value( &::SireMM::InterGroupFF::operator= );
            
            InterGroupFF_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        InterGroupFF_exposer.def( bp::self == bp::self );
        { //::SireMM::InterGroupFF::properties
        
            typedef ::SireBase::Properties const & ( ::SireMM::InterGroupFF::*properties_function_type)(  ) const;
            properties_function_type properties_function_value( &::SireMM::InterGroupFF::properties );
            
            InterGroupFF_exposer.def( 
                "properties"
                , properties_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return all of the properties of this function" );
        
        }
        { //::SireMM::InterGroupFF::property
        
            typedef ::SireBase::Property const & ( ::SireMM::InterGroupFF::*property_function_type)( ::QString const & ) const;
            property_function_type property_function_value( &::SireMM::InterGroupFF::property );
            
            InterGroupFF_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>()
                , "Return the value of the forcefield property with name name" );
        
        }
        { //::SireMM::InterGroupFF::removeAllCLJFunctions
        
            typedef void ( ::SireMM::InterGroupFF::*removeAllCLJFunctions_function_type)(  ) ;
            removeAllCLJFunctions_function_type removeAllCLJFunctions_function_value( &::SireMM::InterGroupFF::removeAllCLJFunctions );
            
            InterGroupFF_exposer.def( 
                "removeAllCLJFunctions"
                , removeAllCLJFunctions_function_value
                , "Function to remove all of the CLJFunctions (except for the default function)" );
        
        }
        { //::SireMM::InterGroupFF::removeCLJFunctionAt
        
            typedef void ( ::SireMM::InterGroupFF::*removeCLJFunctionAt_function_type)( ::QString ) ;
            removeCLJFunctionAt_function_type removeCLJFunctionAt_function_value( &::SireMM::InterGroupFF::removeCLJFunctionAt );
            
            InterGroupFF_exposer.def( 
                "removeCLJFunctionAt"
                , removeCLJFunctionAt_function_value
                , ( bp::arg("key") )
                , "Remove the CLJ function with key key - note that you cannot remove\nthe default CLJ function" );
        
        }
        { //::SireMM::InterGroupFF::setCLJFunction
        
            typedef void ( ::SireMM::InterGroupFF::*setCLJFunction_function_type)( ::SireMM::CLJFunction const & ) ;
            setCLJFunction_function_type setCLJFunction_function_value( &::SireMM::InterGroupFF::setCLJFunction );
            
            InterGroupFF_exposer.def( 
                "setCLJFunction"
                , setCLJFunction_function_value
                , ( bp::arg("cljfunc") )
                , "Function used to set the CLJFunction used to calculate the energy" );
        
        }
        { //::SireMM::InterGroupFF::setCLJFunction
        
            typedef void ( ::SireMM::InterGroupFF::*setCLJFunction_function_type)( ::QString,::SireMM::CLJFunction const & ) ;
            setCLJFunction_function_type setCLJFunction_function_value( &::SireMM::InterGroupFF::setCLJFunction );
            
            InterGroupFF_exposer.def( 
                "setCLJFunction"
                , setCLJFunction_function_value
                , ( bp::arg("key"), bp::arg("cljfunc") )
                , "Set the CLJFunction with key key equal to cljfunc" );
        
        }
        { //::SireMM::InterGroupFF::setFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*setFixedAtoms_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            setFixedAtoms_function_type setFixedAtoms_function_value( &::SireMM::InterGroupFF::setFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "setFixedAtoms"
                , setFixedAtoms_function_value
                , ( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() )
                , "Set the fixed atoms equal to molecule" );
        
        }
        { //::SireMM::InterGroupFF::setFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*setFixedAtoms_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            setFixedAtoms_function_type setFixedAtoms_function_value( &::SireMM::InterGroupFF::setFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "setFixedAtoms"
                , setFixedAtoms_function_value
                , ( bp::arg("molecules"), bp::arg("map")=SireBase::PropertyMap() )
                , "Set the fixed atoms equal to molecules" );
        
        }
        { //::SireMM::InterGroupFF::setFixedAtoms
        
            typedef void ( ::SireMM::InterGroupFF::*setFixedAtoms_function_type)( ::SireMM::CLJAtoms const & ) ;
            setFixedAtoms_function_type setFixedAtoms_function_value( &::SireMM::InterGroupFF::setFixedAtoms );
            
            InterGroupFF_exposer.def( 
                "setFixedAtoms"
                , setFixedAtoms_function_value
                , ( bp::arg("atoms") )
                , "Set the fixed atoms equal to atoms" );
        
        }
        { //::SireMM::InterGroupFF::setFixedOnly
        
            typedef void ( ::SireMM::InterGroupFF::*setFixedOnly_function_type)( bool ) ;
            setFixedOnly_function_type setFixedOnly_function_value( &::SireMM::InterGroupFF::setFixedOnly );
            
            InterGroupFF_exposer.def( 
                "setFixedOnly"
                , setFixedOnly_function_value
                , ( bp::arg("on") )
                , "Set whether or not the energy calculation is only between the mobile and\nfixed atoms (i.e. the mobile-mobile interaction is ignored)" );
        
        }
        { //::SireMM::InterGroupFF::setGridBuffer
        
            typedef void ( ::SireMM::InterGroupFF::*setGridBuffer_function_type)( ::SireUnits::Dimension::Length ) ;
            setGridBuffer_function_type setGridBuffer_function_value( &::SireMM::InterGroupFF::setGridBuffer );
            
            InterGroupFF_exposer.def( 
                "setGridBuffer"
                , setGridBuffer_function_value
                , ( bp::arg("buffer") )
                , "Set the buffer used when using a grid. This is the distance\nadded around the maximum extent of the atoms when working out the\ndimension of the grid" );
        
        }
        { //::SireMM::InterGroupFF::setGridSpacing
        
            typedef void ( ::SireMM::InterGroupFF::*setGridSpacing_function_type)( ::SireUnits::Dimension::Length ) ;
            setGridSpacing_function_type setGridSpacing_function_value( &::SireMM::InterGroupFF::setGridSpacing );
            
            InterGroupFF_exposer.def( 
                "setGridSpacing"
                , setGridSpacing_function_value
                , ( bp::arg("spacing") )
                , "Set the spacing between grid points" );
        
        }
        { //::SireMM::InterGroupFF::setProperty
        
            typedef bool ( ::SireMM::InterGroupFF::*setProperty_function_type)( ::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireMM::InterGroupFF::setProperty );
            
            InterGroupFF_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("property") )
                , "Set the forcefield property called name to the value property. Note that\nthis only affects the default CLJFunction. Additional functions must\nbe configured before adding them to the forcefield" );
        
        }
        { //::SireMM::InterGroupFF::setUseGrid
        
            typedef void ( ::SireMM::InterGroupFF::*setUseGrid_function_type)( bool ) ;
            setUseGrid_function_type setUseGrid_function_value( &::SireMM::InterGroupFF::setUseGrid );
            
            InterGroupFF_exposer.def( 
                "setUseGrid"
                , setUseGrid_function_value
                , ( bp::arg("on") )
                , "Set whether or not a grid is used to optimise energy calculations with the fixed atoms" );
        
        }
        { //::SireMM::InterGroupFF::setUseParallelCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*setUseParallelCalculation_function_type)( bool ) ;
            setUseParallelCalculation_function_type setUseParallelCalculation_function_value( &::SireMM::InterGroupFF::setUseParallelCalculation );
            
            InterGroupFF_exposer.def( 
                "setUseParallelCalculation"
                , setUseParallelCalculation_function_value
                , ( bp::arg("on") )
                , "Set whether or not to use a multicore parallel algorithm\nto calculate the energy" );
        
        }
        { //::SireMM::InterGroupFF::setUseReproducibleCalculation
        
            typedef void ( ::SireMM::InterGroupFF::*setUseReproducibleCalculation_function_type)( bool ) ;
            setUseReproducibleCalculation_function_type setUseReproducibleCalculation_function_value( &::SireMM::InterGroupFF::setUseReproducibleCalculation );
            
            InterGroupFF_exposer.def( 
                "setUseReproducibleCalculation"
                , setUseReproducibleCalculation_function_value
                , ( bp::arg("on") )
                , "Switch on or off use of an energy summing algorithm that guarantees the\nsame energy regardless of whether a single core or multicore calculation\nis being performed" );
        
        }
        { //::SireMM::InterGroupFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::InterGroupFF::typeName );
            
            InterGroupFF_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::InterGroupFF::usesGrid
        
            typedef bool ( ::SireMM::InterGroupFF::*usesGrid_function_type)(  ) const;
            usesGrid_function_type usesGrid_function_value( &::SireMM::InterGroupFF::usesGrid );
            
            InterGroupFF_exposer.def( 
                "usesGrid"
                , usesGrid_function_value
                , "Return whether or not the grid is used" );
        
        }
        { //::SireMM::InterGroupFF::usesParallelCalculation
        
            typedef bool ( ::SireMM::InterGroupFF::*usesParallelCalculation_function_type)(  ) const;
            usesParallelCalculation_function_type usesParallelCalculation_function_value( &::SireMM::InterGroupFF::usesParallelCalculation );
            
            InterGroupFF_exposer.def( 
                "usesParallelCalculation"
                , usesParallelCalculation_function_value
                , "Return whether or not a parallel algorithm is used to calculate energies" );
        
        }
        { //::SireMM::InterGroupFF::usesReproducibleCalculation
        
            typedef bool ( ::SireMM::InterGroupFF::*usesReproducibleCalculation_function_type)(  ) const;
            usesReproducibleCalculation_function_type usesReproducibleCalculation_function_value( &::SireMM::InterGroupFF::usesReproducibleCalculation );
            
            InterGroupFF_exposer.def( 
                "usesReproducibleCalculation"
                , usesReproducibleCalculation_function_value
                , "Return whether or not a reproducible energy summing algorithm is being\nused to accumulate the energies" );
        
        }
        { //::SireMM::InterGroupFF::what
        
            typedef char const * ( ::SireMM::InterGroupFF::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::InterGroupFF::what );
            
            InterGroupFF_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        InterGroupFF_exposer.staticmethod( "typeName" );
        InterGroupFF_exposer.def( "__copy__", &__copy__);
        InterGroupFF_exposer.def( "__deepcopy__", &__copy__);
        InterGroupFF_exposer.def( "clone", &__copy__);
        InterGroupFF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::InterGroupFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupFF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::InterGroupFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupFF_exposer.def( "__str__", &__str__< ::SireMM::InterGroupFF > );
        InterGroupFF_exposer.def( "__repr__", &__str__< ::SireMM::InterGroupFF > );
        InterGroupFF_exposer.def( "__len__", &__len_count< ::SireMM::InterGroupFF > );
    }

}
