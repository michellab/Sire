// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomFunctions.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/moleculedata.h"

#include "SireMol/moleculeinfodata.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atomfunctions.h"

#include "atomfunctions.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_AtomFunctions_class(){

    { //::SireMM::AtomFunctions
        typedef bp::class_< SireMM::AtomFunctions, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property >, boost::noncopyable > AtomFunctions_exposer_t;
        AtomFunctions_exposer_t AtomFunctions_exposer = AtomFunctions_exposer_t( "AtomFunctions", "", bp::no_init );
        bp::scope AtomFunctions_scope( AtomFunctions_exposer );
        { //::SireMM::AtomFunctions::isCompatibleWith
        
            typedef bool ( ::SireMM::AtomFunctions::*isCompatibleWith_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMM::AtomFunctions::isCompatibleWith );
            
            AtomFunctions_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") )
                , "Return whether or not this property is compatible with the molecule\nwhose layout information is in molinfo" );
        
        }
        { //::SireMM::AtomFunctions::symbols
        
            typedef ::QSet< SireCAS::Symbol > const & ( ::SireMM::AtomFunctions::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::SireMM::AtomFunctions::symbols );
            
            AtomFunctions_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        AtomFunctions_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::AtomFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomFunctions_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::AtomFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomFunctions_exposer.def( "__str__", &__str__< ::SireMM::AtomFunctions > );
        AtomFunctions_exposer.def( "__repr__", &__str__< ::SireMM::AtomFunctions > );
    }

}
