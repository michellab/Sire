// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ArrayProperty_QString_.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/booleanproperty.h"

#include "SireBase/numberproperty.h"

#include "SireBase/propertylist.h"

#include "SireBase/stringproperty.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "arrayproperty.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_ArrayProperty_QString__class(){

    { //::SireBase::ArrayProperty< QString >
        typedef bp::class_< SireBase::ArrayProperty< QString >, bp::bases< SireBase::Property >, boost::noncopyable > ArrayProperty_QString__exposer_t;
        ArrayProperty_QString__exposer_t ArrayProperty_QString__exposer = ArrayProperty_QString__exposer_t( "ArrayProperty_QString_", "", bp::no_init );
        bp::scope ArrayProperty_QString__scope( ArrayProperty_QString__exposer );
        { //::SireBase::ArrayProperty< QString >::append
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*append_function_type)( ::QString ) ;
            append_function_type append_function_value( &::SireBase::ArrayProperty< QString >::append );
            
            ArrayProperty_QString__exposer.def( 
                "append"
                , append_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::append
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*append_function_type)( ::SireBase::ArrayProperty< QString > const & ) ;
            append_function_type append_function_value( &::SireBase::ArrayProperty< QString >::append );
            
            ArrayProperty_QString__exposer.def( 
                "append"
                , append_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::array
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QVector< QString > ( ::SireBase::ArrayProperty< QString >::*array_function_type)(  ) const;
            array_function_type array_function_value( &::SireBase::ArrayProperty< QString >::array );
            
            ArrayProperty_QString__exposer.def( 
                "array"
                , array_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::at
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*at_function_type)( int ) const;
            at_function_type at_function_value( &::SireBase::ArrayProperty< QString >::at );
            
            ArrayProperty_QString__exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::clear
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*clear_function_type)(  ) ;
            clear_function_type clear_function_value( &::SireBase::ArrayProperty< QString >::clear );
            
            ArrayProperty_QString__exposer.def( 
                "clear"
                , clear_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::count
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef int ( ::SireBase::ArrayProperty< QString >::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireBase::ArrayProperty< QString >::count );
            
            ArrayProperty_QString__exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::empty
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef bool ( ::SireBase::ArrayProperty< QString >::*empty_function_type)(  ) const;
            empty_function_type empty_function_value( &::SireBase::ArrayProperty< QString >::empty );
            
            ArrayProperty_QString__exposer.def( 
                "empty"
                , empty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::getitem
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*getitem_function_type)( int ) const;
            getitem_function_type getitem_function_value( &::SireBase::ArrayProperty< QString >::getitem );
            
            ArrayProperty_QString__exposer.def( 
                "getitem"
                , getitem_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::insert
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*insert_function_type)( int,::QString ) ;
            insert_function_type insert_function_value( &::SireBase::ArrayProperty< QString >::insert );
            
            ArrayProperty_QString__exposer.def( 
                "insert"
                , insert_function_value
                , ( bp::arg("i"), bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::isEmpty
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef bool ( ::SireBase::ArrayProperty< QString >::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireBase::ArrayProperty< QString >::isEmpty );
            
            ArrayProperty_QString__exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::move
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*move_function_type)( int,int ) ;
            move_function_type move_function_value( &::SireBase::ArrayProperty< QString >::move );
            
            ArrayProperty_QString__exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("from"), bp::arg("to") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::operator[]
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::ArrayProperty< QString >::operator[] );
            
            ArrayProperty_QString__exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::pop_back
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*pop_back_function_type)(  ) ;
            pop_back_function_type pop_back_function_value( &::SireBase::ArrayProperty< QString >::pop_back );
            
            ArrayProperty_QString__exposer.def( 
                "pop_back"
                , pop_back_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::pop_front
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*pop_front_function_type)(  ) ;
            pop_front_function_type pop_front_function_value( &::SireBase::ArrayProperty< QString >::pop_front );
            
            ArrayProperty_QString__exposer.def( 
                "pop_front"
                , pop_front_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::prepend
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*prepend_function_type)( ::QString ) ;
            prepend_function_type prepend_function_value( &::SireBase::ArrayProperty< QString >::prepend );
            
            ArrayProperty_QString__exposer.def( 
                "prepend"
                , prepend_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::push_back
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*push_back_function_type)( ::QString ) ;
            push_back_function_type push_back_function_value( &::SireBase::ArrayProperty< QString >::push_back );
            
            ArrayProperty_QString__exposer.def( 
                "push_back"
                , push_back_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::push_front
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*push_front_function_type)( ::QString ) ;
            push_front_function_type push_front_function_value( &::SireBase::ArrayProperty< QString >::push_front );
            
            ArrayProperty_QString__exposer.def( 
                "push_front"
                , push_front_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::removeAt
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*removeAt_function_type)( int ) ;
            removeAt_function_type removeAt_function_value( &::SireBase::ArrayProperty< QString >::removeAt );
            
            ArrayProperty_QString__exposer.def( 
                "removeAt"
                , removeAt_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::removeFirst
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*removeFirst_function_type)(  ) ;
            removeFirst_function_type removeFirst_function_value( &::SireBase::ArrayProperty< QString >::removeFirst );
            
            ArrayProperty_QString__exposer.def( 
                "removeFirst"
                , removeFirst_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::removeLast
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*removeLast_function_type)(  ) ;
            removeLast_function_type removeLast_function_value( &::SireBase::ArrayProperty< QString >::removeLast );
            
            ArrayProperty_QString__exposer.def( 
                "removeLast"
                , removeLast_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::replace
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*replace_function_type)( int,::QString ) ;
            replace_function_type replace_function_value( &::SireBase::ArrayProperty< QString >::replace );
            
            ArrayProperty_QString__exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("i"), bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::size
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef int ( ::SireBase::ArrayProperty< QString >::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireBase::ArrayProperty< QString >::size );
            
            ArrayProperty_QString__exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::swap
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*swap_function_type)( ::SireBase::ArrayProperty< QString > & ) ;
            swap_function_type swap_function_value( &::SireBase::ArrayProperty< QString >::swap );
            
            ArrayProperty_QString__exposer.def( 
                "swap"
                , swap_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::swap
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef void ( ::SireBase::ArrayProperty< QString >::*swap_function_type)( int,int ) ;
            swap_function_type swap_function_value( &::SireBase::ArrayProperty< QString >::swap );
            
            ArrayProperty_QString__exposer.def( 
                "swap"
                , swap_function_value
                , ( bp::arg("i"), bp::arg("j") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::takeAt
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*takeAt_function_type)( int ) ;
            takeAt_function_type takeAt_function_value( &::SireBase::ArrayProperty< QString >::takeAt );
            
            ArrayProperty_QString__exposer.def( 
                "takeAt"
                , takeAt_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::takeFirst
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*takeFirst_function_type)(  ) ;
            takeFirst_function_type takeFirst_function_value( &::SireBase::ArrayProperty< QString >::takeFirst );
            
            ArrayProperty_QString__exposer.def( 
                "takeFirst"
                , takeFirst_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::takeLast
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*takeLast_function_type)(  ) ;
            takeLast_function_type takeLast_function_value( &::SireBase::ArrayProperty< QString >::takeLast );
            
            ArrayProperty_QString__exposer.def( 
                "takeLast"
                , takeLast_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::toList
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QList< QString > ( ::SireBase::ArrayProperty< QString >::*toList_function_type)(  ) const;
            toList_function_type toList_function_value( &::SireBase::ArrayProperty< QString >::toList );
            
            ArrayProperty_QString__exposer.def( 
                "toList"
                , toList_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::toString
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QString ( ::SireBase::ArrayProperty< QString >::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireBase::ArrayProperty< QString >::toString );
            
            ArrayProperty_QString__exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::toVector
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QVector< QString > ( ::SireBase::ArrayProperty< QString >::*toVector_function_type)(  ) const;
            toVector_function_type toVector_function_value( &::SireBase::ArrayProperty< QString >::toVector );
            
            ArrayProperty_QString__exposer.def( 
                "toVector"
                , toVector_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ArrayProperty< QString >::value
        
            typedef SireBase::ArrayProperty< QString > exported_class_t;
            typedef ::QVector< QString > ( ::SireBase::ArrayProperty< QString >::*value_function_type)(  ) const;
            value_function_type value_function_value( &::SireBase::ArrayProperty< QString >::value );
            
            ArrayProperty_QString__exposer.def( 
                "value"
                , value_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ArrayProperty_QString__exposer.def( "__str__", &__str__< ::SireBase::ArrayProperty<QString> > );
        ArrayProperty_QString__exposer.def( "__repr__", &__str__< ::SireBase::ArrayProperty<QString> > );
        ArrayProperty_QString__exposer.def( "__len__", &__len_size< ::SireBase::ArrayProperty<QString> > );
        ArrayProperty_QString__exposer.def( "__getitem__", &::SireBase::ArrayProperty<QString>::getitem );
    }

}
