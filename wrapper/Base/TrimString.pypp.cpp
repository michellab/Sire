// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TrimString.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "stringmangler.h"

#include <QMutex>

#include "stringmangler.h"

SireBase::TrimString __copy__(const SireBase::TrimString &other){ return SireBase::TrimString(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_TrimString_class(){

    { //::SireBase::TrimString
        typedef bp::class_< SireBase::TrimString, bp::bases< SireBase::StringMangler, SireBase::Property > > TrimString_exposer_t;
        TrimString_exposer_t TrimString_exposer = TrimString_exposer_t( "TrimString", "This mangler just trims spaces away from the beginning\nand end of the string\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope TrimString_scope( TrimString_exposer );
        TrimString_exposer.def( bp::init< SireBase::TrimString const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireBase::TrimString::mangle
        
            typedef ::QString ( ::SireBase::TrimString::*mangle_function_type)( ::QString const & ) const;
            mangle_function_type mangle_function_value( &::SireBase::TrimString::mangle );
            
            TrimString_exposer.def( 
                "mangle"
                , mangle_function_value
                , ( bp::arg("input") )
                , bp::release_gil_policy()
                , "Mangle the string - remove all initial and trailing spaces" );
        
        }
        TrimString_exposer.def( bp::self != bp::self );
        { //::SireBase::TrimString::operator=
        
            typedef ::SireBase::TrimString & ( ::SireBase::TrimString::*assign_function_type)( ::SireBase::TrimString const & ) ;
            assign_function_type assign_function_value( &::SireBase::TrimString::operator= );
            
            TrimString_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        TrimString_exposer.def( bp::self == bp::self );
        { //::SireBase::TrimString::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::TrimString::typeName );
            
            TrimString_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        TrimString_exposer.staticmethod( "typeName" );
        TrimString_exposer.def( "__copy__", &__copy__);
        TrimString_exposer.def( "__deepcopy__", &__copy__);
        TrimString_exposer.def( "clone", &__copy__);
        TrimString_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::TrimString >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TrimString_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::TrimString >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TrimString_exposer.def_pickle(sire_pickle_suite< ::SireBase::TrimString >());
        TrimString_exposer.def( "__str__", &__str__< ::SireBase::TrimString > );
        TrimString_exposer.def( "__repr__", &__str__< ::SireBase::TrimString > );
    }

}
