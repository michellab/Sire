// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Incremint.pypp.hpp"

namespace bp = boost::python;

#include "incremint.h"

#include "incremint.h"

SireBase::Incremint __copy__(const SireBase::Incremint &other){ return SireBase::Incremint(other); }

const char* pvt_get_name(const SireBase::Incremint&){ return "SireBase::Incremint";}

#include "Helpers/release_gil_policy.hpp"

void register_Incremint_class(){

    { //::SireBase::Incremint
        typedef bp::class_< SireBase::Incremint > Incremint_exposer_t;
        Incremint_exposer_t Incremint_exposer = Incremint_exposer_t( "Incremint", "This is a simple class that provides a thread-safe\nincrementable integer. This can be used, for example,\nto give a unique version of ID number to objects.\n\nAuthor: Christopher Woods\n", bp::init< bp::optional< int > >(( bp::arg("value")=(int)(0) ), "") );
        bp::scope Incremint_scope( Incremint_exposer );
        Incremint_exposer.def( bp::init< SireBase::Incremint const & >(( bp::arg("other") ), "") );
        { //::SireBase::Incremint::increment
        
            typedef int ( ::SireBase::Incremint::*increment_function_type)(  ) ;
            increment_function_type increment_function_value( &::SireBase::Incremint::increment );
            
            Incremint_exposer.def( 
                "increment"
                , increment_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Incremint_exposer.def( "__copy__", &__copy__);
        Incremint_exposer.def( "__deepcopy__", &__copy__);
        Incremint_exposer.def( "clone", &__copy__);
        Incremint_exposer.def( "__str__", &pvt_get_name);
        Incremint_exposer.def( "__repr__", &pvt_get_name);
    }

}
