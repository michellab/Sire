// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PackedArray2D_QString_Array.pypp.hpp"

namespace bp = boost::python;

#include "packedarrays.h"

#include "packedarrays.h"

SireBase::detail::PackedArray2D_Array<QString> __copy__(const SireBase::detail::PackedArray2D_Array<QString> &other){ return SireBase::detail::PackedArray2D_Array<QString>(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_PackedArray2D_QString_Array_class(){

    { //::SireBase::detail::PackedArray2D_Array< QString >
        typedef bp::class_< SireBase::detail::PackedArray2D_Array< QString > > PackedArray2D_QString_Array_exposer_t;
        PackedArray2D_QString_Array_exposer_t PackedArray2D_QString_Array_exposer = PackedArray2D_QString_Array_exposer_t( "PackedArray2D_QString_Array", "", bp::init< >("") );
        bp::scope PackedArray2D_QString_Array_scope( PackedArray2D_QString_Array_exposer );
        PackedArray2D_QString_Array_exposer.def( bp::init< quint32 >(( bp::arg("sz") ), "") );
        PackedArray2D_QString_Array_exposer.def( bp::init< quint32, QString const & >(( bp::arg("sz"), bp::arg("value") ), "") );
        PackedArray2D_QString_Array_exposer.def( bp::init< QVector< QString > const & >(( bp::arg("values") ), "") );
        PackedArray2D_QString_Array_exposer.def( bp::init< SireBase::detail::PackedArray2D_Array< QString > const & >(( bp::arg("other") ), "") );
        { //::SireBase::detail::PackedArray2D_Array< QString >::assertValidIndex
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef void ( ::SireBase::detail::PackedArray2D_Array< QString >::*assertValidIndex_function_type)( ::quint32 ) const;
            assertValidIndex_function_type assertValidIndex_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::assertValidIndex );
            
            PackedArray2D_QString_Array_exposer.def( 
                "assertValidIndex"
                , assertValidIndex_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::at
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::QString const & ( ::SireBase::detail::PackedArray2D_Array< QString >::*at_function_type)( ::quint32 ) const;
            at_function_type at_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::at );
            
            PackedArray2D_QString_Array_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::count
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef int ( ::SireBase::detail::PackedArray2D_Array< QString >::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::count );
            
            PackedArray2D_QString_Array_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::isEmpty
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef bool ( ::SireBase::detail::PackedArray2D_Array< QString >::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::isEmpty );
            
            PackedArray2D_QString_Array_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::nValues
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef int ( ::SireBase::detail::PackedArray2D_Array< QString >::*nValues_function_type)(  ) const;
            nValues_function_type nValues_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::nValues );
            
            PackedArray2D_QString_Array_exposer.def( 
                "nValues"
                , nValues_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PackedArray2D_QString_Array_exposer.def( bp::self != bp::self );
        { //::SireBase::detail::PackedArray2D_Array< QString >::operator=
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::SireBase::detail::PackedArray2D_Array< QString > & ( ::SireBase::detail::PackedArray2D_Array< QString >::*assign_function_type)( ::SireBase::detail::PackedArray2D_Array< QString > const & ) ;
            assign_function_type assign_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::operator= );
            
            PackedArray2D_QString_Array_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        PackedArray2D_QString_Array_exposer.def( bp::self == bp::self );
        { //::SireBase::detail::PackedArray2D_Array< QString >::operator[]
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::QString const & ( ::SireBase::detail::PackedArray2D_Array< QString >::*__getitem___function_type)( ::quint32 ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::detail::PackedArray2D_Array< QString >::operator[] );
            
            PackedArray2D_QString_Array_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::operator[]
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::QString & ( ::SireBase::detail::PackedArray2D_Array< QString >::*__getitem___function_type)( ::quint32 ) ;
            __getitem___function_type __getitem___function_value( &::SireBase::detail::PackedArray2D_Array< QString >::operator[] );
            
            PackedArray2D_QString_Array_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_internal_reference< >()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::size
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef int ( ::SireBase::detail::PackedArray2D_Array< QString >::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::size );
            
            PackedArray2D_QString_Array_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::toQVector
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::QVector< QString > ( ::SireBase::detail::PackedArray2D_Array< QString >::*toQVector_function_type)(  ) const;
            toQVector_function_type toQVector_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::toQVector );
            
            PackedArray2D_QString_Array_exposer.def( 
                "toQVector"
                , toQVector_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::toString
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef ::QString ( ::SireBase::detail::PackedArray2D_Array< QString >::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::toString );
            
            PackedArray2D_QString_Array_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::detail::PackedArray2D_Array< QString >::update
        
            typedef SireBase::detail::PackedArray2D_Array< QString > exported_class_t;
            typedef void ( ::SireBase::detail::PackedArray2D_Array< QString >::*update_function_type)( ::SireBase::detail::PackedArray2D_Array< QString > const & ) ;
            update_function_type update_function_value( &::SireBase::detail::PackedArray2D_Array< QString >::update );
            
            PackedArray2D_QString_Array_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("other") )
                , bp::release_gil_policy()
                , "" );
        
        }
        PackedArray2D_QString_Array_exposer.def( "__copy__", &__copy__);
        PackedArray2D_QString_Array_exposer.def( "__deepcopy__", &__copy__);
        PackedArray2D_QString_Array_exposer.def( "clone", &__copy__);
        PackedArray2D_QString_Array_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::detail::PackedArray2D_Array<QString> >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PackedArray2D_QString_Array_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::detail::PackedArray2D_Array<QString> >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PackedArray2D_QString_Array_exposer.def_pickle(sire_pickle_suite< ::SireBase::detail::PackedArray2D_Array<QString> >());
        PackedArray2D_QString_Array_exposer.def( "__str__", &__str__< ::SireBase::detail::PackedArray2D_Array<QString> > );
        PackedArray2D_QString_Array_exposer.def( "__repr__", &__str__< ::SireBase::detail::PackedArray2D_Array<QString> > );
        PackedArray2D_QString_Array_exposer.def( "__len__", &__len_size< ::SireBase::detail::PackedArray2D_Array<QString> > );
    }

}
