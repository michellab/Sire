// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_Base_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "findexe.h"

#include <QDir>

#include <QProcess>

#include <QRegExp>

#include <QStringList>

#include "findexe.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "increment.h"

#include "increment.h"

#include "SireError/errors.h"

#include "getinstalldir.h"

#include "sire_config.h"

#include "sire_version.h"

#include <QDebug>

#include <QDir>

#include <QFileInfo>

#include "getinstalldir.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "arrayproperty.hpp"

#include "numberproperty.h"

#include "propertylist.h"

#include "stringproperty.h"

#include "tostring.h"

#include "variantproperty.h"

#include "propertylist.h"

void register_free_functions(){

    { //::SireBase::findExe
    
        typedef ::QFileInfo ( *findExe_function_type )( ::QString const & );
        findExe_function_type findExe_function_value( &::SireBase::findExe );
        
        bp::def( 
            "findExe"
            , findExe_function_value
            , ( bp::arg("exe") )
            , "Return the fileinfo for the executable called exe. This\nsearches the system path until it finds the first occurance\nof this executable." );
    
    }

    { //::SireBase::getBinDir
    
        typedef ::QString ( *getBinDir_function_type )(  );
        getBinDir_function_type getBinDir_function_value( &::SireBase::getBinDir );
        
        bp::def( 
            "getBinDir"
            , getBinDir_function_value
            , "" );
    
    }

    { //::SireBase::getBundledLibDir
    
        typedef ::QString ( *getBundledLibDir_function_type )(  );
        getBundledLibDir_function_type getBundledLibDir_function_value( &::SireBase::getBundledLibDir );
        
        bp::def( 
            "getBundledLibDir"
            , getBundledLibDir_function_value
            , "" );
    
    }

    { //::SireBase::getInstallDir
    
        typedef ::QString ( *getInstallDir_function_type )(  );
        getInstallDir_function_type getInstallDir_function_value( &::SireBase::getInstallDir );
        
        bp::def( 
            "getInstallDir"
            , getInstallDir_function_value
            , "" );
    
    }

    { //::SireBase::getLibDir
    
        typedef ::QString ( *getLibDir_function_type )(  );
        getLibDir_function_type getLibDir_function_value( &::SireBase::getLibDir );
        
        bp::def( 
            "getLibDir"
            , getLibDir_function_value
            , "" );
    
    }

    { //::SireBase::getReleaseVersion
    
        typedef ::QString ( *getReleaseVersion_function_type )(  );
        getReleaseVersion_function_type getReleaseVersion_function_value( &::SireBase::getReleaseVersion );
        
        bp::def( 
            "getReleaseVersion"
            , getReleaseVersion_function_value
            , "" );
    
    }

    { //::SireBase::getRepositoryBranch
    
        typedef ::QString ( *getRepositoryBranch_function_type )(  );
        getRepositoryBranch_function_type getRepositoryBranch_function_value( &::SireBase::getRepositoryBranch );
        
        bp::def( 
            "getRepositoryBranch"
            , getRepositoryBranch_function_value
            , "" );
    
    }

    { //::SireBase::getRepositoryURL
    
        typedef ::QString ( *getRepositoryURL_function_type )(  );
        getRepositoryURL_function_type getRepositoryURL_function_value( &::SireBase::getRepositoryURL );
        
        bp::def( 
            "getRepositoryURL"
            , getRepositoryURL_function_value
            , "" );
    
    }

    { //::SireBase::getRepositoryVersion
    
        typedef ::QString ( *getRepositoryVersion_function_type )(  );
        getRepositoryVersion_function_type getRepositoryVersion_function_value( &::SireBase::getRepositoryVersion );
        
        bp::def( 
            "getRepositoryVersion"
            , getRepositoryVersion_function_value
            , "" );
    
    }

    { //::SireBase::getRepositoryVersionIsClean
    
        typedef bool ( *getRepositoryVersionIsClean_function_type )(  );
        getRepositoryVersionIsClean_function_type getRepositoryVersionIsClean_function_value( &::SireBase::getRepositoryVersionIsClean );
        
        bp::def( 
            "getRepositoryVersionIsClean"
            , getRepositoryVersionIsClean_function_value
            , "" );
    
    }

    { //::SireBase::getShareDir
    
        typedef ::QString ( *getShareDir_function_type )(  );
        getShareDir_function_type getShareDir_function_value( &::SireBase::getShareDir );
        
        bp::def( 
            "getShareDir"
            , getShareDir_function_value
            , "" );
    
    }

    { //::SireBase::getSireDir
    
        typedef ::QString ( *getSireDir_function_type )( ::QString const &,bool );
        getSireDir_function_type getSireDir_function_value( &::SireBase::getSireDir );
        
        bp::def( 
            "getSireDir"
            , getSireDir_function_value
            , ( bp::arg("path"), bp::arg("assert_exists")=(bool)(true) )
            , "" );
    
    }

    { //::SireBase::increment
    
        typedef ::QString ( *increment_function_type )( ::QString );
        increment_function_type increment_function_value( &::SireBase::increment );
        
        bp::def( 
            "increment"
            , increment_function_value
            , ( bp::arg("name") )
            , "" );
    
    }

    { //::SireBase::setInstallDir
    
        typedef void ( *setInstallDir_function_type )( ::QString );
        setInstallDir_function_type setInstallDir_function_value( &::SireBase::setInstallDir );
        
        bp::def( 
            "setInstallDir"
            , setInstallDir_function_value
            , ( bp::arg("dir") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::SireBase::Property const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QString const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( double );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QVariant const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( char const * );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QList< SireBase::PropPtr< SireBase::Property > > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("value") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QList< double > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QList< int > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QVector< double > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QVector< int > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QList< QString > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QVector< QString > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QStringList const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QList< QVariant > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

    { //::SireBase::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::QVector< QVariant > const & );
        wrap_function_type wrap_function_value( &::SireBase::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("values") )
            , "" );
    
    }

}
