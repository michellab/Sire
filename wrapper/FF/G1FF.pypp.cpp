// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "G1FF.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireMol/mgname.h"

#include "SireMol/mgnum.h"

#include "SireMol/molecule.h"

#include "SireMol/molname.h"

#include "SireMol/molnum.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "g1ff.h"

#include <QDebug>

#include "g1ff.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_G1FF_class(){

    { //::SireFF::G1FF
        typedef bp::class_< SireFF::G1FF, bp::bases< SireFF::FF, SireMol::MolGroupsBase, SireBase::Property >, boost::noncopyable > G1FF_exposer_t;
        G1FF_exposer_t G1FF_exposer = G1FF_exposer_t( "G1FF", "This is the base class of all forcefields that hold just\na single group of molecules\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope G1FF_scope( G1FF_exposer );
        { //::SireFF::G1FF::accept
        
            typedef void ( ::SireFF::G1FF::*accept_function_type)(  ) ;
            accept_function_type accept_function_value( &::SireFF::G1FF::accept );
            
            G1FF_exposer.def( 
                "accept"
                , accept_function_value
                , bp::release_gil_policy()
                , "Tell the forcefield that the last move was accepted. This tells the\nforcefield to make permanent any temporary changes that were used a workspace\nto avoid memory allocation during a move" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::ViewsOfMol const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::MoleculeView const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::ViewsOfMol const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::Molecules const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::add
        
            typedef void ( ::SireFF::G1FF::*add_function_type)( ::SireMol::MoleculeGroup const & ) ;
            add_function_type add_function_value( &::SireFF::G1FF::add );
            
            G1FF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::ViewsOfMol const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::MoleculeView const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::ViewsOfMol const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::Molecules const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::addIfUnique
        
            typedef void ( ::SireFF::G1FF::*addIfUnique_function_type)( ::SireMol::MoleculeGroup const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::G1FF::addIfUnique );
            
            G1FF_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::assertContains
        
            typedef void ( ::SireFF::G1FF::*assertContains_function_type)( ::SireMol::MGNum ) const;
            assertContains_function_type assertContains_function_value( &::SireFF::G1FF::assertContains );
            
            G1FF_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgnum") )
                , bp::release_gil_policy()
                , "Assert that this forcefield contains the group with number mgnum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireFF::G1FF::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireFF::G1FF::*at_function_type)( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireFF::G1FF::at );
            
            G1FF_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the molecule group with number mgnum\nThrow: SireMol::missing_group\n" );
        
        }
        { //::SireFF::G1FF::needsAccepting
        
            typedef bool ( ::SireFF::G1FF::*needsAccepting_function_type)(  ) const;
            needsAccepting_function_type needsAccepting_function_value( &::SireFF::G1FF::needsAccepting );
            
            G1FF_exposer.def( 
                "needsAccepting"
                , needsAccepting_function_value
                , bp::release_gil_policy()
                , "Return whether or not this forcefield is using temporary workspace that needs\nto be accepted" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::SireMol::MoleculeView const & ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::SireMol::ViewsOfMol const & ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::SireMol::Molecules const & ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::SireMol::MolNum ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::remove
        
            typedef bool ( ::SireFF::G1FF::*remove_function_type)( ::QSet< SireMol::MolNum > const & ) ;
            remove_function_type remove_function_value( &::SireFF::G1FF::remove );
            
            G1FF_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::removeAll
        
            typedef bool ( ::SireFF::G1FF::*removeAll_function_type)(  ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::G1FF::removeAll );
            
            G1FF_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::removeAll
        
            typedef bool ( ::SireFF::G1FF::*removeAll_function_type)( ::SireMol::MoleculeView const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::G1FF::removeAll );
            
            G1FF_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::removeAll
        
            typedef bool ( ::SireFF::G1FF::*removeAll_function_type)( ::SireMol::ViewsOfMol const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::G1FF::removeAll );
            
            G1FF_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::removeAll
        
            typedef bool ( ::SireFF::G1FF::*removeAll_function_type)( ::SireMol::Molecules const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::G1FF::removeAll );
            
            G1FF_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::removeAll
        
            typedef bool ( ::SireFF::G1FF::*removeAll_function_type)( ::SireMol::MoleculeGroup const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::G1FF::removeAll );
            
            G1FF_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molview") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molview"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::ViewsOfMol const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molviews"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molecules"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::G1FF::setContents
        
            typedef void ( ::SireFF::G1FF::*setContents_function_type)( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::G1FF::setContents );
            
            G1FF_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molgroup"), bp::arg("map") )
                , bp::release_gil_policy()
                , "" );
        
        }
        G1FF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::G1FF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        G1FF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::G1FF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        G1FF_exposer.def_pickle(sire_pickle_suite< ::SireFF::G1FF >());
        G1FF_exposer.def( "__str__", &__str__< ::SireFF::G1FF > );
        G1FF_exposer.def( "__repr__", &__str__< ::SireFF::G1FF > );
        G1FF_exposer.def( "__len__", &__len_count< ::SireFF::G1FF > );
    }

}
