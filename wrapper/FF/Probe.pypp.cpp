// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "Probe.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "probe.h"

#include "probe.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Probe_class(){

    { //::SireFF::Probe
        typedef bp::class_< SireFF::Probe, bp::bases< SireBase::Property >, boost::noncopyable > Probe_exposer_t;
        Probe_exposer_t Probe_exposer = Probe_exposer_t( "Probe", "This is the base class of all Probes - a Probe is an object\nthat is used to probe the potential or field at a point in\nspace caused by a ForceField. For example, a Probe could\nbe a point unit charge, or a united atom methane point etc.\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope Probe_scope( Probe_exposer );
        { //::SireFF::Probe::null
        
            typedef ::SireFF::Probe const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireFF::Probe::null );
            
            Probe_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireFF::Probe::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireFF::Probe::typeName );
            
            Probe_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Probe_exposer.staticmethod( "null" );
        Probe_exposer.staticmethod( "typeName" );
        Probe_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::Probe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Probe_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::Probe >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Probe_exposer.def_pickle(sire_pickle_suite< ::SireFF::Probe >());
        Probe_exposer.def( "__str__", &__str__< ::SireFF::Probe > );
        Probe_exposer.def( "__repr__", &__str__< ::SireFF::Probe > );
    }

}
