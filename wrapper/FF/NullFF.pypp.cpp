// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "NullFF.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireMol/mgnum.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireMol/viewsofmol.h"

#include "SireStream/datastream.h"

#include "forcefield.h"

#include <QDebug>

#include <QMutex>

#include "forcefield.h"

SireFF::NullFF __copy__(const SireFF::NullFF &other){ return SireFF::NullFF(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_NullFF_class(){

    { //::SireFF::NullFF
        typedef bp::class_< SireFF::NullFF, bp::bases< SireFF::FF, SireMol::MolGroupsBase, SireBase::Property > > NullFF_exposer_t;
        NullFF_exposer_t NullFF_exposer = NullFF_exposer_t( "NullFF", "This is a completely null forcefield. It has zero energy\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope NullFF_scope( NullFF_exposer );
        NullFF_exposer.def( bp::init< SireFF::NullFF const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireFF::NullFF::accept
        
            typedef void ( ::SireFF::NullFF::*accept_function_type)(  ) ;
            accept_function_type accept_function_value( &::SireFF::NullFF::accept );
            
            NullFF_exposer.def( 
                "accept"
                , accept_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::NullFF::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireFF::NullFF::*at_function_type)( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireFF::NullFF::at );
            
            NullFF_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireFF::NullFF::components
        
            typedef ::SireFF::FFComponent const & ( ::SireFF::NullFF::*components_function_type)(  ) const;
            components_function_type components_function_value( &::SireFF::NullFF::components );
            
            NullFF_exposer.def( 
                "components"
                , components_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireFF::NullFF::containsProperty
        
            typedef bool ( ::SireFF::NullFF::*containsProperty_function_type)( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireFF::NullFF::containsProperty );
            
            NullFF_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::NullFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireFF::NullFF::*mustNowRecalculateFromScratch_function_type)(  ) ;
            mustNowRecalculateFromScratch_function_type mustNowRecalculateFromScratch_function_value( &::SireFF::NullFF::mustNowRecalculateFromScratch );
            
            NullFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::NullFF::needsAccepting
        
            typedef bool ( ::SireFF::NullFF::*needsAccepting_function_type)(  ) const;
            needsAccepting_function_type needsAccepting_function_value( &::SireFF::NullFF::needsAccepting );
            
            NullFF_exposer.def( 
                "needsAccepting"
                , needsAccepting_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        NullFF_exposer.def( bp::self != bp::self );
        { //::SireFF::NullFF::operator=
        
            typedef ::SireFF::NullFF & ( ::SireFF::NullFF::*assign_function_type)( ::SireFF::NullFF const & ) ;
            assign_function_type assign_function_value( &::SireFF::NullFF::operator= );
            
            NullFF_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        NullFF_exposer.def( bp::self == bp::self );
        { //::SireFF::NullFF::properties
        
            typedef ::SireBase::Properties const & ( ::SireFF::NullFF::*properties_function_type)(  ) const;
            properties_function_type properties_function_value( &::SireFF::NullFF::properties );
            
            NullFF_exposer.def( 
                "properties"
                , properties_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireFF::NullFF::property
        
            typedef ::SireBase::Property const & ( ::SireFF::NullFF::*property_function_type)( ::QString const & ) const;
            property_function_type property_function_value( &::SireFF::NullFF::property );
            
            NullFF_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireFF::NullFF::setProperty
        
            typedef bool ( ::SireFF::NullFF::*setProperty_function_type)( ::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireFF::NullFF::setProperty );
            
            NullFF_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::NullFF::toString
        
            typedef ::QString ( ::SireFF::NullFF::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireFF::NullFF::toString );
            
            NullFF_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::NullFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireFF::NullFF::typeName );
            
            NullFF_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        NullFF_exposer.staticmethod( "typeName" );
        NullFF_exposer.def( "__copy__", &__copy__);
        NullFF_exposer.def( "__deepcopy__", &__copy__);
        NullFF_exposer.def( "clone", &__copy__);
        NullFF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::NullFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullFF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::NullFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullFF_exposer.def_pickle(sire_pickle_suite< ::SireFF::NullFF >());
        NullFF_exposer.def( "__str__", &__str__< ::SireFF::NullFF > );
        NullFF_exposer.def( "__repr__", &__str__< ::SireFF::NullFF > );
        NullFF_exposer.def( "__len__", &__len_count< ::SireFF::NullFF > );
    }

}
