// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "AtomPoint.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/evaluator.h"

#include "SireMol/mgidx.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculegroups.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/aabox.h"

#include "SireVol/errors.h"

#include "forcetable.h"

#include "point.h"

#include <boost/tuple/tuple.hpp>

#include "point.h"

SireFF::AtomPoint __copy__(const SireFF::AtomPoint &other){ return SireFF::AtomPoint(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomPoint_class(){

    { //::SireFF::AtomPoint
        typedef bp::class_< SireFF::AtomPoint, bp::bases< SireFF::Point, SireBase::Property > > AtomPoint_exposer_t;
        AtomPoint_exposer_t AtomPoint_exposer = AtomPoint_exposer_t( "AtomPoint", "This point returns the location of an atom", bp::init< >("Constructor") );
        bp::scope AtomPoint_scope( AtomPoint_exposer );
        AtomPoint_exposer.def( bp::init< SireMol::Atom const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom"), bp::arg("map")=SireBase::PropertyMap() ), "Construct for the passed atom") );
        AtomPoint_exposer.def( bp::init< SireFF::AtomPoint const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireFF::AtomPoint::addForce
        
            typedef bool ( ::SireFF::AtomPoint::*addForce_function_type)( ::SireFF::MolForceTable &,::SireMaths::Vector const & ) const;
            addForce_function_type addForce_function_value( &::SireFF::AtomPoint::addForce );
            
            AtomPoint_exposer.def( 
                "addForce"
                , addForce_function_value
                , ( bp::arg("molforces"), bp::arg("force") )
                , bp::release_gil_policy()
                , "Add the force acting on this atom to the passed table (if it is\nthe table for the molecule containing the atom" );
        
        }
        { //::SireFF::AtomPoint::addForce
        
            typedef bool ( ::SireFF::AtomPoint::*addForce_function_type)( ::SireFF::ForceTable &,::SireMaths::Vector const & ) const;
            addForce_function_type addForce_function_value( &::SireFF::AtomPoint::addForce );
            
            AtomPoint_exposer.def( 
                "addForce"
                , addForce_function_value
                , ( bp::arg("forces"), bp::arg("force") )
                , bp::release_gil_policy()
                , "Add the force acting on this atom to the passed table (if it contains\nthe table for the molecule containing the atom" );
        
        }
        { //::SireFF::AtomPoint::atom
        
            typedef ::SireMol::Atom const & ( ::SireFF::AtomPoint::*atom_function_type)(  ) const;
            atom_function_type atom_function_value( &::SireFF::AtomPoint::atom );
            
            AtomPoint_exposer.def( 
                "atom"
                , atom_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the actual atom" );
        
        }
        { //::SireFF::AtomPoint::contains
        
            typedef bool ( ::SireFF::AtomPoint::*contains_function_type)( ::SireMol::MolNum ) const;
            contains_function_type contains_function_value( &::SireFF::AtomPoint::contains );
            
            AtomPoint_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") )
                , bp::release_gil_policy()
                , "Does this point require information from the molecule with number molnum" );
        
        }
        { //::SireFF::AtomPoint::contains
        
            typedef bool ( ::SireFF::AtomPoint::*contains_function_type)( ::SireMol::MolID const & ) const;
            contains_function_type contains_function_value( &::SireFF::AtomPoint::contains );
            
            AtomPoint_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molid") )
                , bp::release_gil_policy()
                , "Does this point require information from the molecule with ID molid" );
        
        }
        { //::SireFF::AtomPoint::isExtraMoleculePoint
        
            typedef bool ( ::SireFF::AtomPoint::*isExtraMoleculePoint_function_type)(  ) const;
            isExtraMoleculePoint_function_type isExtraMoleculePoint_function_value( &::SireFF::AtomPoint::isExtraMoleculePoint );
            
            AtomPoint_exposer.def( 
                "isExtraMoleculePoint"
                , isExtraMoleculePoint_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is an extramolecular point (it is independent\nof the coordinates of atoms in any molecule, i.e. it is just a point in space)" );
        
        }
        { //::SireFF::AtomPoint::isInterMoleculePoint
        
            typedef bool ( ::SireFF::AtomPoint::*isInterMoleculePoint_function_type)(  ) const;
            isInterMoleculePoint_function_type isInterMoleculePoint_function_value( &::SireFF::AtomPoint::isInterMoleculePoint );
            
            AtomPoint_exposer.def( 
                "isInterMoleculePoint"
                , isInterMoleculePoint_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is an intermolecular point (it depends on\ncoordinates of atoms from than one molecule)" );
        
        }
        { //::SireFF::AtomPoint::isIntraMoleculePoint
        
            typedef bool ( ::SireFF::AtomPoint::*isIntraMoleculePoint_function_type)(  ) const;
            isIntraMoleculePoint_function_type isIntraMoleculePoint_function_value( &::SireFF::AtomPoint::isIntraMoleculePoint );
            
            AtomPoint_exposer.def( 
                "isIntraMoleculePoint"
                , isIntraMoleculePoint_function_value
                , bp::release_gil_policy()
                , "Return whether this is an intramolecular point (it depends on coordinates\nof atoms in just one molecule)" );
        
        }
        { //::SireFF::AtomPoint::molecules
        
            typedef ::SireMol::Molecules ( ::SireFF::AtomPoint::*molecules_function_type)(  ) const;
            molecules_function_type molecules_function_value( &::SireFF::AtomPoint::molecules );
            
            AtomPoint_exposer.def( 
                "molecules"
                , molecules_function_value
                , bp::release_gil_policy()
                , "Return the molecules needed to get this point" );
        
        }
        { //::SireFF::AtomPoint::nMolecules
        
            typedef int ( ::SireFF::AtomPoint::*nMolecules_function_type)(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireFF::AtomPoint::nMolecules );
            
            AtomPoint_exposer.def( 
                "nMolecules"
                , nMolecules_function_value
                , bp::release_gil_policy()
                , "Return the number of molecules needed to get this point" );
        
        }
        AtomPoint_exposer.def( bp::self != bp::self );
        { //::SireFF::AtomPoint::operator=
        
            typedef ::SireFF::AtomPoint & ( ::SireFF::AtomPoint::*assign_function_type)( ::SireFF::AtomPoint const & ) ;
            assign_function_type assign_function_value( &::SireFF::AtomPoint::operator= );
            
            AtomPoint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AtomPoint_exposer.def( bp::self == bp::self );
        { //::SireFF::AtomPoint::toString
        
            typedef ::QString ( ::SireFF::AtomPoint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireFF::AtomPoint::toString );
            
            AtomPoint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation" );
        
        }
        { //::SireFF::AtomPoint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireFF::AtomPoint::typeName );
            
            AtomPoint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireFF::AtomPoint::update
        
            typedef bool ( ::SireFF::AtomPoint::*update_function_type)( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireFF::AtomPoint::update );
            
            AtomPoint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") )
                , bp::release_gil_policy()
                , "Update this point, returning whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::update
        
            typedef bool ( ::SireFF::AtomPoint::*update_function_type)( ::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireFF::AtomPoint::update );
            
            AtomPoint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Update this point, returning whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::update
        
            typedef bool ( ::SireFF::AtomPoint::*update_function_type)( ::SireMol::MoleculeGroup const & ) ;
            update_function_type update_function_value( &::SireFF::AtomPoint::update );
            
            AtomPoint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Update this point, returning whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::update
        
            typedef bool ( ::SireFF::AtomPoint::*update_function_type)( ::SireMol::MolGroupsBase const & ) ;
            update_function_type update_function_value( &::SireFF::AtomPoint::update );
            
            AtomPoint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroups") )
                , bp::release_gil_policy()
                , "Update this point, returning whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::usesMoleculesIn
        
            typedef bool ( ::SireFF::AtomPoint::*usesMoleculesIn_function_type)( ::SireFF::ForceTable const & ) const;
            usesMoleculesIn_function_type usesMoleculesIn_function_value( &::SireFF::AtomPoint::usesMoleculesIn );
            
            AtomPoint_exposer.def( 
                "usesMoleculesIn"
                , usesMoleculesIn_function_value
                , ( bp::arg("forcetable") )
                , bp::release_gil_policy()
                , "Return whether or not this point uses data from any of the\nmolecules in the passed forcetable" );
        
        }
        { //::SireFF::AtomPoint::usesMoleculesIn
        
            typedef bool ( ::SireFF::AtomPoint::*usesMoleculesIn_function_type)( ::SireMol::Molecules const & ) const;
            usesMoleculesIn_function_type usesMoleculesIn_function_value( &::SireFF::AtomPoint::usesMoleculesIn );
            
            AtomPoint_exposer.def( 
                "usesMoleculesIn"
                , usesMoleculesIn_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Return whether or not this point uses data from any of the\nmolecules in molecules" );
        
        }
        { //::SireFF::AtomPoint::usesMoleculesIn
        
            typedef bool ( ::SireFF::AtomPoint::*usesMoleculesIn_function_type)( ::SireMol::MoleculeGroup const & ) const;
            usesMoleculesIn_function_type usesMoleculesIn_function_value( &::SireFF::AtomPoint::usesMoleculesIn );
            
            AtomPoint_exposer.def( 
                "usesMoleculesIn"
                , usesMoleculesIn_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Return whether or not this point uses data from any of the\nmolecules in the group molgroup" );
        
        }
        { //::SireFF::AtomPoint::usesMoleculesIn
        
            typedef bool ( ::SireFF::AtomPoint::*usesMoleculesIn_function_type)( ::SireMol::MolGroupsBase const & ) const;
            usesMoleculesIn_function_type usesMoleculesIn_function_value( &::SireFF::AtomPoint::usesMoleculesIn );
            
            AtomPoint_exposer.def( 
                "usesMoleculesIn"
                , usesMoleculesIn_function_value
                , ( bp::arg("molgroups") )
                , bp::release_gil_policy()
                , "Return whether or not this point uses data from any of the\nmolecules in the groups in molgroups" );
        
        }
        { //::SireFF::AtomPoint::wouldUpdate
        
            typedef bool ( ::SireFF::AtomPoint::*wouldUpdate_function_type)( ::SireMol::MoleculeData const & ) const;
            wouldUpdate_function_type wouldUpdate_function_value( &::SireFF::AtomPoint::wouldUpdate );
            
            AtomPoint_exposer.def( 
                "wouldUpdate"
                , wouldUpdate_function_value
                , ( bp::arg("moldata") )
                , bp::release_gil_policy()
                , "Return whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::wouldUpdate
        
            typedef bool ( ::SireFF::AtomPoint::*wouldUpdate_function_type)( ::SireMol::Molecules const & ) const;
            wouldUpdate_function_type wouldUpdate_function_value( &::SireFF::AtomPoint::wouldUpdate );
            
            AtomPoint_exposer.def( 
                "wouldUpdate"
                , wouldUpdate_function_value
                , ( bp::arg("molecules") )
                , bp::release_gil_policy()
                , "Return whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::wouldUpdate
        
            typedef bool ( ::SireFF::AtomPoint::*wouldUpdate_function_type)( ::SireMol::MoleculeGroup const & ) const;
            wouldUpdate_function_type wouldUpdate_function_value( &::SireFF::AtomPoint::wouldUpdate );
            
            AtomPoint_exposer.def( 
                "wouldUpdate"
                , wouldUpdate_function_value
                , ( bp::arg("molgroup") )
                , bp::release_gil_policy()
                , "Return whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        { //::SireFF::AtomPoint::wouldUpdate
        
            typedef bool ( ::SireFF::AtomPoint::*wouldUpdate_function_type)( ::SireMol::MolGroupsBase const & ) const;
            wouldUpdate_function_type wouldUpdate_function_value( &::SireFF::AtomPoint::wouldUpdate );
            
            AtomPoint_exposer.def( 
                "wouldUpdate"
                , wouldUpdate_function_value
                , ( bp::arg("molgroups") )
                , bp::release_gil_policy()
                , "Return whether or not this changes\nthe location of this point\nThrow: SireBase::missing_property\nThrow: SireError::incompatible_error\nThrow: SireError::invalid_cast\n" );
        
        }
        AtomPoint_exposer.staticmethod( "typeName" );
        AtomPoint_exposer.def( "__copy__", &__copy__);
        AtomPoint_exposer.def( "__deepcopy__", &__copy__);
        AtomPoint_exposer.def( "clone", &__copy__);
        AtomPoint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::AtomPoint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomPoint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::AtomPoint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomPoint_exposer.def_pickle(sire_pickle_suite< ::SireFF::AtomPoint >());
        AtomPoint_exposer.def( "__str__", &__str__< ::SireFF::AtomPoint > );
        AtomPoint_exposer.def( "__repr__", &__str__< ::SireFF::AtomPoint > );
    }

}
