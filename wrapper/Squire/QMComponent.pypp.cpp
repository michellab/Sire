// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "QMComponent.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireBase/propertylist.h"

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireFF/ff.h"

#include "SireMol/atomelements.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "qmpotential.h"

#include "qmprogram.h"

#include "qmpotential.h"

Squire::QMComponent __copy__(const Squire::QMComponent &other){ return Squire::QMComponent(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_QMComponent_class(){

    { //::Squire::QMComponent
        typedef bp::class_< Squire::QMComponent, bp::bases< SireFF::FFComponent, SireCAS::Symbol, SireCAS::ExBase > > QMComponent_exposer_t;
        QMComponent_exposer_t QMComponent_exposer = QMComponent_exposer_t( "QMComponent", "This class represents a QM energy", bp::init< bp::optional< SireFF::FFName const & > >(( bp::arg("ffname")=SireFF::FFName() ), "Constructor for the forcefield called ffname") );
        bp::scope QMComponent_scope( QMComponent_exposer );
        QMComponent_exposer.def( bp::init< SireCAS::Symbol const & >(( bp::arg("symbol") ), "Construct from a symbol\nThrow: SireError::incompatible_error\n") );
        QMComponent_exposer.def( bp::init< Squire::QMComponent const & >(( bp::arg("other") ), "Copy constructor") );
        { //::Squire::QMComponent::changeEnergy
        
            typedef void ( ::Squire::QMComponent::*changeEnergy_function_type)( ::SireFF::FF &,::Squire::QMEnergy const & ) const;
            changeEnergy_function_type changeEnergy_function_value( &::Squire::QMComponent::changeEnergy );
            
            QMComponent_exposer.def( 
                "changeEnergy"
                , changeEnergy_function_value
                , ( bp::arg("ff"), bp::arg("qmnrg") )
                , bp::release_gil_policy()
                , "Change the QM component of the energy in the forcefield ff\nby delta" );
        
        }
        { //::Squire::QMComponent::setEnergy
        
            typedef void ( ::Squire::QMComponent::*setEnergy_function_type)( ::SireFF::FF &,::Squire::QMEnergy const & ) const;
            setEnergy_function_type setEnergy_function_value( &::Squire::QMComponent::setEnergy );
            
            QMComponent_exposer.def( 
                "setEnergy"
                , setEnergy_function_value
                , ( bp::arg("ff"), bp::arg("qmnrg") )
                , bp::release_gil_policy()
                , "Set the QM component of the energy in the forcefield ff\nto equal to the passed QMEnergy" );
        
        }
        { //::Squire::QMComponent::symbols
        
            typedef ::SireCAS::Symbols ( ::Squire::QMComponent::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::Squire::QMComponent::symbols );
            
            QMComponent_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::QMComponent::total
        
            typedef ::Squire::QMComponent const & ( ::Squire::QMComponent::*total_function_type)(  ) const;
            total_function_type total_function_value( &::Squire::QMComponent::total );
            
            QMComponent_exposer.def( 
                "total"
                , total_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::Squire::QMComponent::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Squire::QMComponent::typeName );
            
            QMComponent_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::QMComponent::what
        
            typedef char const * ( ::Squire::QMComponent::*what_function_type)(  ) const;
            what_function_type what_function_value( &::Squire::QMComponent::what );
            
            QMComponent_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        QMComponent_exposer.staticmethod( "typeName" );
        QMComponent_exposer.def( "__copy__", &__copy__);
        QMComponent_exposer.def( "__deepcopy__", &__copy__);
        QMComponent_exposer.def( "clone", &__copy__);
        QMComponent_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Squire::QMComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QMComponent_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Squire::QMComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QMComponent_exposer.def_pickle(sire_pickle_suite< ::Squire::QMComponent >());
        QMComponent_exposer.def( "__str__", &__str__< ::Squire::QMComponent > );
        QMComponent_exposer.def( "__repr__", &__str__< ::Squire::QMComponent > );
        QMComponent_exposer.def( "__hash__", &::Squire::QMComponent::hash );
    }

}
