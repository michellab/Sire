// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "HF.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/gamma.h"

#include "SireMaths/maths.h"

#include "SireMaths/nmatrix.h"

#include "SireMaths/nvector.h"

#include "SireMaths/vector.h"

#include "hf.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include <QDebug>

#include "hf.h"

Squire::HF __copy__(const Squire::HF &other){ return Squire::HF(other); }

const char* pvt_get_name(const Squire::HF&){ return "Squire::HF";}

#include "Helpers/release_gil_policy.hpp"

void register_HF_class(){

    { //::Squire::HF
        typedef bp::class_< Squire::HF > HF_exposer_t;
        HF_exposer_t HF_exposer = HF_exposer_t( "HF", "This is my first attempt at a small HF program", bp::init< >("Constructor") );
        bp::scope HF_scope( HF_exposer );
        { //::Squire::HF::add
        
            typedef void ( ::Squire::HF::*add_function_type)( ::Squire::Orbital const & ) ;
            add_function_type add_function_value( &::Squire::HF::add );
            
            HF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("orbital") )
                , bp::release_gil_policy()
                , "Add an orbital that does not to be located at a particular\npoint in space" );
        
        }
        { //::Squire::HF::add
        
            typedef void ( ::Squire::HF::*add_function_type)( ::SireMaths::Vector const &,::Squire::Orbital const & ) ;
            add_function_type add_function_value( &::Squire::HF::add );
            
            HF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("point"), bp::arg("orbital") )
                , bp::release_gil_policy()
                , "Add an orbital that needs to be placed at center" );
        
        }
        { //::Squire::HF::add
        
            typedef void ( ::Squire::HF::*add_function_type)( ::SireMaths::Vector const &,::SireUnits::Dimension::Charge const & ) ;
            add_function_type add_function_value( &::Squire::HF::add );
            
            HF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("point"), bp::arg("charge") )
                , bp::release_gil_policy()
                , "Add an orbital that needs to be placed at center" );
        
        }
        { //::Squire::HF::add
        
            typedef void ( ::Squire::HF::*add_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) ;
            add_function_type add_function_value( &::Squire::HF::add );
            
            HF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("point"), bp::arg("dipole") )
                , bp::release_gil_policy()
                , "Add an orbital that needs to be placed at center" );
        
        }
        { //::Squire::HF::solve
        
            typedef void ( ::Squire::HF::*solve_function_type)(  ) ;
            solve_function_type solve_function_value( &::Squire::HF::solve );
            
            HF_exposer.def( 
                "solve"
                , solve_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        HF_exposer.def( "__copy__", &__copy__);
        HF_exposer.def( "__deepcopy__", &__copy__);
        HF_exposer.def( "clone", &__copy__);
        HF_exposer.def( "__str__", &pvt_get_name);
        HF_exposer.def( "__repr__", &pvt_get_name);
    }

}
