// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Orbital.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "orbital.h"

#include "orbital.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Orbital_class(){

    { //::Squire::Orbital
        typedef bp::class_< Squire::Orbital, bp::bases< SireBase::Property >, boost::noncopyable > Orbital_exposer_t;
        Orbital_exposer_t Orbital_exposer = Orbital_exposer_t( "Orbital", "This is the base class of all orbitals.\n\nOrbital classes (like OrbitalShell) are designed to hold\ninformation about an orbital, and are not meant to be\nused directly in an integral program (indeed, an orbital\nnormally doesnt even have coordinate information, as\nthis is provided by the molecule that holds the orbital).\n\nOrbital classes are thus virtual and not designed for speed.\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope Orbital_scope( Orbital_exposer );
        { //::Squire::Orbital::toString
        
            typedef ::QString ( ::Squire::Orbital::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::Squire::Orbital::toString );
            
            Orbital_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::Orbital::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Squire::Orbital::typeName );
            
            Orbital_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Orbital_exposer.staticmethod( "typeName" );
        Orbital_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Squire::Orbital >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Orbital_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Squire::Orbital >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Orbital_exposer.def_pickle(sire_pickle_suite< ::Squire::Orbital >());
        Orbital_exposer.def( "__str__", &__str__< ::Squire::Orbital > );
        Orbital_exposer.def( "__repr__", &__str__< ::Squire::Orbital > );
    }

}
