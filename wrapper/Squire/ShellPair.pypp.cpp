// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ShellPair.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "orbital.h"

#include "orbital.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ShellPair_class(){

    { //::Squire::ShellPair
        typedef bp::class_< Squire::ShellPair, bp::bases< SireBase::Property >, boost::noncopyable > ShellPair_exposer_t;
        ShellPair_exposer_t ShellPair_exposer = ShellPair_exposer_t( "ShellPair", "The base class of all combined pair orbitals", bp::no_init );
        bp::scope ShellPair_scope( ShellPair_exposer );
        { //::Squire::ShellPair::angularMomentum0
        
            typedef int ( ::Squire::ShellPair::*angularMomentum0_function_type)(  ) const;
            angularMomentum0_function_type angularMomentum0_function_value( &::Squire::ShellPair::angularMomentum0 );
            
            ShellPair_exposer.def( 
                "angularMomentum0"
                , angularMomentum0_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::ShellPair::angularMomentum1
        
            typedef int ( ::Squire::ShellPair::*angularMomentum1_function_type)(  ) const;
            angularMomentum1_function_type angularMomentum1_function_value( &::Squire::ShellPair::angularMomentum1 );
            
            ShellPair_exposer.def( 
                "angularMomentum1"
                , angularMomentum1_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::ShellPair::nOrbitals0
        
            typedef int ( ::Squire::ShellPair::*nOrbitals0_function_type)(  ) const;
            nOrbitals0_function_type nOrbitals0_function_value( &::Squire::ShellPair::nOrbitals0 );
            
            ShellPair_exposer.def( 
                "nOrbitals0"
                , nOrbitals0_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::ShellPair::nOrbitals1
        
            typedef int ( ::Squire::ShellPair::*nOrbitals1_function_type)(  ) const;
            nOrbitals1_function_type nOrbitals1_function_value( &::Squire::ShellPair::nOrbitals1 );
            
            ShellPair_exposer.def( 
                "nOrbitals1"
                , nOrbitals1_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::Squire::ShellPair::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Squire::ShellPair::typeName );
            
            ShellPair_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ShellPair_exposer.staticmethod( "typeName" );
        ShellPair_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Squire::ShellPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ShellPair_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Squire::ShellPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ShellPair_exposer.def_pickle(sire_pickle_suite< ::Squire::ShellPair >());
        ShellPair_exposer.def( "__str__", &__str__< ::Squire::ShellPair > );
        ShellPair_exposer.def( "__repr__", &__str__< ::Squire::ShellPair > );
    }

}
