// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_Squire_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

#include "SireBase/trigarray2d.h"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "sgto.h"

#include "sgto.h"

#include "SireBase/array2d.hpp"

#include "SireError/errors.h"

#include "SireMaths/boys.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pgto.h"

#include "pointcharge.h"

#include "pointdipole.h"

#include "pgto.h"

void register_free_functions(){

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Vector ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::SS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Vector ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::PS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::SS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::PP_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Vector > ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Vector > ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PP_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PS_GTO const &,::SireBase::Array2D< SireMaths::Vector > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PP_GTO const &,::SireBase::Array2D< SireMaths::Vector > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Matrix > ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PP_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PP_GTO const &,::SireBase::Array2D< SireMaths::Matrix > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Vector ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::SS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Vector ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::PS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::SS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireMaths::Matrix ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::PP_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Vector > ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Vector > ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PP_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PS_GTO const &,int,::SireBase::Array2D< SireMaths::Vector > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PS_GTO const &,::Squire::PP_GTO const &,int,::SireBase::Array2D< SireMaths::Vector > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef ::SireBase::Array2D< SireMaths::Matrix > ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PP_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef void ( *electron_integral_function_type )( ::Squire::PP_GTO const &,::Squire::PP_GTO const &,int,::SireBase::Array2D< SireMaths::Matrix > & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m"), bp::arg("matrix") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef double ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::SS_GTO const & );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q") )
            , "" );
    
    }

    { //::Squire::electron_integral
    
        typedef double ( *electron_integral_function_type )( ::Squire::SS_GTO const &,::Squire::SS_GTO const &,int );
        electron_integral_function_type electron_integral_function_value( &::Squire::electron_integral );
        
        bp::def( 
            "electron_integral"
            , electron_integral_function_value
            , ( bp::arg("P"), bp::arg("Q"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::kinetic_integral
    
        typedef ::SireMaths::Vector ( *kinetic_integral_function_type )( ::Squire::PS_GTO const & );
        kinetic_integral_function_type kinetic_integral_function_value( &::Squire::kinetic_integral );
        
        bp::def( 
            "kinetic_integral"
            , kinetic_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::kinetic_integral
    
        typedef ::SireMaths::Matrix ( *kinetic_integral_function_type )( ::Squire::PP_GTO const & );
        kinetic_integral_function_type kinetic_integral_function_value( &::Squire::kinetic_integral );
        
        bp::def( 
            "kinetic_integral"
            , kinetic_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::kinetic_integral
    
        typedef double ( *kinetic_integral_function_type )( ::Squire::SS_GTO const & );
        kinetic_integral_function_type kinetic_integral_function_value( &::Squire::kinetic_integral );
        
        bp::def( 
            "kinetic_integral"
            , kinetic_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::overlap_integral
    
        typedef ::SireMaths::Vector ( *overlap_integral_function_type )( ::Squire::PS_GTO const & );
        overlap_integral_function_type overlap_integral_function_value( &::Squire::overlap_integral );
        
        bp::def( 
            "overlap_integral"
            , overlap_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::overlap_integral
    
        typedef ::SireMaths::Matrix ( *overlap_integral_function_type )( ::Squire::PP_GTO const & );
        overlap_integral_function_type overlap_integral_function_value( &::Squire::overlap_integral );
        
        bp::def( 
            "overlap_integral"
            , overlap_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::overlap_integral
    
        typedef double ( *overlap_integral_function_type )( ::Squire::SS_GTO const & );
        overlap_integral_function_type overlap_integral_function_value( &::Squire::overlap_integral );
        
        bp::def( 
            "overlap_integral"
            , overlap_integral_function_value
            , ( bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::PS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::PS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::PS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::PS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::PS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::PS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::PS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Vector ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::PS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::PP_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::PP_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::PP_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::PP_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::PP_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::PP_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::PP_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef ::SireMaths::Matrix ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::PP_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::SS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::SS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::QVector< Squire::PointCharge > const &,::Squire::SS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::QVector< Squire::PointDipole > const &,::Squire::SS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::SS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("Q"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::SS_GTO const & );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("Q"), bp::arg("P") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::Squire::PointCharge const &,::Squire::SS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

    { //::Squire::potential_integral
    
        typedef double ( *potential_integral_function_type )( ::Squire::PointDipole const &,::Squire::SS_GTO const &,int );
        potential_integral_function_type potential_integral_function_value( &::Squire::potential_integral );
        
        bp::def( 
            "potential_integral"
            , potential_integral_function_value
            , ( bp::arg("C"), bp::arg("P"), bp::arg("m") )
            , "" );
    
    }

}
