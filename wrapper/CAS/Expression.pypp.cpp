// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Expression.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

SireCAS::Expression __copy__(const SireCAS::Expression &other){ return SireCAS::Expression(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Expression_class(){

    { //::SireCAS::Expression
        typedef bp::class_< SireCAS::Expression > Expression_exposer_t;
        Expression_exposer_t Expression_exposer = Expression_exposer_t( "Expression", "\nAn Expression is the base class of all algebraic entities.\n\nAuthor: Christopher Woods\n", bp::init< >("Construct an empty (zero) expression") );
        bp::scope Expression_scope( Expression_exposer );
        Expression_exposer.def( bp::init< int >(( bp::arg("constant") ), "Construct a constant expression equal to constant") );
        Expression_exposer.def( bp::init< SireMaths::Rational const & >(( bp::arg("constant") ), "Construct a constant expression equal to constant") );
        Expression_exposer.def( bp::init< double >(( bp::arg("constant") ), "Construct a constant expression equal to constant") );
        Expression_exposer.def( bp::init< SireMaths::Complex const & >(( bp::arg("constant") ), "Construct a constant expression equal to constant") );
        Expression_exposer.def( bp::init< SireCAS::ExpressionBase const & >(( bp::arg("base") ), "Construct an expression that is equal to 1(base)") );
        Expression_exposer.def( bp::init< SireCAS::ExBase const & >(( bp::arg("base") ), "Construct an expression that is equal to 1(base)") );
        Expression_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireCAS::Expression::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*add_function_type)( ::SireCAS::Expression const & ) const;
            add_function_type add_function_value( &::SireCAS::Expression::add );
            
            Expression_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("ex") )
                , bp::release_gil_policy()
                , "Return this expression added to ex" );
        
        }
        { //::SireCAS::Expression::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*add_function_type)( double ) const;
            add_function_type add_function_value( &::SireCAS::Expression::add );
            
            Expression_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return this expression added to val" );
        
        }
        { //::SireCAS::Expression::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*add_function_type)( ::SireMaths::Complex const & ) const;
            add_function_type add_function_value( &::SireCAS::Expression::add );
            
            Expression_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return this expression added to val" );
        
        }
        { //::SireCAS::Expression::base
        
            typedef ::SireCAS::ExpressionBase const & ( ::SireCAS::Expression::*base_function_type)(  ) const;
            base_function_type base_function_value( &::SireCAS::Expression::base );
            
            Expression_exposer.def( 
                "base"
                , base_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the ExpressionBase base-part of this expression" );
        
        }
        { //::SireCAS::Expression::children
        
            typedef ::SireCAS::Expressions ( ::SireCAS::Expression::*children_function_type)(  ) const;
            children_function_type children_function_value( &::SireCAS::Expression::children );
            
            Expression_exposer.def( 
                "children"
                , children_function_value
                , bp::release_gil_policy()
                , "Return the child expressions that make up this expression" );
        
        }
        { //::SireCAS::Expression::conjugate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*conjugate_function_type)(  ) const;
            conjugate_function_type conjugate_function_value( &::SireCAS::Expression::conjugate );
            
            Expression_exposer.def( 
                "conjugate"
                , conjugate_function_value
                , bp::release_gil_policy()
                , "Return the complex conjugate of this expression" );
        
        }
        { //::SireCAS::Expression::cubed
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*cubed_function_type)(  ) const;
            cubed_function_type cubed_function_value( &::SireCAS::Expression::cubed );
            
            Expression_exposer.def( 
                "cubed"
                , cubed_function_value
                , bp::release_gil_policy()
                , "Return the cube of this expression" );
        
        }
        { //::SireCAS::Expression::diff
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*diff_function_type)( ::SireCAS::Symbol const &,int ) const;
            diff_function_type diff_function_value( &::SireCAS::Expression::diff );
            
            Expression_exposer.def( 
                "diff"
                , diff_function_value
                , ( bp::arg("symbol"), bp::arg("level")=(int)(1) )
                , "Synonym for differentiate" );
        
        }
        { //::SireCAS::Expression::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*differentiate_function_type)( ::SireCAS::Symbol const &,int ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::Expression::differentiate );
            
            Expression_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol"), bp::arg("level")=(int)(1) )
                , "Differentiate this expression with respect to symbol and return\nthe resulting expression.\nThrow: SireCAS::unavailable_differential\n" );
        
        }
        { //::SireCAS::Expression::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*divide_function_type)( ::SireCAS::Expression const & ) const;
            divide_function_type divide_function_value( &::SireCAS::Expression::divide );
            
            Expression_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("ex") )
                , bp::release_gil_policy()
                , "Return an expression that is this  ex" );
        
        }
        { //::SireCAS::Expression::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*divide_function_type)( double ) const;
            divide_function_type divide_function_value( &::SireCAS::Expression::divide );
            
            Expression_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is this divided by val" );
        
        }
        { //::SireCAS::Expression::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*divide_function_type)( ::SireMaths::Complex const & ) const;
            divide_function_type divide_function_value( &::SireCAS::Expression::divide );
            
            Expression_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is divided by the complex number z" );
        
        }
        { //::SireCAS::Expression::evaluate
        
            typedef double ( ::SireCAS::Expression::*evaluate_function_type)( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Expression::evaluate );
            
            Expression_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Evaluate the numerical value of this expression, using the values\nsupplied in values. Any unidentified symbols or functions are\nassumed to be equal to zero. Note that this only performs real-arithmetic,\nso an exception will be thrown if any part of this expression generates\na complex result.\nThrow: SireMaths::domain_error\n" );
        
        }
        { //::SireCAS::Expression::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Expression::*evaluate_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Expression::evaluate );
            
            Expression_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Evaluate the numerical value of this expression using complex\narithmetic. Any unidentified symbols or functions are assumed\nto be equal to zero.\n" );
        
        }
        { //::SireCAS::Expression::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::Expression::*expand_function_type)( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::Expression::expand );
            
            Expression_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Return the factors and powers for the symbol symbol, given the values of the\nother symbols in values. This attempts to rearrange this equation\nso that it is of the form m  symbol^i + n  symbol^j ... + constant,\nand it returns the values of m,i, n,j etc..\nNote that this will fail if such a rearrangement is not possible\nThrow: SireCAS::rearrangement_error\n" );
        
        }
        { //::SireCAS::Expression::factor
        
            typedef double ( ::SireCAS::Expression::*factor_function_type)(  ) const;
            factor_function_type factor_function_value( &::SireCAS::Expression::factor );
            
            Expression_exposer.def( 
                "factor"
                , factor_function_value
                , bp::release_gil_policy()
                , "Return the factor of this expression" );
        
        }
        { //::SireCAS::Expression::functions
        
            typedef ::SireCAS::Functions ( ::SireCAS::Expression::*functions_function_type)(  ) const;
            functions_function_type functions_function_value( &::SireCAS::Expression::functions );
            
            Expression_exposer.def( 
                "functions"
                , functions_function_value
                , bp::release_gil_policy()
                , "Return all of the functions used in this expression" );
        
        }
        { //::SireCAS::Expression::hash
        
            typedef ::uint ( ::SireCAS::Expression::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireCAS::Expression::hash );
            
            Expression_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::Expression::integ
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*integ_function_type)( ::SireCAS::Symbol const & ) const;
            integ_function_type integ_function_value( &::SireCAS::Expression::integ );
            
            Expression_exposer.def( 
                "integ"
                , integ_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Synonym for integrate" );
        
        }
        { //::SireCAS::Expression::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*integrate_function_type)( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::Expression::integrate );
            
            Expression_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Integrate this expression with respect to symbol and return the\nresulting expression.\nThrow: SireCAS::unavailable_integral\n" );
        
        }
        { //::SireCAS::Expression::invert
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*invert_function_type)(  ) const;
            invert_function_type invert_function_value( &::SireCAS::Expression::invert );
            
            Expression_exposer.def( 
                "invert"
                , invert_function_value
                , bp::release_gil_policy()
                , "Return 1  expression" );
        
        }
        { //::SireCAS::Expression::isComplex
        
            typedef bool ( ::SireCAS::Expression::*isComplex_function_type)(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::Expression::isComplex );
            
            Expression_exposer.def( 
                "isComplex"
                , isComplex_function_value
                , bp::release_gil_policy()
                , "Return whether or not this expression has complex parts" );
        
        }
        { //::SireCAS::Expression::isCompound
        
            typedef bool ( ::SireCAS::Expression::*isCompound_function_type)(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::Expression::isCompound );
            
            Expression_exposer.def( 
                "isCompound"
                , isCompound_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is a compound expression (contains more\nthan a single expression, e.g. Sum, Product or PowerFunction)" );
        
        }
        { //::SireCAS::Expression::isConstant
        
            typedef bool ( ::SireCAS::Expression::*isConstant_function_type)(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::Expression::isConstant );
            
            Expression_exposer.def( 
                "isConstant"
                , isConstant_function_value
                , bp::release_gil_policy()
                , "Return whether or not this expression is constant for all values" );
        
        }
        { //::SireCAS::Expression::isFunction
        
            typedef bool ( ::SireCAS::Expression::*isFunction_function_type)( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::Expression::isFunction );
            
            Expression_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Return whether or not this is a function of symbol" );
        
        }
        { //::SireCAS::Expression::isZero
        
            typedef bool ( ::SireCAS::Expression::*isZero_function_type)(  ) const;
            isZero_function_type isZero_function_value( &::SireCAS::Expression::isZero );
            
            Expression_exposer.def( 
                "isZero"
                , isZero_function_value
                , bp::release_gil_policy()
                , "Return whether or not this expression is equal to 0 for all values" );
        
        }
        { //::SireCAS::Expression::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*multiply_function_type)( ::SireCAS::Expression const & ) const;
            multiply_function_type multiply_function_value( &::SireCAS::Expression::multiply );
            
            Expression_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("ex") )
                , bp::release_gil_policy()
                , "Return an expression that is this multiplied by ex" );
        
        }
        { //::SireCAS::Expression::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*multiply_function_type)( double ) const;
            multiply_function_type multiply_function_value( &::SireCAS::Expression::multiply );
            
            Expression_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is this multipled by val" );
        
        }
        { //::SireCAS::Expression::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*multiply_function_type)( ::SireMaths::Complex const & ) const;
            multiply_function_type multiply_function_value( &::SireCAS::Expression::multiply );
            
            Expression_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is this multiplied by the complex value z" );
        
        }
        { //::SireCAS::Expression::negate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*negate_function_type)(  ) const;
            negate_function_type negate_function_value( &::SireCAS::Expression::negate );
            
            Expression_exposer.def( 
                "negate"
                , negate_function_value
                , bp::release_gil_policy()
                , "Return the negative of this expression" );
        
        }
        Expression_exposer.def( bp::self != bp::self );
        { //::SireCAS::Expression::operator()
        
            typedef double ( ::SireCAS::Expression::*__call___function_type)( ::SireCAS::Values const & ) const;
            __call___function_type __call___function_value( &::SireCAS::Expression::operator() );
            
            Expression_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("values") )
                , "" );
        
        }
        { //::SireCAS::Expression::operator()
        
            typedef ::SireMaths::Complex ( ::SireCAS::Expression::*__call___function_type)( ::SireCAS::ComplexValues const & ) const;
            __call___function_type __call___function_value( &::SireCAS::Expression::operator() );
            
            Expression_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("values") )
                , "" );
        
        }
        Expression_exposer.def( -bp::self );
        { //::SireCAS::Expression::operator=
        
            typedef ::SireCAS::Expression & ( ::SireCAS::Expression::*assign_function_type)( ::SireCAS::Expression const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Expression::operator= );
            
            Expression_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Expression_exposer.def( bp::self == bp::self );
        { //::SireCAS::Expression::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*pow_function_type)( int ) const;
            pow_function_type pow_function_value( &::SireCAS::Expression::pow );
            
            Expression_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return this expression raised to the power n" );
        
        }
        { //::SireCAS::Expression::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*pow_function_type)( double ) const;
            pow_function_type pow_function_value( &::SireCAS::Expression::pow );
            
            Expression_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return this expression raised to a real number power" );
        
        }
        { //::SireCAS::Expression::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*pow_function_type)( ::SireMaths::Complex const & ) const;
            pow_function_type pow_function_value( &::SireCAS::Expression::pow );
            
            Expression_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return this expresssion raised to a complex power" );
        
        }
        { //::SireCAS::Expression::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*pow_function_type)( ::SireMaths::Rational const & ) const;
            pow_function_type pow_function_value( &::SireCAS::Expression::pow );
            
            Expression_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return this expression raised to the rational power n" );
        
        }
        { //::SireCAS::Expression::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*pow_function_type)( ::SireCAS::Expression const & ) const;
            pow_function_type pow_function_value( &::SireCAS::Expression::pow );
            
            Expression_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return this expression raised to a function" );
        
        }
        { //::SireCAS::Expression::root
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*root_function_type)( int ) const;
            root_function_type root_function_value( &::SireCAS::Expression::root );
            
            Expression_exposer.def( 
                "root"
                , root_function_value
                , ( bp::arg("n") )
                , bp::release_gil_policy()
                , "Return the nth root of this expression" );
        
        }
        { //::SireCAS::Expression::series
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*series_function_type)( ::SireCAS::Symbol const &,int ) const;
            series_function_type series_function_value( &::SireCAS::Expression::series );
            
            Expression_exposer.def( 
                "series"
                , series_function_value
                , ( bp::arg("symbol"), bp::arg("order") )
                , bp::release_gil_policy()
                , "Return a series expansion of this function with respect to symbol\nup to order n. If an expansion is not possible, then this just\nreturns this expression" );
        
        }
        { //::SireCAS::Expression::simplify
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*simplify_function_type)( int ) const;
            simplify_function_type simplify_function_value( &::SireCAS::Expression::simplify );
            
            Expression_exposer.def( 
                "simplify"
                , simplify_function_value
                , ( bp::arg("options")=(int)(0) )
                , "Try to simplify this expression by using built-in identities. If\nSireCAS::UNSAFE_COMPLEX_SIMPLIFICATIONS is passed, then allow the use\nof identities that are not necessarily true in the complex domain,\ne.g. z = sin(arcsin(z))" );
        
        }
        { //::SireCAS::Expression::squared
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*squared_function_type)(  ) const;
            squared_function_type squared_function_value( &::SireCAS::Expression::squared );
            
            Expression_exposer.def( 
                "squared"
                , squared_function_value
                , bp::release_gil_policy()
                , "Return the square of this expression" );
        
        }
        { //::SireCAS::Expression::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*substitute_function_type)( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::Expression::substitute );
            
            Expression_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") )
                , bp::release_gil_policy()
                , "Return an expression whereby the identities in identities have\nbeen substituted into this expression" );
        
        }
        { //::SireCAS::Expression::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*subtract_function_type)( ::SireCAS::Expression const & ) const;
            subtract_function_type subtract_function_value( &::SireCAS::Expression::subtract );
            
            Expression_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("ex") )
                , bp::release_gil_policy()
                , "Return an expression that is this - ex" );
        
        }
        { //::SireCAS::Expression::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*subtract_function_type)( double ) const;
            subtract_function_type subtract_function_value( &::SireCAS::Expression::subtract );
            
            Expression_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is this - val" );
        
        }
        { //::SireCAS::Expression::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::Expression::*subtract_function_type)( ::SireMaths::Complex const & ) const;
            subtract_function_type subtract_function_value( &::SireCAS::Expression::subtract );
            
            Expression_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Return an expression that is this - val" );
        
        }
        { //::SireCAS::Expression::symbols
        
            typedef ::SireCAS::Symbols ( ::SireCAS::Expression::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::Expression::symbols );
            
            Expression_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::release_gil_policy()
                , "Return all of the symbols used in this expression" );
        
        }
        { //::SireCAS::Expression::toOpenMMString
        
            typedef ::QString ( ::SireCAS::Expression::*toOpenMMString_function_type)(  ) const;
            toOpenMMString_function_type toOpenMMString_function_value( &::SireCAS::Expression::toOpenMMString );
            
            Expression_exposer.def( 
                "toOpenMMString"
                , toOpenMMString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this expression in the OpenMM syntax" );
        
        }
        { //::SireCAS::Expression::toString
        
            typedef ::QString ( ::SireCAS::Expression::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Expression::toString );
            
            Expression_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this expression" );
        
        }
        { //::SireCAS::Expression::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::Expression::typeName );
            
            Expression_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::Expression::what
        
            typedef char const * ( ::SireCAS::Expression::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireCAS::Expression::what );
            
            Expression_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Expression_exposer.staticmethod( "typeName" );
        Expression_exposer.def( bp::self * bp::self );
        Expression_exposer.def( bp::other< double >() * bp::self );
        Expression_exposer.def( bp::self * bp::other< double >() );
        Expression_exposer.def( bp::self * bp::other< SireMaths::Complex >() );
        Expression_exposer.def( bp::self * bp::other< SireCAS::ExBase >() );
        Expression_exposer.def( bp::self + bp::self );
        Expression_exposer.def( bp::self + bp::other< double >() );
        Expression_exposer.def( bp::other< double >() + bp::self );
        Expression_exposer.def( bp::self + bp::other< SireMaths::Complex >() );
        Expression_exposer.def( bp::self + bp::other< SireCAS::ExBase >() );
        Expression_exposer.def( bp::self - bp::self );
        Expression_exposer.def( bp::self - bp::other< double >() );
        Expression_exposer.def( bp::other< double >() - bp::self );
        Expression_exposer.def( bp::self - bp::other< SireCAS::ExBase >() );
        Expression_exposer.def( bp::self / bp::self );
        Expression_exposer.def( bp::self / bp::other< double >() );
        Expression_exposer.def( bp::other< double >() / bp::self );
        Expression_exposer.def( bp::self / bp::other< SireMaths::Complex >() );
        Expression_exposer.def( bp::self / bp::other< SireCAS::ExBase >() );
        Expression_exposer.def( self + self );
        Expression_exposer.def( self - self );
        Expression_exposer.def( self * self );
        Expression_exposer.def( self / self );
        Expression_exposer.def( other<double>() + self );
        Expression_exposer.def( other<double>() - self );
        Expression_exposer.def( other<double>() * self );
        Expression_exposer.def( other<double>() / self );
        Expression_exposer.def( self + other<double>() );
        Expression_exposer.def( self - other<double>() );
        Expression_exposer.def( self * other<double>() );
        Expression_exposer.def( self / other<double>() );
        Expression_exposer.def( other<SireMaths::Complex>() + self );
        Expression_exposer.def( other<SireMaths::Complex>() - self );
        Expression_exposer.def( other<SireMaths::Complex>() * self );
        Expression_exposer.def( other<SireMaths::Complex>() / self );
        Expression_exposer.def( self + other<SireMaths::Complex>() );
        Expression_exposer.def( self - other<SireMaths::Complex>() );
        Expression_exposer.def( self * other<SireMaths::Complex>() );
        Expression_exposer.def( self / other<SireMaths::Complex>() );
        Expression_exposer.def( other<SireCAS::ExBase>() + self );
        Expression_exposer.def( other<SireCAS::ExBase>() - self );
        Expression_exposer.def( other<SireCAS::ExBase>() * self );
        Expression_exposer.def( other<SireCAS::ExBase>() / self );
        Expression_exposer.def( self + other<SireCAS::ExBase>() );
        Expression_exposer.def( self - other<SireCAS::ExBase>() );
        Expression_exposer.def( self * other<SireCAS::ExBase>() );
        Expression_exposer.def( self / other<SireCAS::ExBase>() );
        Expression_exposer.def( "__copy__", &__copy__);
        Expression_exposer.def( "__deepcopy__", &__copy__);
        Expression_exposer.def( "clone", &__copy__);
        Expression_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::Expression >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Expression_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::Expression >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Expression_exposer.def_pickle(sire_pickle_suite< ::SireCAS::Expression >());
        Expression_exposer.def( "__str__", &__str__< ::SireCAS::Expression > );
        Expression_exposer.def( "__repr__", &__str__< ::SireCAS::Expression > );
        Expression_exposer.def( "__hash__", &::SireCAS::Expression::hash );
    }

}
