// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Abs.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "abs.h"

#include "complexvalues.h"

#include "values.h"

#include <cmath>

#include "abs.h"

SireCAS::Abs __copy__(const SireCAS::Abs &other){ return SireCAS::Abs(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Abs_class(){

    { //::SireCAS::Abs
        typedef bp::class_< SireCAS::Abs, bp::bases< SireCAS::SingleFunc, SireCAS::ExBase > > Abs_exposer_t;
        Abs_exposer_t Abs_exposer = Abs_exposer_t( "Abs", "\nThis is the absolute value, abs.\n\nabs(x) returns x if x >= 0, else -x\n\nFor complex values, this returns abs(x) + abs(y) i\n\nAuthor: Christopher Woods\n", bp::init< >("Construct an empty Abs(0)") );
        bp::scope Abs_scope( Abs_exposer );
        Abs_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("power") ), "Construct abs(expression)") );
        Abs_exposer.def( bp::init< SireCAS::Abs const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireCAS::Abs::evaluate
        
            typedef double ( ::SireCAS::Abs::*evaluate_function_type)( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Abs::evaluate );
            
            Abs_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Evaluate this function" );
        
        }
        { //::SireCAS::Abs::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Abs::*evaluate_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Abs::evaluate );
            
            Abs_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Complex evaluation" );
        
        }
        Abs_exposer.def( bp::self == bp::other< SireCAS::ExBase >() );
        { //::SireCAS::Abs::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::Abs::typeName );
            
            Abs_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::Abs::what
        
            typedef char const * ( ::SireCAS::Abs::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireCAS::Abs::what );
            
            Abs_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Abs_exposer.staticmethod( "typeName" );
        Abs_exposer.def( "__copy__", &__copy__);
        Abs_exposer.def( "__deepcopy__", &__copy__);
        Abs_exposer.def( "clone", &__copy__);
        Abs_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::Abs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Abs_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::Abs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Abs_exposer.def_pickle(sire_pickle_suite< ::SireCAS::Abs >());
        Abs_exposer.def( "__str__", &__str__< ::SireCAS::Abs > );
        Abs_exposer.def( "__repr__", &__str__< ::SireCAS::Abs > );
        Abs_exposer.def( "__hash__", &::SireCAS::Abs::hash );
    }

}
