// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AlwaysTrue.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireError/errors.h"

#include "SireMaths/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "complexvalues.h"

#include "conditional.h"

#include "expressions.h"

#include "functions.h"

#include "identities.h"

#include "symbols.h"

#include "values.h"

#include "conditional.h"

SireCAS::AlwaysTrue __copy__(const SireCAS::AlwaysTrue &other){ return SireCAS::AlwaysTrue(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AlwaysTrue_class(){

    { //::SireCAS::AlwaysTrue
        typedef bp::class_< SireCAS::AlwaysTrue, bp::bases< SireCAS::Condition, SireCAS::ExBase > > AlwaysTrue_exposer_t;
        AlwaysTrue_exposer_t AlwaysTrue_exposer = AlwaysTrue_exposer_t( "AlwaysTrue", "This is an overloaded conditional that is always true", bp::init< >("Constructor") );
        bp::scope AlwaysTrue_scope( AlwaysTrue_exposer );
        AlwaysTrue_exposer.def( bp::init< SireCAS::AlwaysTrue const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireCAS::AlwaysTrue::alwaysFalse
        
            typedef bool ( ::SireCAS::AlwaysTrue::*alwaysFalse_function_type)(  ) const;
            alwaysFalse_function_type alwaysFalse_function_value( &::SireCAS::AlwaysTrue::alwaysFalse );
            
            AlwaysTrue_exposer.def( 
                "alwaysFalse"
                , alwaysFalse_function_value
                , bp::release_gil_policy()
                , "AlwaysTrue is never false" );
        
        }
        { //::SireCAS::AlwaysTrue::alwaysTrue
        
            typedef bool ( ::SireCAS::AlwaysTrue::*alwaysTrue_function_type)(  ) const;
            alwaysTrue_function_type alwaysTrue_function_value( &::SireCAS::AlwaysTrue::alwaysTrue );
            
            AlwaysTrue_exposer.def( 
                "alwaysTrue"
                , alwaysTrue_function_value
                , bp::release_gil_policy()
                , "AlwaysTrue is always true" );
        
        }
        { //::SireCAS::AlwaysTrue::children
        
            typedef ::SireCAS::Expressions ( ::SireCAS::AlwaysTrue::*children_function_type)(  ) const;
            children_function_type children_function_value( &::SireCAS::AlwaysTrue::children );
            
            AlwaysTrue_exposer.def( 
                "children"
                , children_function_value
                , bp::release_gil_policy()
                , "The truth has no children" );
        
        }
        { //::SireCAS::AlwaysTrue::evaluate
        
            typedef double ( ::SireCAS::AlwaysTrue::*evaluate_function_type)( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::AlwaysTrue::evaluate );
            
            AlwaysTrue_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Truth is always true" );
        
        }
        { //::SireCAS::AlwaysTrue::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::AlwaysTrue::*evaluate_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::AlwaysTrue::evaluate );
            
            AlwaysTrue_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Truth is always true" );
        
        }
        { //::SireCAS::AlwaysTrue::evaluateCondition
        
            typedef bool ( ::SireCAS::AlwaysTrue::*evaluateCondition_function_type)( ::SireCAS::Values const & ) const;
            evaluateCondition_function_type evaluateCondition_function_value( &::SireCAS::AlwaysTrue::evaluateCondition );
            
            AlwaysTrue_exposer.def( 
                "evaluateCondition"
                , evaluateCondition_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Truth is always true" );
        
        }
        { //::SireCAS::AlwaysTrue::evaluateCondition
        
            typedef bool ( ::SireCAS::AlwaysTrue::*evaluateCondition_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluateCondition_function_type evaluateCondition_function_value( &::SireCAS::AlwaysTrue::evaluateCondition );
            
            AlwaysTrue_exposer.def( 
                "evaluateCondition"
                , evaluateCondition_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Truth is always true" );
        
        }
        { //::SireCAS::AlwaysTrue::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::AlwaysTrue::*expand_function_type)( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::AlwaysTrue::expand );
            
            AlwaysTrue_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "The truth cannot be expanded" );
        
        }
        { //::SireCAS::AlwaysTrue::functions
        
            typedef ::SireCAS::Functions ( ::SireCAS::AlwaysTrue::*functions_function_type)(  ) const;
            functions_function_type functions_function_value( &::SireCAS::AlwaysTrue::functions );
            
            AlwaysTrue_exposer.def( 
                "functions"
                , functions_function_value
                , bp::release_gil_policy()
                , "There are no functions in truth" );
        
        }
        { //::SireCAS::AlwaysTrue::hash
        
            typedef ::uint ( ::SireCAS::AlwaysTrue::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireCAS::AlwaysTrue::hash );
            
            AlwaysTrue_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "Hash truth" );
        
        }
        { //::SireCAS::AlwaysTrue::isComplex
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isComplex_function_type)(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::AlwaysTrue::isComplex );
            
            AlwaysTrue_exposer.def( 
                "isComplex"
                , isComplex_function_value
                , bp::release_gil_policy()
                , "Truth is never complex" );
        
        }
        { //::SireCAS::AlwaysTrue::isCompound
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isCompound_function_type)(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::AlwaysTrue::isCompound );
            
            AlwaysTrue_exposer.def( 
                "isCompound"
                , isCompound_function_value
                , bp::release_gil_policy()
                , "Truth is always simple" );
        
        }
        { //::SireCAS::AlwaysTrue::isConstant
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isConstant_function_type)(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::AlwaysTrue::isConstant );
            
            AlwaysTrue_exposer.def( 
                "isConstant"
                , isConstant_function_value
                , bp::release_gil_policy()
                , "Truth is always constant" );
        
        }
        { //::SireCAS::AlwaysTrue::isFunction
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isFunction_function_type)( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::AlwaysTrue::isFunction );
            
            AlwaysTrue_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "This is not a function of anything" );
        
        }
        { //::SireCAS::AlwaysTrue::isNull
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireCAS::AlwaysTrue::isNull );
            
            AlwaysTrue_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "Truth is never empty" );
        
        }
        { //::SireCAS::AlwaysTrue::operator=
        
            typedef ::SireCAS::AlwaysTrue & ( ::SireCAS::AlwaysTrue::*assign_function_type)( ::SireCAS::AlwaysTrue const & ) ;
            assign_function_type assign_function_value( &::SireCAS::AlwaysTrue::operator= );
            
            AlwaysTrue_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AlwaysTrue_exposer.def( bp::self == bp::self );
        AlwaysTrue_exposer.def( bp::self == bp::other< SireCAS::ExBase >() );
        { //::SireCAS::AlwaysTrue::simplify
        
            typedef ::SireCAS::Expression ( ::SireCAS::AlwaysTrue::*simplify_function_type)( int ) const;
            simplify_function_type simplify_function_value( &::SireCAS::AlwaysTrue::simplify );
            
            AlwaysTrue_exposer.def( 
                "simplify"
                , simplify_function_value
                , ( bp::arg("options") )
                , bp::release_gil_policy()
                , "This cannot be further simplified" );
        
        }
        { //::SireCAS::AlwaysTrue::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::AlwaysTrue::*substitute_function_type)( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::AlwaysTrue::substitute );
            
            AlwaysTrue_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") )
                , bp::release_gil_policy()
                , "There is no substituting the truth" );
        
        }
        { //::SireCAS::AlwaysTrue::symbols
        
            typedef ::SireCAS::Symbols ( ::SireCAS::AlwaysTrue::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::AlwaysTrue::symbols );
            
            AlwaysTrue_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::release_gil_policy()
                , "There are no symbols in truth" );
        
        }
        { //::SireCAS::AlwaysTrue::toString
        
            typedef ::QString ( ::SireCAS::AlwaysTrue::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireCAS::AlwaysTrue::toString );
            
            AlwaysTrue_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of truth" );
        
        }
        { //::SireCAS::AlwaysTrue::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::AlwaysTrue::typeName );
            
            AlwaysTrue_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::AlwaysTrue::what
        
            typedef char const * ( ::SireCAS::AlwaysTrue::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireCAS::AlwaysTrue::what );
            
            AlwaysTrue_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AlwaysTrue_exposer.staticmethod( "typeName" );
        AlwaysTrue_exposer.def( "__copy__", &__copy__);
        AlwaysTrue_exposer.def( "__deepcopy__", &__copy__);
        AlwaysTrue_exposer.def( "clone", &__copy__);
        AlwaysTrue_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::AlwaysTrue >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AlwaysTrue_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::AlwaysTrue >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AlwaysTrue_exposer.def_pickle(sire_pickle_suite< ::SireCAS::AlwaysTrue >());
        AlwaysTrue_exposer.def( "__str__", &__str__< ::SireCAS::AlwaysTrue > );
        AlwaysTrue_exposer.def( "__repr__", &__str__< ::SireCAS::AlwaysTrue > );
        AlwaysTrue_exposer.def( "__hash__", &::SireCAS::AlwaysTrue::hash );
    }

}
