// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Symbol.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "expressions.h"

#include "functions.h"

#include "identities.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include <QDebug>

#include <QHash>

#include <QMutex>

#include "symbol.h"

SireCAS::Symbol __copy__(const SireCAS::Symbol &other){ return SireCAS::Symbol(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Symbol_class(){

    { //::SireCAS::Symbol
        typedef bp::class_< SireCAS::Symbol, bp::bases< SireCAS::ExBase > > Symbol_exposer_t;
        Symbol_exposer_t Symbol_exposer = Symbol_exposer_t( "Symbol", "This class represents an algebraic symbol in the equation (e.g. x or y)\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope Symbol_scope( Symbol_exposer );
        Symbol_exposer.def( bp::init< SireCAS::SymbolID >(( bp::arg("symid") ), "Construct a symbol from the passed ID number") );
        Symbol_exposer.def( bp::init< QString const & >(( bp::arg("rep") ), "Construct a new symbol, with string representation rep") );
        Symbol_exposer.def( bp::init< SireCAS::Symbol const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireCAS::Symbol::ID
        
            typedef ::SireCAS::SymbolID ( ::SireCAS::Symbol::*ID_function_type)(  ) const;
            ID_function_type ID_function_value( &::SireCAS::Symbol::ID );
            
            Symbol_exposer.def( 
                "ID"
                , ID_function_value
                , bp::release_gil_policy()
                , "Return the unique ID number of the symbol" );
        
        }
        { //::SireCAS::Symbol::children
        
            typedef ::SireCAS::Expressions ( ::SireCAS::Symbol::*children_function_type)(  ) const;
            children_function_type children_function_value( &::SireCAS::Symbol::children );
            
            Symbol_exposer.def( 
                "children"
                , children_function_value
                , bp::release_gil_policy()
                , "There are no child expressions in a symbol" );
        
        }
        { //::SireCAS::Symbol::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*differentiate_function_type)( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::Symbol::differentiate );
            
            Symbol_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Differentiate this symbol with respect to sym. This returns 1.0 if this\nis sym, else it returns 0.0" );
        
        }
        { //::SireCAS::Symbol::evaluate
        
            typedef double ( ::SireCAS::Symbol::*evaluate_function_type)( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Symbol::evaluate );
            
            Symbol_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Evaluate this symbol - returns the value of the symbol in values if\nit is present, else it returns 0.0" );
        
        }
        { //::SireCAS::Symbol::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Symbol::*evaluate_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Symbol::evaluate );
            
            Symbol_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") )
                , bp::release_gil_policy()
                , "Evaluate this symbol - returns the value of the symbol in values if\nit is present, else it returns 0" );
        
        }
        { //::SireCAS::Symbol::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::Symbol::*expand_function_type)( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::Symbol::expand );
            
            Symbol_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::Symbol::functions
        
            typedef ::SireCAS::Functions ( ::SireCAS::Symbol::*functions_function_type)(  ) const;
            functions_function_type functions_function_value( &::SireCAS::Symbol::functions );
            
            Symbol_exposer.def( 
                "functions"
                , functions_function_value
                , bp::release_gil_policy()
                , "This is not a function" );
        
        }
        { //::SireCAS::Symbol::hash
        
            typedef ::uint ( ::SireCAS::Symbol::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireCAS::Symbol::hash );
            
            Symbol_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "Hash a symbol" );
        
        }
        { //::SireCAS::Symbol::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*integrate_function_type)( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::Symbol::integrate );
            
            Symbol_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") )
                , bp::release_gil_policy()
                , "Integrate this symbol with respect to sym. If sym == this, then\nreturn 0.5 sym^2, else return this  sym" );
        
        }
        { //::SireCAS::Symbol::isConstant
        
            typedef bool ( ::SireCAS::Symbol::*isConstant_function_type)(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::Symbol::isConstant );
            
            Symbol_exposer.def( 
                "isConstant"
                , isConstant_function_value
                , bp::release_gil_policy()
                , "A symbol is by definition not constant" );
        
        }
        { //::SireCAS::Symbol::isFunction
        
            typedef bool ( ::SireCAS::Symbol::*isFunction_function_type)( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::Symbol::isFunction );
            
            Symbol_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Is this a function of symbol" );
        
        }
        { //::SireCAS::Symbol::isNull
        
            typedef bool ( ::SireCAS::Symbol::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireCAS::Symbol::isNull );
            
            Symbol_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "Return whether or not the symbol is null" );
        
        }
        Symbol_exposer.def( bp::self < bp::self );
        Symbol_exposer.def( bp::self <= bp::self );
        { //::SireCAS::Symbol::operator=
        
            typedef ::SireCAS::Symbol & ( ::SireCAS::Symbol::*assign_function_type)( ::SireCAS::Symbol const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Symbol::operator= );
            
            Symbol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireCAS::Symbol::operator=
        
            typedef ::SireCAS::Symbol & ( ::SireCAS::Symbol::*assign_function_type)( ::SireCAS::SymbolID ) ;
            assign_function_type assign_function_value( &::SireCAS::Symbol::operator= );
            
            Symbol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("symid") )
                , bp::return_self< >()
                , "" );
        
        }
        Symbol_exposer.def( bp::self == bp::other< double >() );
        Symbol_exposer.def( bp::self == bp::other< int >() );
        Symbol_exposer.def( bp::self == bp::other< SireMaths::Complex >() );
        Symbol_exposer.def( bp::self == bp::other< SireCAS::Expression >() );
        Symbol_exposer.def( bp::self == bp::other< SireCAS::ExBase >() );
        Symbol_exposer.def( bp::self > bp::self );
        Symbol_exposer.def( bp::self >= bp::self );
        { //::SireCAS::Symbol::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*substitute_function_type)( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::Symbol::substitute );
            
            Symbol_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") )
                , bp::release_gil_policy()
                , "Return the expression that matches this symbol in identities - or return\nan expression holding only this symbol if it does no exist in identities" );
        
        }
        { //::SireCAS::Symbol::symbols
        
            typedef ::SireCAS::Symbols ( ::SireCAS::Symbol::*symbols_function_type)(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::Symbol::symbols );
            
            Symbol_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::release_gil_policy()
                , "Return this symbol" );
        
        }
        { //::SireCAS::Symbol::toString
        
            typedef ::QString ( ::SireCAS::Symbol::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Symbol::toString );
            
            Symbol_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this symbol" );
        
        }
        { //::SireCAS::Symbol::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::Symbol::typeName );
            
            Symbol_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::Symbol::what
        
            typedef char const * ( ::SireCAS::Symbol::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireCAS::Symbol::what );
            
            Symbol_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Symbol_exposer.staticmethod( "typeName" );
        Symbol_exposer.def( "__copy__", &__copy__);
        Symbol_exposer.def( "__deepcopy__", &__copy__);
        Symbol_exposer.def( "clone", &__copy__);
        Symbol_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::Symbol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Symbol_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::Symbol >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Symbol_exposer.def_pickle(sire_pickle_suite< ::SireCAS::Symbol >());
        Symbol_exposer.def( "__str__", &__str__< ::SireCAS::Symbol > );
        Symbol_exposer.def( "__repr__", &__str__< ::SireCAS::Symbol > );
        Symbol_exposer.def( "__hash__", &::SireCAS::Symbol::hash );
    }

}
