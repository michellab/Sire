// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "I.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "expression.h"

#include "i.h"

#include "i.h"

SireCAS::I __copy__(const SireCAS::I &other){ return SireCAS::I(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_I_class(){

    { //::SireCAS::I
        typedef bp::class_< SireCAS::I, bp::bases< SireCAS::Constant, SireCAS::ExBase > > I_exposer_t;
        I_exposer_t I_exposer = I_exposer_t( "I", "\nThis is the complex number, i\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope I_scope( I_exposer );
        I_exposer.def( bp::init< SireCAS::I const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireCAS::I::conjugate
        
            typedef ::SireCAS::Expression ( ::SireCAS::I::*conjugate_function_type)(  ) const;
            conjugate_function_type conjugate_function_value( &::SireCAS::I::conjugate );
            
            I_exposer.def( 
                "conjugate"
                , conjugate_function_value
                , bp::release_gil_policy()
                , "Return the complex conjugate of i (-i)" );
        
        }
        { //::SireCAS::I::evaluate
        
            typedef double ( ::SireCAS::I::*evaluate_function_type)( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::I::evaluate );
            
            I_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Cannot evaluate i as a real number, so throw a domain error" );
        
        }
        { //::SireCAS::I::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::I::*evaluate_function_type)( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::I::evaluate );
            
            I_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Evaluate this as a complex number - return i" );
        
        }
        { //::SireCAS::I::hash
        
            typedef ::uint ( ::SireCAS::I::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireCAS::I::hash );
            
            I_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "Return a hash of this expression" );
        
        }
        { //::SireCAS::I::isComplex
        
            typedef bool ( ::SireCAS::I::*isComplex_function_type)(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::I::isComplex );
            
            I_exposer.def( 
                "isComplex"
                , isComplex_function_value
                , bp::release_gil_policy()
                , "I is definitely complex :-)" );
        
        }
        I_exposer.def( bp::self == bp::other< SireCAS::ExBase >() );
        { //::SireCAS::I::toString
        
            typedef ::QString ( ::SireCAS::I::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireCAS::I::toString );
            
            I_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation" );
        
        }
        { //::SireCAS::I::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::I::typeName );
            
            I_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireCAS::I::what
        
            typedef char const * ( ::SireCAS::I::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireCAS::I::what );
            
            I_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        I_exposer.staticmethod( "typeName" );
        I_exposer.def( "__copy__", &__copy__);
        I_exposer.def( "__deepcopy__", &__copy__);
        I_exposer.def( "clone", &__copy__);
        I_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::I >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        I_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::I >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        I_exposer.def_pickle(sire_pickle_suite< ::SireCAS::I >());
        I_exposer.def( "__str__", &__str__< ::SireCAS::I > );
        I_exposer.def( "__repr__", &__str__< ::SireCAS::I > );
        I_exposer.def( "__hash__", &::SireCAS::I::hash );
    }

}
